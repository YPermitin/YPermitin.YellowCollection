
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	МетаданныеОбработки = ОбъектНаСервере.Метаданные();
	ПолноеИмяОбработки = МетаданныеОбработки.ПолноеИмя();
	
	Объект.ОбъектыИИдентификаторы.Добавить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимРаботыСписком(Команда)
	
	РежимРаботыСпискомНаСервере(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыЭлемент(Команда)
	
	Если Объект.ОбъектыИИдентификаторы.Количество() = 0 Тогда
		Объект.ОбъектыИИдентификаторы.Добавить();
	КонецЕсли;
	
	Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаОдинЭлемент;
	Элементы.ФормаРежимРаботыЭлемент.Видимость = Ложь;
	Элементы.ФормаРежимРаботыСписком.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаОбъектПриИзменении(Элемент)
	
	ТекущиеДанные = ИнформацияОТекущихДанных();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ИдентификаторСсылки = Неопределено;
	ТекущиеДанные.ИдентификаторТипа = Неопределено;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	СсылкаНаОбъектПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторСсылкиПриИзменении(Элемент)

	ТекущиеДанные = ИнформацияОТекущихДанных();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ИдентификаторСсылкиПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаПриИзменении(Элемент)
	
	ТекущиеДанные = ИнформацияОТекущихДанных();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НавигационнаяСсылкаПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторSQLServerПриИзменении(Элемент)
	
	ТекущиеДанные = ИнформацияОТекущихДанных();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ИдентификаторSQLServerПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторPostgreSQLПриИзменении(Элемент)
	
	ТекущиеДанные = ИнформацияОТекущихДанных();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ИдентификаторPostgreSQLПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеБитойСсылкиПриИзменении(Элемент)
	
	ТекущиеДанные = ИнформацияОТекущихДанных();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПредставлениеБитойСсылкиПриИзмененииНаСервере(ИдентификаторСтроки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторТипаПриИзменении(Элемент)
	
	ТекущиеДанные = ИнформацияОТекущихДанных();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();

	ИдентификаторТипаПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РежимРаботыСпискомНаСервере(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаСписокЭлементов;
	Элементы.ФормаРежимРаботыЭлемент.Видимость = Истина;
	Элементы.ФормаРежимРаботыСписком.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ИнформацияОТекущихДанных()
	
	Если Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаОдинЭлемент Тогда
		ТекущиеДанные = Объект.ОбъектыИИдентификаторы.Получить(0);	
	Иначе
		ТекущиеДанные = Элементы.ОбъектыИИдентификаторы.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаСервере
Процедура ИдентификаторТипаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.ОбъектыИИдентификаторы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДанныеТекущейСтроки.СсылкаНаОбъект = Неопределено;
	ИсходныйИдентификаторТипа = ДанныеТекущейСтроки.ИдентификаторТипа;
	ОчиститьДанныеСтроки(ДанныеТекущейСтроки);
	ДанныеТекущейСтроки.ИдентификаторТипа = ИсходныйИдентификаторТипа;
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ИдентификаторТипа)
		И ЭтоУникальныйИдентификатор(ДанныеТекущейСтроки.ИдентификаторТипа) Тогда
		
		СлужебныйИдентификаторТипа = "{""T""," + ДанныеТекущейСтроки.ИдентификаторТипа + "}";
		ТипЗначения = ЗначениеИзСтрокиВнутр(СлужебныйИдентификаторТипа);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗначения);
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		ПустоеЗначение = ОписаниеТипа.ПривестиЗначение(Неопределено);
		МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначения);
		
		ИнформацияОСсылке = РасширеннаяИнформацияОСсылке(ПустоеЗначение);
		
		Если НЕ МетаданныеПоТипу = Неопределено Тогда
			ДанныеТекущейСтроки.ИмяМетаданных = МетаданныеПоТипу.ПолноеИмя();
		КонецЕсли;
		ДанныеТекущейСтроки.ЧисловойИдентификаторТипа = ИнформацияОСсылке.ЧисловойИдентификаторТипа;
		ОбновитьИдентификаторТипаSQLServer(ДанныеТекущейСтроки);
		ОбновитьИдентификаторТипаPostgreSQL(ДанныеТекущейСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СсылкаНаОбъектПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.ОбъектыИИдентификаторы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИсходныйИдентификатор = ДанныеТекущейСтроки.ИдентификаторСсылки;
	ИсходнаяСсылка = ДанныеТекущейСтроки.СсылкаНаОбъект;
	ОчиститьДанныеСтроки(ДанныеТекущейСтроки);
	ДанныеТекущейСтроки.СсылкаНаОбъект = ИсходнаяСсылка;	
	ДанныеТекущейСтроки.ИдентификаторСсылки = ИсходныйИдентификатор;
	
	МетаданныеСсылки = Неопределено;
	СсылкаЗаполнена = ЗначениеЗаполнено(ДанныеТекущейСтроки.СсылкаНаОбъект);
	ИдентификаторЗаполнен = ЗначениеЗаполнено(ДанныеТекущейСтроки.ИдентификаторСсылки);
	
	Если СсылкаЗаполнена ИЛИ ИдентификаторЗаполнен Тогда
		
		Если СсылкаЗаполнена Тогда
			
			МетаданныеСсылки = ДанныеТекущейСтроки.СсылкаНаОбъект.Метаданные();		
			ДанныеТекущейСтроки.ИмяМетаданных = МетаданныеСсылки.ПолноеИмя();
			
			Если СсылкаСуществует(ДанныеТекущейСтроки.СсылкаНаОбъект, ДанныеТекущейСтроки.ИмяМетаданных) Тогда
				
				ИнформацияОСсылке = РасширеннаяИнформацияОСсылке(ДанныеТекущейСтроки.СсылкаНаОбъект);
				
				ИдентификаторОбъекта = ИнформацияОСсылке.ИдентификаторОбъекта;
				ДанныеТекущейСтроки.ЧисловойИдентификаторТипа = ИнформацияОСсылке.ЧисловойИдентификаторТипа;
				ДанныеТекущейСтроки.ИдентификаторТипа = ИнформацияОСсылке.ИдентификаторТипа;
				ОбновитьИдентификаторТипаSQLServer(ДанныеТекущейСтроки);
				ОбновитьИдентификаторТипаPostgreSQL(ДанныеТекущейСтроки);
				
			Иначе
				
				ИдентификаторОбъекта = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ИдентификаторЗаполнен Тогда
			
			ДанныеТекущейСтроки.ИдентификаторСсылки = Строка(ИдентификаторОбъекта);
			
		КонецЕсли;
				
		ЧастиУникальногоИдентификатора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ДанныеТекущейСтроки.ИдентификаторСсылки, "-");
			
		Если ЧастиУникальногоИдентификатора.Количество() = 5 Тогда
				
			СокращенныйИдентфикаторСсылки = 
				ВРег(ЧастиУникальногоИдентификатора.Получить(3))
				+ ВРег(ЧастиУникальногоИдентификатора.Получить(4))
				+ ВРег(ЧастиУникальногоИдентификатора.Получить(2))
				+ ВРег(ЧастиУникальногоИдентификатора.Получить(1))
				+ ВРег(ЧастиУникальногоИдентификатора.Получить(0));
				
			ДанныеТекущейСтроки.ИдентификаторSQLServer = "0x" + СокращенныйИдентфикаторСсылки;
				
			ДанныеТекущейСтроки.ИдентификаторPostgreSQL = "'\x"
				+ СокращенныйИдентфикаторСсылки
				+ "'";			
				
		Иначе
			
			ДанныеТекущейСтроки.ИдентификаторSQLServer = "";
			ДанныеТекущейСтроки.ИдентификаторPostgreSQL = "";
			
		КонецЕсли;
			
		НавигационнаяСсылкаОбъекта = "";
		
		Если СсылкаЗаполнена Тогда
		
			Попытка
				
				НавигационнаяСсылкаОбъекта = ПолучитьНавигационнуюСсылку(ДанныеТекущейСтроки.СсылкаНаОбъект);
				
			Исключение	
				
				// Действий не требуется
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НавигационнаяСсылкаОбъекта)
			И ЗначениеЗаполнено(СокращенныйИдентфикаторСсылки)
			И ЗначениеЗаполнено(ДанныеТекущейСтроки.ИмяМетаданных) Тогда
			
			НавигационнаяСсылкаОбъекта = "e1cib/data/" 
				+ ДанныеТекущейСтроки.ИмяМетаданных 
				+ "?ref="
				+ СокращенныйИдентфикаторСсылки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НавигационнаяСсылкаОбъекта) Тогда
		
			ДанныеТекущейСтроки.НавигационнаяСсылка = НавигационнаяСсылкаОбъекта;
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.ЧисловойИдентификаторТипа)
			И НЕ МетаданныеСсылки = Неопределено Тогда
				
			МассивМетаданных = Новый Массив;
			МассивМетаданных.Добавить(МетаданныеСсылки);
			ИнформацияОСтруктуреБазы = ПолучитьСтруктуруХраненияБазыДанных(МассивМетаданных, Истина);
			НайденныйОбъектБазы = ИнформацияОСтруктуреБазы.НайтиСтроки(Новый Структура("Назначение", "Основная"));
			Если НайденныйОбъектБазы.Количество() = 1 Тогда
				
				ОбъектБазы = НайденныйОбъектБазы.Получить(0);
				ИмяТаблицыБазы = ОбъектБазы.ИмяТаблицыХранения;
				
				ЧисловойИдентификаторТипаСтрокой = "";
				ДлинаИмениТаблицы = СтрДлина(ИмяТаблицыБазы);
				
				Для НомерСимвола = 1 По ДлинаИмениТаблицы Цикл
					
					ТекущийСимвол = Сред(ИмяТаблицыБазы, НомерСимвола, 1);
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекущийСимвол) Тогда
						ЧисловойИдентификаторТипаСтрокой = ЧисловойИдентификаторТипаСтрокой + ТекущийСимвол;
					ИначеЕсли ЗначениеЗаполнено(ЧисловойИдентификаторТипаСтрокой) Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ЧисловойИдентификаторТипа = ПреобразоватьКЧислу(ЧисловойИдентификаторТипаСтрокой);
				
			Иначе
				
				ЧисловойИдентификаторТипа = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ЧисловойИдентификаторТипа)
			И ЗначениеЗаполнено(ДанныеТекущейСтроки.ИдентификаторСсылки) Тогда
		
			ДанныеТекущейСтроки.ПредставлениеБитойСсылки = 
				"<Объект не найден> (" 
				+ XMLСтрока(ДанныеТекущейСтроки.ЧисловойИдентификаторТипа) 
				+ ":" 
				+ ДанныеТекущейСтроки.ИдентификаторСсылки 
				+ ")";
				
		КонецЕсли;
		
		ОбновитьИдентификаторТипаSQLServer(ДанныеТекущейСтроки);
		ОбновитьИдентификаторТипаPostgreSQL(ДанныеТекущейСтроки);
		
	Иначе
		
		ОчиститьДанныеСтроки(ДанныеТекущейСтроки);
		
	КонецЕсли;
	
	ДанныеТекущейСтроки.ДатаСозданияСсылки = ДатаСозданияСсылки(ДанныеТекущейСтроки.СсылкаНаОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеСтроки(ДанныеСтроки)
	
	ДанныеСтроки.ИдентификаторСсылки = Неопределено;
	ДанныеСтроки.НавигационнаяСсылка = Неопределено;
	ДанныеСтроки.ИдентификаторSQLServer = Неопределено;
	ДанныеСтроки.ИдентификаторPostgreSQL = Неопределено;
	ДанныеСтроки.ИмяМетаданных = Неопределено;
	ДанныеСтроки.ЧисловойИдентификаторТипа = Неопределено;
	ДанныеСтроки.ИдентификаторТипаSQLServer = Неопределено;
	ДанныеСтроки.ИдентификаторТипаPostgreSQL = Неопределено;
	ДанныеСтроки.ПредставлениеБитойСсылки = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасширеннаяИнформацияОСсылке(СсылкаНаОбъект)
	
	ИнформацияОСсылке = Новый Структура;
	ИнформацияОСсылке.Вставить("ИдентификаторОбъекта", Неопределено);
	ИнформацияОСсылке.Вставить("ИдентификаторТипа", Неопределено);
	ИнформацияОСсылке.Вставить("ЧисловойИдентификаторТипа", Неопределено);
	
	ВнутреннееОпределениеСсылки = ЗначениеВСтрокуВнутр(СсылкаНаОбъект);
	ЧастиВнутреннегоОпределенияСсылки = РазложитьСтрокуВМассивПодстрок(ВнутреннееОпределениеСсылки, ",");
	Если ЧастиВнутреннегоОпределенияСсылки.Количество() = 3 Тогда
		
		ИнформацияОСсылке.ИдентификаторТипа = ЧастиВнутреннегоОпределенияСсылки.Получить(1);
		ВнутреннийИдентификаторСсылки = СтрЗаменить(ЧастиВнутреннегоОпределенияСсылки.Получить(2), "}", "");
		ИнформацияПоСлужебномуПредставлениюСсылки = ИнформацияПоСлужебномуПредставлениюСсылки("(" + ВнутреннийИдентификаторСсылки + ")");
		
		ИнформацияОСсылке.ИдентификаторОбъекта = ИнформацияПоСлужебномуПредставлениюСсылки.ИдентификаторЗначения;
		ИнформацияОСсылке.ЧисловойИдентификаторТипа = ИнформацияПоСлужебномуПредставлениюСсылки.ЧисловойИдентификаторТипа;
		
	Иначе			
		
		Если НЕ СсылкаНаОбъект = Неопределено Тогда
			ИнформацияОСсылке.ИдентификаторОбъекта = СсылкаНаОбъект.УникальныйИдентификатор();
		Иначе
			ИнформацияОСсылке.ИдентификаторОбъекта = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияОСсылке.ИдентификаторОбъекта = Строка(ИнформацияОСсылке.ИдентификаторОбъекта);
	
	Возврат ИнформацияОСсылке;

КонецФункции

&НаСервере
Процедура ИдентификаторСсылкиПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.ОбъектыИИдентификаторы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ИдентификаторСсылки)
		И ЭтоУникальныйИдентификатор(ДанныеТекущейСтроки.ИдентификаторСсылки) Тогда
	
		УникальныйИдентификаторОбъекта = Новый УникальныйИдентификатор(ДанныеТекущейСтроки.ИдентификаторСсылки);
		
		НайденныеОбъекты = НайтиОбъектыПоУникальномуИдентификатору(УникальныйИдентификаторОбъекта);
		
		Если НайденныеОбъекты.Количество() > 0 Тогда
			ДанныеТекущейСтроки.СсылкаНаОбъект = НайденныеОбъекты.Получить(0);
			
			Если НайденныеОбъекты.Количество() > 1 Тогда
				
				Для Каждого НайденныйОбъект Из НайденныеОбъекты Цикл
					
					Если НайденныйОбъект = ДанныеТекущейСтроки.СсылкаНаОбъект Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавитьЗаписьПоСсылкеНаОбъект(НайденныйОбъект);
					
				КонецЦикла;
				
				РежимРаботыСпискомНаСервере(ЭтаФорма);
				
			КонецЕсли;
			
		Иначе
			ДанныеТекущейСтроки.СсылкаНаОбъект = Неопределено;	
		КонецЕсли;
		
	Иначе
		
		ДанныеТекущейСтроки.СсылкаНаОбъект = Неопределено;
		
	КонецЕсли;
	
	СсылкаНаОбъектПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура НавигационнаяСсылкаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.ОбъектыИИдентификаторы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.НавигационнаяСсылка) Тогда
		СлужебныйИдентификаторСтрока = Прав(ДанныеТекущейСтроки.НавигационнаяСсылка, 32);
		УникальныйИдентификаторОбъекта = ПреобразоватьСлужебныйИдентификатор(СлужебныйИдентификаторСтрока);
		ДанныеТекущейСтроки.ИдентификаторСсылки = Строка(УникальныйИдентификаторОбъекта);
	Иначе
		ДанныеТекущейСтроки.ИдентификаторСсылки = Неопределено;
	КонецЕсли;
	
	ИдентификаторСсылкиПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ИдентификаторSQLServerПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.ОбъектыИИдентификаторы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ИдентификаторSQLServer) Тогда
		УникальныйИдентификаторОбъекта = ПреобразоватьСлужебныйИдентификатор(СтрЗаменить(ДанныеТекущейСтроки.ИдентификаторSQLServer, "0x", ""));
		ДанныеТекущейСтроки.ИдентификаторСсылки = Строка(УникальныйИдентификаторОбъекта);
	Иначе
		ДанныеТекущейСтроки.ИдентификаторСсылки = Неопределено;
	КонецЕсли;
	
	ИдентификаторСсылкиПриИзмененииНаСервере(ИдентификаторСтроки);	
	
КонецПроцедуры

&НаСервере
Процедура ИдентификаторPostgreSQLПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.ОбъектыИИдентификаторы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ИдентификаторPostgreSQL) Тогда
		ПодготовленныйИдентификатор = СтрЗаменить(ДанныеТекущейСтроки.ИдентификаторPostgreSQL, "'", "");
		ПодготовленныйИдентификатор = СтрЗаменить(ПодготовленныйИдентификатор, "\x", "");
		УникальныйИдентификаторОбъекта = ПреобразоватьСлужебныйИдентификатор(ПодготовленныйИдентификатор);
		ДанныеТекущейСтроки.ИдентификаторСсылки = Строка(УникальныйИдентификаторОбъекта);
	Иначе
		ДанныеТекущейСтроки.ИдентификаторСсылки = Неопределено;
	КонецЕсли;
	
	ИдентификаторСсылкиПриИзмененииНаСервере(ИдентификаторСтроки);	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьПоСсылкеНаОбъект(СсылкаНаОбъект)
	
	РезультатПоиска = Объект.ОбъектыИИдентификаторы.НайтиСтроки(Новый Структура("СсылкаНаОбъект", СсылкаНаОбъект));
	Если РезультатПоиска.Количество() = 0 Тогда
		
		НоваяЗапись = Объект.ОбъектыИИдентификаторы.Добавить();
		НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
		
		ИдентификаторЗаписи = НоваяЗапись.ПолучитьИдентификатор();
		
		СсылкаНаОбъектПриИзмененииНаСервере(ИдентификаторЗаписи);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПредставлениеБитойСсылкиПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.ОбъектыИИдентификаторы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ПредставлениеБитойСсылки) Тогда
		
		ИнформацияОСсылке = ИнформацияПоСлужебномуПредставлениюСсылки(ДанныеТекущейСтроки.ПредставлениеБитойСсылки);
		ДанныеТекущейСтроки.ИдентификаторСсылки = ИнформацияОСсылке.ИдентификаторЗначения;
		ДанныеТекущейСтроки.ЧисловойИдентификаторТипа = ИнформацияОСсылке.ЧисловойИдентификаторТипа;
					
	Иначе
		
		ДанныеТекущейСтроки.ИдентификаторСсылки = Неопределено;
		
	КонецЕсли;
	
	ИдентификаторСсылкиПриИзмененииНаСервере(ИдентификаторСтроки);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияПоСлужебномуПредставлениюСсылки(Знач ПредставлениеБитойСсылки)
	
	ИнформацияОСсылке = Новый Структура;
	ИнформацияОСсылке.Вставить("ИдентификаторЗначения", Неопределено);
	ИнформацияОСсылке.Вставить("ЧисловойИдентификаторТипа", Неопределено);
	
	НачалоДанных = Найти(ПредставлениеБитойСсылки, "(");
	КонецДанных = Найти(ПредставлениеБитойСсылки, ")");
	ЗначащиеДанныеСсылки = Сред(ПредставлениеБитойСсылки, НачалоДанных + 1,  КонецДанных - НачалоДанных - 1);
	ЧастиИдентификатораСсылки = РазложитьСтрокуВМассивПодстрок(ЗначащиеДанныеСсылки, ":");
	Если ЧастиИдентификатораСсылки.Количество() = 2 Тогда
		
		ЧисловойИдентификаторТипа = ПреобразоватьКЧислу(ЧастиИдентификатораСсылки.Получить(0));
		ИнформацияОСсылке.ЧисловойИдентификаторТипа = ЧисловойИдентификаторТипа;
		
		ИдентификаторЗначения = ЧастиИдентификатораСсылки.Получить(1);		
		Если ЭтоУникальныйИдентификатор(ИдентификаторЗначения) Тогда
			ИнформацияОСсылке.ИдентификаторЗначения = ИдентификаторЗначения;
		Иначе
			ИдентификаторЗначения = ПреобразоватьСлужебныйИдентификатор(ИдентификаторЗначения);
			Если ЭтоУникальныйИдентификатор(ИдентификаторЗначения) Тогда
				ИнформацияОСсылке.ИдентификаторЗначения	= ИдентификаторЗначения;
			Иначе			
				ИнформацияОСсылке.ИдентификаторЗначения = Неопределено;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ИнформацияОСсылке;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьСлужебныйИдентификатор(Знач ИсходныйИдентификатор)
	
	УникальныйИдентификаторСтрокой = Сред(ИсходныйИдентификатор, 25, 8) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 21, 4) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 17, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 1, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 5, 12);	
		
	Если ЭтоУникальныйИдентификатор(УникальныйИдентификаторСтрокой) Тогда
		Возврат Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУникальныйИдентификатор(Знач УникальныйИдентификаторСтрокой)
	
	РезультатПроверки = Неопределено;
	
	Попытка
		ПроверочныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
		РезультатПроверки = Истина;
	Исключение
		РезультатПроверки = Ложь;
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОбъектыПоУникальномуИдентификатору(Знач УникальныйИдентификаторОбъекта)
	
	УникальныйИдентификаторОбъектаСтрока = Строка(УникальныйИдентификаторОбъекта);
	
	НайденныеОбъекты = Новый Массив;
	
	МассивСсылочныхМетаданных = Новый Массив;
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыОбмена);
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыСчетов);
	МассивСсылочныхМетаданных.Добавить(Метаданные.Документы);
	МассивСсылочныхМетаданных.Добавить(Метаданные.Справочники);
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	МассивСсылочныхМетаданных.Добавить(Метаданные.БизнесПроцессы);
	МассивСсылочныхМетаданных.Добавить(Метаданные.Задачи);	

	Для Каждого СсылочныеМетаданные Из МассивСсылочныхМетаданных Цикл
		
		Для Каждого ОбъектМетаданные Из СсылочныеМетаданные Цикл
			
			ПолноеИмяОбъекта = ОбъектМетаданные.ПолноеИмя();
			МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
			
			СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(УникальныйИдентификаторОбъекта);
			
			Если СсылкаСуществует(СсылкаНаОбъект, ПолноеИмяОбъекта) Тогда
				НайденныеОбъекты.Добавить(СсылкаНаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОбъектМетаданныхПеречисление Из Метаданные.Перечисления Цикл
		
		МенеджерПеречисления = Перечисления[ОбъектМетаданныхПеречисление.Имя];
		
		Для Каждого ЗначениеПеречисления Из ОбъектМетаданныхПеречисление.ЗначенияПеречисления Цикл
			
			СсылкаНаПеречисление = МенеджерПеречисления[ЗначениеПеречисления.Имя];	
			ИнформацияОСсылке = РасширеннаяИнформацияОСсылке(СсылкаНаПеречисление);
			
			Если ИнформацияОСсылке.ИдентификаторОбъекта = УникальныйИдентификаторОбъектаСтрока Тогда
				НайденныеОбъекты.Добавить(СсылкаНаПеречисление);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаСуществует(ЛюбаяСсылка, ПолноеИмяТипа)
	
    ТекстЗапроса = "
        |ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    Справочник.ИмяСправочника КАК Таблица
        |ГДЕ
        |    Ссылка = &Ссылка
        |";
			
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"Справочник.ИмяСправочника",
		ПолноеИмяТипа);
	
    Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
    
    УстановитьПривилегированныйРежим(Истина);
    
    Возврат НЕ Запрос.Выполнить().Пустой();
    
КонецФункции

&НаСервереБезКонтекста
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = _СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
				
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
	КонецЕсли;
			
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция _СтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина)
	
	РезультатирующийМассив = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если ВключатьПустые = Ложь
			И НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатирующийМассив.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат РезультатирующийМассив;
	
КонецФункции

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат;
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = _СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = _СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = _СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит первое вхождение искомой строки как подстроки в исходной строке. 
// Сравнение выполняется с учетом регистра.
//
// Параметры:
//  Строка				 - Строка	 - Исходная строка.
//  СтрокаПоиска		 - Строка	 - Искомая строка.
//  НаправлениеПоиска	 - Строка	 - Указывает направление поиска подстроки в строке. 
// 									   Возможные варианты: "СНачала" и "СКонца".
//  НачальнаяПозиция	 - Число	 - Указывает позицию в строке, с которой начинается поиск.
//  НомерВхождения		 - Число	 - Указывает номер вхождения искомой строки в исходной строке.
// 
// Возвращаемое значение:
//  Число - Позиция первого знака найденной подстроки. Если строка не содержит указанной подстроки, то возращается 0.
//
&НаКлиентеНаСервереБезКонтекста
Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоиска = "СНачала", Знач НачальнаяПозиция = 1
	, Знач НомерВхождения = 1)
	
	ДлинаСтроки = СтрДлина(Строка);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	Если НачальнаяПозиция = 0
		Или НомерВхождения = 0
		Или ДлинаСтроки < НачальнаяПозиция	
		Или (НаправлениеПоиска <> "СНачала" И НаправлениеПоиска <> "СКонца") Тогда
		
		Возврат 0;	
	КонецЕсли; 
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Строка = СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		ОставшаясяЧастьСтроки = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		ОставшаясяЧастьСтроки = Прав(Строка, ДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(ОставшаясяЧастьСтроки, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерТекущегоВхождения = 0;
	Пока НомерТекущегоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(ОставшаясяЧастьСтроки, СтрокаПоиска);
		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки + СтрДлина(Лев(ОставшаясяЧастьСтроки, ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		ОставшаясяЧастьСтроки = Прав(ОставшаясяЧастьСтроки, СтрДлина(ОставшаясяЧастьСтроки) - (ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		НомерТекущегоВхождения = НомерТекущегоВхождения + 1;
		
	КонецЦикла;	
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Возврат ДлинаСтроки - ДлинаПройденнойЧастиСтроки + ДлинаСтрокиПоиска;
	Иначе	
		Возврат ДлинаПройденнойЧастиСтроки + 1 - ДлинаСтрокиПоиска;
	КонецЕсли;
	
КонецФункции

// Возвращает строку, написанную задом наперед.
//
// Параметры:
//  Строка	 - Строка - Текст для обработка.
// 
// Возвращаемое значение:
//  Строка - Строка развернутая задом наперед.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЗадомНаперед(Знач Строка)
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьКЧислу(Знач ИсходноеЗначение)
	
	Попытка
		Возврат Число(ИсходноеЗначение);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьДесятичноеЧислоВШестнадцатеричное(Знач ИсходноеЧисловоеЗначение)
	
	БазаРасчета = 16;
	СтрокаДоступныхЗначений = "0123456789ABCDEF";
	РезультатПреобразования = "";	
	
	Пока ИсходноеЧисловоеЗначение <> 0 Цикл
		
		ЗначениеПозиции = ИсходноеЧисловоеЗначение % БазаРасчета;
		РезультатПреобразования = Сред(СтрокаДоступныхЗначений, ЗначениеПозиции + 1, 1) + РезультатПреобразования;	
		ИсходноеЧисловоеЗначение = Цел(ИсходноеЧисловоеЗначение / БазаРасчета);		
		
	КонецЦикла;      

    Возврат РезультатПреобразования;
      
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИдентификаторТипаSQLServer(ДанныеТекущейСтроки)

	ИдентификаторТипаHEX = ПреобразоватьДесятичноеЧислоВШестнадцатеричное(ДанныеТекущейСтроки.ЧисловойИдентификаторТипа);
	ДанныеТекущейСтроки.ИдентификаторТипаSQLServer = "0x" + Прав("00000000" + ИдентификаторТипаHEX, 8);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИдентификаторТипаPostgreSQL(ДанныеТекущейСтроки)

	ИдентификаторТипаHEX = ПреобразоватьДесятичноеЧислоВШестнадцатеричное(ДанныеТекущейСтроки.ЧисловойИдентификаторТипа);
	ДанныеТекущейСтроки.ИдентификаторТипаPostgreSQL = "'\x" + Прав("00000000" + ИдентификаторТипаHEX, 8) + "'";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДатаСозданияСсылки(ИсходнаяСсылка)
	
	Если НЕ ЗначениеЗаполнено(ИсходнаяСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	ДатаСозданияСсылки = Дата(1, 1, 1);
	Попытка
		
        УникальныйИдентификаторСтрокой = Строка(ИсходнаяСсылка.УникальныйИдентификатор());
        УникальныйИдентификаторСтрокой = ВРег(СтрЗаменить(УникальныйИдентификаторСтрокой,"-",""));
		
		Если Сред(УникальныйИдентификаторСтрокой, 13, 1) = "1" Тогда
			
            Значение16 = ВРег(Сред(УникальныйИдентификаторСтрокой, 14, 3) 
				+ Сред(УникальныйИдентификаторСтрокой, 9, 4) 
				+ Сред(УникальныйИдентификаторСтрокой, 1, 8));
				
            Цифры16    = "123456789ABCDEF";
            Значение10 = 0;
            Длина16    = СтрДлина(Значение16);
			
			Для НомерСимвола = 1 По Длина16 Цикл
                Значение10 = Значение10 
					+ Pow(16, Длина16-НомерСимвола) 
					* Найти(Цифры16, Сред(Значение16, НомерСимвола, 1));
			КонецЦикла;
			
            Значение10 = Значение10/10000000;
            ДатаСозданияСсылки     = Дата(1582, 10, 15, 3, 0, 0) + Значение10;
			
		КонецЕсли;
		
	Исключение
		ДатаСозданияСсылки = Неопределено;
    КонецПопытки;
	
	Возврат ДатаСозданияСсылки;
		
КонецФункции

#КонецОбласти
