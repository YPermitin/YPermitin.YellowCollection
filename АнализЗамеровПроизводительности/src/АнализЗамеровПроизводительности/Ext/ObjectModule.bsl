
#Область СведенияОВнешнемОтчете

// Обязательная функция - содержит параметры работы с обработкой  
// 
Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	
	//       * Наименование - Строка - Необязательный. Представление для администратора (наименование элемента справочника). 
	//           Если не заполнено, то берется представление объекта метаданных внешнего объекта. 
	РегистрационныеДанные.Вставить("Наименование", "АнализЗамеровПроизводительности");
	
	//       * БезопасныйРежим - Булево - Необязательный. Признак подключения внешней обработки в безопасном режиме. 
	//           Значение по умолчанию Истина (обработка будет выполняться безопасно). 
	//           Подробнее - см. разделы справки "ВнешниеОтчетыМенеджер.Подключить" и "ВнешниеОбработкиМенеджер.Подключить". 
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	
	//       * Версия - Строка - Версия объекта. 
	//           Задается в формате: "<Старший номер>.<Младший номер>". 
	РегистрационныеДанные.Вставить("Версия", "1.0");
	
	//       * ВерсияБСП - Строка - Необязательный. Версия библиотеки, на которую рассчитывают механизмы внешнего объекта. 
	//           Подробнее - см. СтандартныеПодсистемыСервер.ВерсияБиблиотеки(). 
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	
	//       * Вид - Строка - Вид внешнего объекта. Соответствует реквизиту "Вид" (ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок). 
	//           Для определения вида можно использовать функции "Вид*" общего модуля ДополнительныеОтчетыИОбработкиКлиентСервер, 
	//           или указать вид явно: 
	//           ** "ПечатнаяФорма" 
	//           ** "ЗаполнениеОбъекта" 
	//           ** "СозданиеСвязанныхОбъектов" 
	//           ** "Отчет" 
	//           ** "ДополнительнаяОбработка" 
	//           ** "ДополнительныйОтчет" 
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	
	//       * Информация - Строка - Необязательный. Краткая информация по внешнему объекту. 
	//           В этом параметре для администратора рекомендуется указать описание возможностей внешнего объекта. 
	//           Если не заполнено, то берется комментарий объекта метаданных внешнего объекта.  
	РегистрационныеДанные.Вставить("Информация", 
		"Отчет для анализа замеров производительности, выполненных с помощью подсистемы ""Оценка производительности"" 
		|из Библиотеки стандартных подсистем.");
	
	// Назначение 
	МассивНазначенийОбработки = ПолучитьНазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	// Команды 
	ТаблицаКомандОбработки = ПолучитьТаблицуКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	// Результат функции 
	Возврат РегистрационныеДанные;
	
КонецФункции

// Служебная функция обработки Экспорт - не обязательно  
// 
Функция ПолучитьНазначениеОбработки() Экспорт 
	
	// Инициализация массива 
	МассивНазначенийОбработки = Новый Массив;
	
	// Заполняем массив 
	//МассивНазначенийОбработки.Добавить("Справочник.Организации"); 
	
	/////////////////////////////////////////////////////////////////////////////// 
	//// При добавлении объекта в массив назначений следует убедиться, что в 
	//// его формах (в основном объекта и списка) прописан код по использованию 
	//// подсистемы дополнительных обработок 
	////  
	//// Например, в форме объекта в процедуре "ПриСозданииНаСервере" прописать: 
	//// ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма); 
	//// *текст кода может меняться в зависимости от версии БСП 
	
	// Результат функции 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

// Служебная функция обработки Экспорт - не обязательно  
// 
Функция ПолучитьТаблицуКомандОбработки() Экспорт 
	
	// Инициализация таблицы 
	// Состав может меняться в зависимости от версии БСП 
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка")); // Это может быть любая текстовая строка, уникальная в пределах данной обработки 
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка")); // Представление команды в пользовательском интерфейсе 
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево")); // Надо показывать оповещение или нет 
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка")); // Дополнительный модификатор команды 
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка")); // Вирант использования команды (см. ниже) 
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево")); // Серверная команда, которая вызывается из формы внешней обработки. 
	
	// Колонки ВариантЗапуска и Использование можно и желательно использовать по одиночке 
	// В случае указания обеих их значения должны совпадать 
	
	// Варианты для значения колонки "Использование": 
	//  ОткрытиеФормы – просто открывает форму обработки. 
	//  ВызовКлиентскогоМетода – будет вызвана клиентская процедура из модуля формы обработки (Печать или ВыполнитьКоманду). 
	//  ВызовСерверногоМетода  - будет вызвана серверная процедура из модуля обработки (Печать или ВыполнитьКоманду). 
	//  СценарийВБезопасномРежиме – тоже будет вызвана серверная процедура из модуля обработки в безопасном режиме (исп. с определнной версии БСП). 
	
	ДобавитьКоманду(тзКоманд, "АнализЗамеровПроизводительности", "Анализ замеров производительности", Ложь, "ОткрытиеФормы", "", Ложь);
	
	// Следует обратить внимание на значение колонки "Модификатор" - в зависимости от значения 
	// меняется принцип формирования процедуры "Печать" для внешней печатной формы 
	// Принципы использования данного параметра описаны ниже в модуле 
	
	// Результат функции 
	Возврат тзКоманд;
	
КонецФункции

// Добавление команды в таблицу команд 
// 
Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	// Основная команда обработки 
	строкаКоманды = ТаблицаКоманд.Добавить();
	//           ** Идентификатор - Строка - Имя команды. Для печатной формы - список макетов. 
	строкаКоманды.Идентификатор = Идентификатор;
	//           ** Представление - Строка - Представление команды для конечного пользователя. 
	строкаКоманды.Представление = Представление;
	//           ** ПоказыватьОповещение - Булево - Истина = при запуске команды будет показано стандартное оповещение. 
	//               Не работает для команд "ОткрытиеФормы". 
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	//           ** Использование - Строка - Тип команды. Соответствует реквизиту "ВариантЗапуска" (ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок). 
	//               *** "ВызовКлиентскогоМетода" 
	//               *** "ВызовСерверногоМетода" 
	//               *** "ЗаполнениеФормы" 
	//               *** "ОткрытиеФормы" 
	//               *** "СценарийВБезопасномРежиме" 
	строкаКоманды.Использование = Использование;
	//           ** Модификатор - Строка - Вспомогательный модификатор команды. 
	//               *** "ПечатьMXL" для печатных форм на основе макетов MXL. 
	строкаКоманды.Модификатор = Модификатор;
	//           ** Скрыть - Булево - Истина если команду необходимо скрывать в форме элемента. 
	строкаКоманды.Скрыть = Скрыть;
	//       * Разрешения - Массив из ОбъектXDTO {http://www.1c.ru/1cFresh/ApplicationExtensions/Permissions/a.b.c.d}PermissionBase - 
	//           Необязательный. Массив разрешений, предоставленных дополнительному отчету или обработке при работе в безопасном 
	//           режиме. 
	//строкаКоманды.Разрешения ... 
	
КонецПроцедуры

// Обязательная процедура внешней обработки  
// 
// В зависимости от типа обработки может содержать разные параметры 
// Но обязательным всегда есть ИдентификаторКоманды 
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ИмяРегистраТехнологическихЗамеров = "РегистрСведений.ЗамерыВремениТехнологические";
	Если НЕ Метаданные.НайтиПоПолномуИмени(ИмяРегистраТехнологическихЗамеров) = Неопределено Тогда		
		ЗапросИсточника = СхемаКомпоновкиДанных.НаборыДанных.ЗамерыПроизводительности.Запрос;	
		СхемаЗапросаИсточника = Новый СхемаЗапроса;
		СхемаЗапросаИсточника.УстановитьТекстЗапроса(ЗапросИсточника);
		ОператорыЗапросаИсточника = СхемаЗапросаИсточника.ПакетЗапросов.Получить(0).Операторы;
		ИсточникТехнологическихЗамеров = ОператорыЗапросаИсточника.Добавить(ОператорыЗапросаИсточника.Получить(0));
		ИсточникТехнологическихЗамеров.ВыбираемыеПоля.Установить(17, Новый ВыражениеСхемыЗапроса("ИСТИНА"));
		ДоступныйИсточникТехнологическихЗамеров = СхемаЗапросаИсточника.ПакетЗапросов[0].ДоступныеТаблицы[7].Состав.Найти(ИмяРегистраТехнологическихЗамеров);
		ИсточникТехнологическихЗамеров.Источники.Заменить(0, ДоступныйИсточникТехнологическихЗамеров);
		СхемаКомпоновкиДанных.НаборыДанных.ЗамерыПроизводительности.Запрос = СхемаЗапросаИсточника.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();         
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;          
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;          
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий();
	Пока ЭлементРезультатКомпоновки <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатКомпоновки);
		ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();	
	
КонецПроцедуры

#КонецОбласти