
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыполнитьИнициализацию();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОформлениеФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СредаВыполненияПриИзменении(Элемент)
	
	РезультатВыполненияСкриптаОформленный.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(""));
	
	УстановитьОформлениеФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьКомандуСкриптаНаКлиенте(Команда)
	
	Если Объект.ОчищатьРезультат Тогда
		
		РезультатВыполненияСкриптаОформленный.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(""));
		
	КонецЕсли;
	
	Если Объект.Контекст = КонтекстНаКлиенте() Тогда
		
		ВыполнитьКомандуСкриптаНаФорме(ЭтаФорма);	
			
	ИначеЕсли Объект.Контекст = КонтекстНаСервере() Тогда
		
		ВыполнитьКомандуСкриптаНаСервере();
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Командный интерпретатор """ + Объект.СредаВыполнения + """ неизвестен.'");
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьИнициализацию()
	
	ДоступныеСредыВыполнения = ДоступныеСредыВыполнения();
	
	Элементы.Контекст.СписокВыбора.Добавить(КонтекстНаКлиенте());
	Элементы.Контекст.СписокВыбора.Добавить(КонтекстНаСервере());
	Объект.Контекст = КонтекстНаСервере();
	
	Объект.СредаВыполнения = ДоступныеСредыВыполнения.Получить(0);
	
	ДоступныеСредыВыполнения = ДоступныеСредыВыполнения();
	Элементы.СредаВыполнения.СписокВыбора.ЗагрузитьЗначения(ДоступныеСредыВыполнения);
	
	Объект.ТаймаутВыполненияКомандыСек = 60;
	
	УстановитьОформлениеФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуСкриптаНаСервере()
	
	ВыполнитьКомандуСкриптаНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеФормы(ЭтаФорма)
	
	НастройкиОформления = ОформлениеВывода(ЭтаФорма.Объект.СредаВыполнения);
	
	ЭтаФорма.Элементы.РезультатВыполненияСкриптаОформленный.ЦветФона = НастройкиОформления.ЦветФона;
	ЭтаФорма.Элементы.РезультатВыполненияСкриптаОформленный.ЦветТекста = НастройкиОформления.ЦветТекстаОбычный;
	
	ЭтаФорма.Элементы.ТекстКоманды.ЦветФона = НастройкиОформления.ЦветФона;
	ЭтаФорма.Элементы.ТекстКоманды.ЦветТекста = НастройкиОформления.ЦветТекстаОбычный;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьКомандуСкрипта(Знач СредаВыполнения, Знач ТекстСкрипта, Знач ТаймаутВыполненияКомандыСек = 60)
	
	РезультатВыполненияСкрипта = Новый Структура;
	РезультатВыполненияСкрипта.Вставить("Вывод", "");
	РезультатВыполненияСкрипта.Вставить("Ошибки", "");
	
	ТекстСкриптаДляВыполнения = "";
	ВременныйФайлСкрипта = "";
	ВременныйФайлРезультат = "";
	
	Если СредаВыполнения = ИсполняемаяСредаCMD() Тогда
		
		ВременныйФайлСкрипта = ПолучитьИмяВременногоФайла("bat");
		
		ЗаписьТекстаСкрипта = Новый ТекстовыйДокумент;
		ЗаписьТекстаСкрипта.УстановитьТекст(ТекстСкрипта);
		ЗаписьТекстаСкрипта.Записать(ВременныйФайлСкрипта, "cp866");		
		
		ТекстСкриптаДляВыполнения = ВременныйФайлСкрипта;
		
	ИначеЕсли СредаВыполнения = ИсполняемаяСредаPowerShell() Тогда
		
		ПутьКПриложению = ПутьКИсполняемомуФайлуPowerShell();
		ВременныйФайлСкрипта = ПолучитьИмяВременногоФайла("bat");
		ВременныйФайлСкриптаPowerShell = ПолучитьИмяВременногоФайла("ps1");
		ВременныйФайлРезультат = ПолучитьИмяВременногоФайла("log");
		
		ТекстСкриптаДляВыполнения = ПутьКПриложению +
			" -executionpolicy bypass -File """ + ВременныйФайлСкриптаPowerShell + """  > """ + ВременныйФайлРезультат + """";       
		
		ТекстСкриптаPowerShell = ТекстСкрипта;
		
		ЗаписьТекстаСкриптаPowerShell = Новый ТекстовыйДокумент;
		ЗаписьТекстаСкриптаPowerShell.УстановитьТекст(ТекстСкриптаPowerShell);
		ЗаписьТекстаСкриптаPowerShell.Записать(ВременныйФайлСкриптаPowerShell, КодировкаТекста.UTF8);
		
		ЗаписатьФайлВформатеUTF8безBOM(ТекстСкриптаДляВыполнения, ВременныйФайлСкрипта);
		
		ТекстСкриптаДляВыполнения = ВременныйФайлСкрипта;
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Командный интерпретатор """ + СредаВыполнения + """ неизвестен.'");
		
	КонецЕсли;
	
	НачалоВыполненияКоманды = ТекущаяДата();
	ЗавершениеВыполненияКоманды = НачалоВыполненияКоманды + ТаймаутВыполненияКомандыСек;
	
	Попытка
		
		objShell = Новый COMОбъект("WScript.Shell");
		
	Исключение
		
		ВызватьИсключение 
			"Не удалось инициализировать WScript.Shell.
			|Подробнее:
			|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	objWshScriptExec = objShell.Exec(ТекстСкриптаДляВыполнения);
	objStdOut = objWshScriptExec.StdOut;
	objStdErr = objWshScriptExec.StdErr;
	
	КомандаЗавершенаПоТаймауту = Ложь;
	Пока objWshScriptExec.Status = 0 Цикл
		
		Если ЗначениеЗаполнено(ТаймаутВыполненияКомандыСек) Тогда
			
			Если ЗавершениеВыполненияКоманды <= ТекущаяДата() Тогда
			
				КомандаЗавершенаПоТаймауту = Истина;
			
				Прервать;
				
			КонецЕсли;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ КомандаЗавершенаПоТаймауту Тогда
		
		Если СредаВыполнения = ИсполняемаяСредаPowerShell() Тогда
				
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВременныйФайлРезультат);
			РезультатВыполненияСкрипта.Вывод = РезультатВыполненияСкрипта.Вывод
				+ ТекстовыйДокумент.ПолучитьТекст();
			
		ИначеЕсли СредаВыполнения = ИсполняемаяСредаCMD() Тогда
			
			Пока Не objStdOut.AtEndOfStream Цикл
				
				strLine = objStdOut.ReadLine();
				РезультатВыполненияСкрипта.Вывод = РезультатВыполненияСкрипта.Вывод 
					+ strLine 
					+ Символы.ВК 
					+ Символы.ПС;
				
				Если ЗначениеЗаполнено(ТаймаутВыполненияКомандыСек)
					И ЗавершениеВыполненияКоманды <= ТекущаяДата() Тогда
					
					КомандаЗавершенаПоТаймауту = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ КомандаЗавершенаПоТаймауту Тогда
	
		Пока Не objStdErr.AtEndOfStream Цикл
			
			strLine = objStdErr.ReadLine();
			РезультатВыполненияСкрипта.Ошибки = РезультатВыполненияСкрипта.Ошибки
				+ strLine 
				+ Символы.ВК 
				+ Символы.ПС;
			
			Если ЗначениеЗаполнено(ТаймаутВыполненияКомандыСек)
				И ЗавершениеВыполненияКоманды <= ТекущаяДата() Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		
		objWshScriptExec.Terminate();
		objWshScriptExec = Неопределено;
		
	Исключение
		
		objWshScriptExec = Неопределено;
		
	КонецПопытки;
	
	objShell = Неопределено;
	
	Если КомандаЗавершенаПоТаймауту Тогда
		
		РезультатВыполненияСкрипта.Ошибки = "Внимание! Выполнение остановлено по истечении времени ожидания.";
		
	Иначе
		
		УдалитьФайлЕслиВозможно(ВременныйФайлСкрипта);
		
		РезультатВыполненияСкрипта.Вывод = ПреобразоватьКодировку(РезультатВыполненияСкрипта.Вывод);
		РезультатВыполненияСкрипта.Ошибки = ПреобразоватьКодировку(РезультатВыполненияСкрипта.Ошибки);
		
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(РезультатВыполненияСкрипта);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеСредыВыполнения()
	
	МассивСредВыполнения = Новый Массив;
	МассивСредВыполнения.Добавить(ИсполняемаяСредаCMD());
	МассивСредВыполнения.Добавить(ИсполняемаяСредаPowerShell());
	
	Возврат МассивСредВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИсполняемаяСредаCMD()
	
	Возврат "CMD";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИсполняемаяСредаPowerShell()
	
	Возврат "PowerShell";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПутьКИсполняемомуФайлуPowerShell()
	
	Возврат "%SystemRoot%\System32\WindowsPowerShell\v1.0\PowerShell.exe";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПутьКИсполняемомуФайлуCMD()
	
	Возврат "%SystemRoot%\System32\cmd.exe";
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьФайлЕслиВозможно(ПутьКФайлу)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Попытка
		
		УдалитьФайлы(ПутьКФайлу);
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтекстНаКлиенте()
	
	Возврат "На клиенте";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтекстНаСервере()
	
	Возврат "На сервере";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьКодировку(Текст, ИсходнаяКодировка = "windows-1251", НоваяКодировка = "cp866")
	
	ВременныйФайлИсходный = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекстаИсходный = Новый ТекстовыйДокумент;
	ЗаписьТекстаИсходный.УстановитьТекст(Текст);
	ЗаписьТекстаИсходный.Записать(ВременныйФайлИсходный, ИсходнаяКодировка);
	
	ЧтениеТекстаНовый = Новый ТекстовыйДокумент;
	ЧтениеТекстаНовый.Прочитать(ВременныйФайлИсходный, НоваяКодировка); 
	КонвертированныйТекст = ЧтениеТекстаНовый.ПолучитьТекст();
	
	УдалитьФайлЕслиВозможно(ВременныйФайлИсходный);
	
	Возврат КонвертированныйТекст;	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОформлениеВывода(СредаВыполнения)
	
	НастройкиОформление = Новый Структура;
	
	Если СредаВыполнения = ИсполняемаяСредаCMD() Тогда
		
		НастройкиОформление.Вставить("ЦветФона", Новый Цвет(12, 12, 12));
		НастройкиОформление.Вставить("ЦветТекстаОбычный", Новый Цвет(204, 204, 204));
		НастройкиОформление.Вставить("ЦветТекстаОшибки", Новый Цвет(204, 204, 204));
		
	ИначеЕсли СредаВыполнения = ИсполняемаяСредаPowerShell() Тогда
		
		НастройкиОформление.Вставить("ЦветФона", Новый Цвет(1, 36, 86));		
		НастройкиОформление.Вставить("ЦветТекстаОбычный", Новый Цвет(238, 237, 240));
		НастройкиОформление.Вставить("ЦветТекстаОшибки", Новый Цвет(255, 0, 0));
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Командный интерпретатор """ + СредаВыполнения + """ неизвестен.'");
		
	КонецЕсли;
	
	Возврат НастройкиОформление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьКомандуСкриптаНаФорме(ЭтаФорма)
	
	Объект = ЭтаФорма.Объект;
	РезультатВыполненияСкриптаОформленный = ЭтаФорма.РезультатВыполненияСкриптаОформленный;
	
	РезультатВыполнения = ВыполнитьКомандуСкрипта(Объект.СредаВыполнения, Объект.ТекстКоманды, Объект.ТаймаутВыполненияКомандыСек);
		
	НастройкиОформления = ОформлениеВывода(Объект.СредаВыполнения);
	ИсходнаяФорматированнаяСтрока = Новый ФорматированнаяСтрока(РезультатВыполненияСкриптаОформленный.ПолучитьФорматированнуюСтроку());
	
	МассивСтрокФорматирования = Новый Массив;
	МассивСтрокФорматирования.Добавить(ИсходнаяФорматированнаяСтрока);
	
	Если ЗначениеЗаполнено(РезультатВыполнения.Вывод) Тогда
	
		МассивСтрокФорматирования.Добавить(Символы.ПС);
		
		МассивСтрокВывод = _СтрРазделить(РезультатВыполнения.Вывод, Символы.ПС, Истина);
		Для Каждого СтрокаВывода Из МассивСтрокВывод Цикл
			
			МассивСтрокФорматирования.Добавить(Новый ФорматированнаяСтрока(СтрокаВывода + Символы.ПС,, НастройкиОформления.ЦветТекстаОбычный));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыполнения.Ошибки) Тогда
		
		МассивСтрокФорматирования.Добавить(Символы.ПС);
		
		МассивСтрокОшибки = _СтрРазделить(РезультатВыполнения.Ошибки, Символы.ПС, Истина);
		Для Каждого СтрокаОшибки Из МассивСтрокОшибки Цикл
			
			МассивСтрокФорматирования.Добавить(Новый ФорматированнаяСтрока(СтрокаОшибки,, НастройкиОформления.ЦветТекстаОшибки));
			
		КонецЦикла;			
					
	КонецЕсли;
	
	РезультатВыполненияСкриптаОформленный.УстановитьФорматированнуюСтроку(
		Новый ФорматированнаяСтрока(МассивСтрокФорматирования));	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
функция ЗаписатьФайлВформатеUTF8безBOM(текст,полноеИмяФайла)

    // записываем в файл с символами BOM в начале файле	
    ТекстовыйФайлUTF8_Bom = Новый ТекстовыйДокумент();
    ТекстовыйФайлUTF8_Bom.ДобавитьСтроку(текст);
    ТекстовыйФайлUTF8_Bom.Записать(полноеИмяФайла,"UTF-8");
	
    // открываем файл и считываем символы после символов BOM
    Данные = Новый ДвоичныеДанные(полноеИмяФайла);
    Строка64=Base64Строка(Данные);
    Строка64=Прав(Строка64,СтрДлина(Строка64)-4);
    ДанныеНаЗапись=Base64Значение(Строка64);
    ДанныеНаЗапись.Записать(полноеИмяФайла); // записываем
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция _СтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина)
	
	РезультатирующийМассив = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если ВключатьПустые = Ложь
			И НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатирующийМассив.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат РезультатирующийМассив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = _СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = _СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = _СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоиска = "СНачала", Знач НачальнаяПозиция = 1
	, Знач НомерВхождения = 1) Экспорт
	
	ДлинаСтроки = СтрДлина(Строка);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	Если НачальнаяПозиция = 0
		Или НомерВхождения = 0
		Или ДлинаСтроки < НачальнаяПозиция	
		Или (НаправлениеПоиска <> "СНачала" И НаправлениеПоиска <> "СКонца") Тогда
		
		Возврат 0;	
	КонецЕсли; 
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Строка = _СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = _СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		ОставшаясяЧастьСтроки = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		ОставшаясяЧастьСтроки = Прав(Строка, ДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(ОставшаясяЧастьСтроки, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерТекущегоВхождения = 0;
	Пока НомерТекущегоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(ОставшаясяЧастьСтроки, СтрокаПоиска);
		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки + СтрДлина(Лев(ОставшаясяЧастьСтроки, ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		ОставшаясяЧастьСтроки = Прав(ОставшаясяЧастьСтроки, СтрДлина(ОставшаясяЧастьСтроки) - (ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		НомерТекущегоВхождения = НомерТекущегоВхождения + 1;
		
	КонецЦикла;	
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Возврат ДлинаСтроки - ДлинаПройденнойЧастиСтроки + ДлинаСтрокиПоиска;
	Иначе	
		Возврат ДлинаПройденнойЧастиСтроки + 1 - ДлинаСтрокиПоиска;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция _СтрокаЗадомНаперед(Знач Строка) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
