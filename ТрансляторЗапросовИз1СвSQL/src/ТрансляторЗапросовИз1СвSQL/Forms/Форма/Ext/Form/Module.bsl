
#Область ОписаниеПеременных

&НаСервере
Перем СоединениеБД Экспорт;

&НаСервере
Перем КомандаБД Экспорт;

&НаСервере
Перем ДополнительныеПараметрыСобытия Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	SQLServer_СкриптСессииОпределенияСессииСУБД = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_СкриптСессииОпределенияСессииСУБД")
		.ПолучитьТекст();
		
	SQLServer_2008_СкриптСессииОпределенияСессииСУБД = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_2008_СкриптСессииОпределенияСессииСУБД")
		.ПолучитьТекст();
		
	SQLServer_СкриптПолученияДанныхРасширенныхСобытий = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_СкриптПолученияДанныхРасширенныхСобытий")
		.ПолучитьТекст();
		
	SQLServer_СкриптУдаленияСессииСбораДанных = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_СкриптУдаленияСессииСбораДанных")
		.ПолучитьТекст();
	
	ПараметрыЗапросаСтрока = ХранилищеОбщихНастроек.Загрузить(
		"ТрансляторЗапросовИз1СвSQL",
		"ПараметрыЗапроса");
	
	SQLServer_СкриптСбораДанныхОЗапросах = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_СкриптСбораДанныхОЗапросах")
		.ПолучитьТекст();
		
	SQLServer_2008_СкриптСбораДанныхОЗапросах = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_2008_СкриптСбораДанныхОЗапросах")
		.ПолучитьТекст();
		
	SQLServer_СкриптОчисткиДанных = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_СкриптОчисткиДанных")
		.ПолучитьТекст();
		
	SQLServer_СкриптЧтенияПланаЗапроса = ОбъектНаСервере
		.ПолучитьМакет("SQLServer_СкриптЧтенияПланаЗапроса")
		.ПолучитьТекст();
	
	Если НЕ ПараметрыЗапросаСтрока = Неопределено Тогда
		
		ТаблицаПараметровЗапроса = ЗначениеИзСтрокиВнутр(ПараметрыЗапросаСтрока);
		
		Объект.ПараметрыЗапроса1С.Загрузить(ТаблицаПараметровЗапроса);
		
	КонецЕсли;
	
	Элементы.ТипСУБД.СписокВыбора.ЗагрузитьЗначения(Объект.СписокДоступныхСУБД.ВыгрузитьЗначения());
	Объект.ТипСУБД = ОбъектНаСервере.ТипСУБДПоУмолчанию();
	Объект.ЗапросыСКлиента = Ложь;
	Объект.Сервер = Неопределено;
	Объект.ИмяБазыДанных = Неопределено;
	Объект.ИмяПользователя = Неопределено;
	Объект.Пароль = Неопределено;
	Объект.АутентификацияNTLM = Ложь;
	Объект.СохранятьПароль = Ложь;
	Объект.ТаймаутПодключенияСекунд = 180;
	Объект.ПодавлятьСообщенияПользователю = Истина;
	Объект.ПоказатьРезультатЗапроса = Ложь;
	Объект.ВерсияСУБД = "<нет данных>";
	Объект.ИдентификаторБазыДанных = "<нет данных>";
	
	УстановитьВидимостьДоступностьНастроекПодключения();
	УстановитьВидимостьДоступностьРежимаРаботы();
	ПоказатьРезультатЗапросаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранятьПароль = Настройки.Получить("Объект.СохранятьПароль");	
	Если НЕ СохранятьПароль = Истина Тогда
		Настройки.Вставить("Объект.Пароль", Неопределено);
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить(
		"ТрансляторЗапросовИз1СвSQL",
		"ПараметрыЗапроса",
		ЗначениеВСтрокуВнутр(Объект.ПараметрыЗапроса1С.Выгрузить()));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьДоступностьНастроекПодключения();
	УстановитьВидимостьДоступностьРежимаРаботы();
	ПоказатьРезультатЗапросаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДанныеСобранныхЗапросовПоказатьПриИзменении(Элемент)
	
	ДанныеСобранныхЗапросовПоказатьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСУБДПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНастроекПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияNTLMПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНастроекПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьРежимаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатЗапросаПриИзменении(Элемент)
	
	ПоказатьРезультатЗапросаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапроса1СПриИзменении(Элемент)
	
	ОпределитьПараметрыЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаНастройки Тогда
		
		Элементы.ПроверитьПодключение.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаОсновнаяПанель1С Тогда
		
		Элементы.ВыполнитьЗапрос1С.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонструкторЗапроса1С(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторЗапроса1СПродолжение", ЭтаФорма);
	
	КонструкторЗапроса = Новый КонструкторЗапроса(Объект.ТекстЗапроса1С);
	КонструкторЗапроса.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос1С(Команда)
	
	ОчиститьСообщения();
	
	РезультатОперации = ВыполнитьЗапрос1СНаСервере();
	
	Если РезультатОперации.Успешно Тогда
	
		Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаОсновнаяПанельЗапросSQL;
		Элементы.ГруппаОсновнаяПанельЗапросSQLПанель.ТекущаяСтраница = Элементы.ГруппаОсновнаяПанельЗапросSQLПанельТекстыЗапросовSQL;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Состояние("Выполняется проверка подключения...");
			
	ПроверитьПодключениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсеЗапросы(Команда)
	
	УстановитьФлагПоказаЗапросов(Ложь);
	
	СформироватьПакетЗапросовSQL();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеЗапросы(Команда)
	
	УстановитьФлагПоказаЗапросов(Истина);
	
	СформироватьПакетЗапросовSQL();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПланЗапросаXML(Команда)
	
	ТекущиеДанные = Элементы.ДанныеСобранныхЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЕстьПланЗапроса И НЕ ЗначениеЗаполнено(ТекущиеДанные.ПланЗапросаXML) Тогда
		ПрочитатьПланЗапросаНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЕстьПланЗапроса Тогда
		СообщитьПользователю("Нет данных о плане для выбранного запроса.");
		Возврат;		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьПланЗапросаXMLПродолжение", ЭтаФорма);
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогСохраненияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'XML-план запроса'; en = 'XML query plan'")
		+ "(*.sqlplan)|*.sqlplan";
	ДиалогСохраненияФайла.Фильтр = Фильтр;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = "Сохранить план запроса";
	ДиалогСохраненияФайла.Показать(ОписаниеОповещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланЗапроса(Команда)
	
	ТекущиеДанные = Элементы.ДанныеСобранныхЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЕстьПланЗапроса И НЕ ЗначениеЗаполнено(ТекущиеДанные.ПланЗапросаXML) Тогда
		ПрочитатьПланЗапросаНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЕстьПланЗапроса Тогда
		СообщитьПользователю("Нет данных о плане для выбранного запроса.");
		Возврат;		
	КонецЕсли;
	
	ВременныйФайлСПланом = ПолучитьИмяВременногоФайла("sqlplan");	
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекущиеДанные.ПланЗапросаXML);
	ТекстовыйДокумент.Записать(ВременныйФайлСПланом, КодировкаТекста.UTF8);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапускПриложенияПродолжение", ЭтаФорма);
	
	НачатьЗапускПриложения(ОписаниеОповещения, ВременныйФайлСПланом);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыполнитьЗапрос1СНаСервере()
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	
	ДанныеСобранныхЗапросов = Объект.ДанныеСобранныхЗапросов;
	ДанныеСобранныхЗапросов.Очистить();	
	СформироватьПакетЗапросовSQL();
	
	Попытка
		
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
		КомандаБД = Новый COMОбъект("ADODB.Command"); 
		КомандаБД.ActiveConnection = СоединениеБД;
		
		// Определяем версию СУБД
		ОпределитьВерсиюСУБД(ЭтаФорма);
		// Определяем идентификатор базы данных
		ОпределитьИдентификаторБазыДанных(ЭтаФорма);
		
		// Переопределение события "ПередНачаломТрансляции"
		ДополнительныеПараметрыСобытия = Неопределено;
		Если ЗначениеЗаполнено(Объект.СобытиеПередНачаломТрансляции) Тогда			
			Выполнить(Объект.СобытиеПередНачаломТрансляции);			
		КонецЕсли;
		
		// 0. Очистка данных
		ОчисткаДанных(ЭтаФорма);
		
		// 1. Запускаем сессию для определения идентификатора текущего соединения SQL-сервер для запроса			
		ЗапуститьСессиюОпределенияИдентификатораСоединенияСУБД(ЭтаФорма);
		
		// 2. Зафиксировать менеджен временных таблиц на время анализа данных
		#Область ЗапросДляИдентификацииСоединенияПоВременнойТаблице
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
			
		ВыполнитьЗапросИдентификацииСоединения(МенеджерВТ);
		
		#КонецОбласти
		
		// 3. Определяем идентификатор соединения на SQL-сервере для запроса
		// с менеджером временных таблиц по ранее выполненному запросу
		Если ЭтоSQLServer2008(ЭтаФорма) Тогда
			Ожидать(30000);	
		КонецЕсли;
		ОпределитьИдентификаторТекущегоСоединения(ЭтаФорма);
		ЗавершитьСессиюОпределенияИдентификатораСоединения(ЭтаФорма);
		
		Если НЕ ЗначениеЗаполнено(ИдентификаторСоединения) Тогда			
			ВызватьИсключение "Не удалось определить идентификатор соединения СУБД.";			
		КонецЕсли;
		
		// 4. Запускаем сбор информации о запросах для конкретного соединения
		// на SQL-сервере
		ЗапуститьСессиюСбораДанныхОЗапросах(ЭтаФорма);
		
		// 5. Выполняем запрос 1С для анализа с тем же менеджером временных таблиц
		#Область ВыполняемЗапросИАлгоритм1С
		
		Запрос1СВыполнен = Ложь;
		Если РежимЗапрос(ЭтаФорма) И ЗначениеЗаполнено(Объект.ТекстЗапроса1С) Тогда
			
			Запрос1С = Новый Запрос;
			Запрос1С.МенеджерВременныхТаблиц = МенеджерВТ;
			Запрос1С.Текст = Объект.ТекстЗапроса1С;
			
			Для Каждого ЭлементПараметр Из Объект.ПараметрыЗапроса1С Цикл
				
				ЗначениеПараметра = Неопределено;
				
				Если ЭлементПараметр.ЗначениеВыражением Тогда
					
					Выполнить(ЭлементПараметр.ЗначениеПараметра);	
					
				Иначе
					
					ЗначениеПараметра = ЭлементПараметр.ЗначениеПараметра;
					
				КонецЕсли;
				
				Запрос1С.УстановитьПараметр(ЭлементПараметр.ИмяПараметра, ЗначениеПараметра);
				
			КонецЦикла;
			
			РезультатЗапроса1С = Запрос1С.Выполнить();
			
			Запрос1СВыполнен = Истина;
			
		КонецЕсли;
		
		Если РежимАлгоритм(ЭтаФорма) И ЗначениеЗаполнено(Объект.Алгоритм1С) Тогда
			
			Выполнить(Объект.Алгоритм1С);
			
		КонецЕсли;
		
		#КонецОбласти
		
		// 6. Заканчиваем сбор информации о запросах для конкретного соединения
		// и выводим результаты
		Если ЭтоSQLServer2008(ЭтаФорма) Тогда
			Ожидать(30000);
		КонецЕсли;
		ПрочитатьДанныеОВыполненныхЗапросов(ЭтаФорма);			
		ЗавершитьСессиюСбораДанныхОЗапросах(ЭтаФорма);
		
		// 7. Выводим результат запроса 1С
		#Область ВыводРезультатаЗапроса
		
		Если Объект.ПоказатьРезультатЗапроса
			И Запрос1СВыполнен Тогда
		
			ВыборкаЗапроса1С = РезультатЗапроса1С.Выбрать();	
			ВыгрузкаРезультатаЗапроса = РезультатЗапроса1С.Выгрузить();
			
			РезультатЗапроса1С = Объект.РезультатЗапроса1С;
			РезультатЗапроса1С.Очистить();
			
			НомерКолонки = 1;
			
			Для Каждого КолонкаРезультат Из ВыгрузкаРезультатаЗапроса.Колонки Цикл
				
				РезультатЗапроса1С.Область(1, НомерКолонки).Текст = КолонкаРезультат.Заголовок;
				
				НомерКолонки = НомерКолонки + 1;
				
			КонецЦикла;
			
			НомерСтроки = 2;
			
			Для Каждого СтрокаРезультат Из ВыгрузкаРезультатаЗапроса Цикл
				
				НомерКолонки = 1;
				
				Для Каждого КолонкаРезультат Из ВыгрузкаРезультатаЗапроса.Колонки Цикл
					
					ЗначениеКолонки = СтрокаРезультат[КолонкаРезультат.Имя];
					
					РезультатЗапроса1С.Область(НомерСтроки, НомерКолонки).Текст = Строка(ЗначениеКолонки);
					РезультатЗапроса1С.Область(НомерСтроки, НомерКолонки).СодержитЗначение = Истина;
					РезультатЗапроса1С.Область(НомерСтроки, НомерКолонки).Значение = ЗначениеКолонки;
					
					НомерКолонки = НомерКолонки + 1;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		#КонецОбласти
		
		// 8. Очистка от неиспользуемых данных и прочего
		#Область ОчисткаДанных
		
		МенеджерВТ.Закрыть();
		ОчисткаДанных(ЭтаФорма, СоединениеБД);
		
		#КонецОбласти
		
		// Переопределение события "ПослеОкончанияТрансляции"
		Если ЗначениеЗаполнено(Объект.СобытиеПослеОкончанияТрансляции) Тогда			
			Выполнить(Объект.СобытиеПослеОкончанияТрансляции);			
		КонецЕсли;
		
		Если Объект.ПодавлятьСообщенияПользователю Тогда
			ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		
		РезультатОперации.Успешно = Истина;
		
	Исключение
		
		Если НЕ МенеджерВТ = Неопределено Тогда
			МенеджерВТ.Закрыть();
		КонецЕсли;
		ОчисткаДанных(ЭтаФорма, СоединениеБД);
		
		СообщениеОбОшибке = "Произошла непредвиденная ошибка:"
			+ Символы.ПС
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщитьПользователю(СообщениеОбОшибке);
		
	КонецПопытки;
	
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат РезультатОперации;
	
КонецФункции

&НаКлиенте
Процедура КонструкторЗапроса1СПродолжение(Текст, ДополнительныеПараметры) Экспорт
	
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТекстЗапроса1С = Текст;
	
	ОпределитьПараметрыЗапроса();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыЗапроса()
	
	Попытка
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Объект.ТекстЗапроса1С);		
		ПараметрыЗапроса = СхемаЗапроса.НайтиПараметры();
		
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл					
			ПоискПараметра = Объект.ПараметрыЗапроса1С.НайтиСтроки(Новый Структура("ИмяПараметра", ПараметрЗапроса.Имя));
			Если ПоискПараметра.Количество() = 0 Тогда				
				СтрокаПараметр = Объект.ПараметрыЗапроса1С.Добавить();
				СтрокаПараметр.ИмяПараметра = ПараметрЗапроса.Имя;
				СтрокаПараметр.ЗначениеВыражением = Ложь;
				СтрокаПараметр.ЗначениеПараметра = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(Неопределено);				
			КонецЕсли;			
		КонецЦикла;
		
		МассивНеиспользуемыхПараметров = Новый Массив;		
		Для Каждого СтрокаПараметр Из Объект.ПараметрыЗапроса1С Цикл			
			ПоискПараметра = ПараметрыЗапроса.Найти(СтрокаПараметр.ИмяПараметра);
			Если ПоискПараметра = Неопределено Тогда				
				МассивНеиспользуемыхПараметров.Добавить(СтрокаПараметр);				
			КонецЕсли;			
		КонецЦикла;
		
		Для Каждого ПараметрУдаление Из МассивНеиспользуемыхПараметров Цикл			
			Объект.ПараметрыЗапроса1С.Удалить(ПараметрУдаление);			
		КонецЦикла;
	Исключение
		// Действий не требуется	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапуститьСессиюОпределенияИдентификатораСоединенияСУБД(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИдентификаторЗапроса = ИдентификаторЗапроса();
	
	ИдентификаторОбработкиСтрока = Строка(Форма.Объект.ИдентификаторОбработки);
	ИдентификаторОбработкиСтрока = СтрЗаменить(ИдентификаторОбработкиСтрока, "-", "");
	
	ИмяБазыДанных = СокрЛП(Форма.Объект.ИмяБазыДанных);
	
	Если ЭтоSQLServer2008(Форма) Тогда
		ЗапросСозданияСессии = Форма.SQLServer_2008_СкриптСессииОпределенияСессииСУБД;	
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификатоЗапроса}", XMLСтрока(Форма.ИдентификаторЗапроса));
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторБазыДанных}", Объект.ИдентификаторБазыДанных);
	Иначе
		ЗапросСозданияСессии = Форма.SQLServer_СкриптСессииОпределенияСессииСУБД;	
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификатоЗапроса}", XMLСтрока(Форма.ИдентификаторЗапроса));
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторБазыДанных}", Объект.ИдентификаторБазыДанных);
	КонецЕсли;
	
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
		
	Если НЕ СоединениеБД = Неопределено Тогда
			
		КомандаБД = Новый COMОбъект("ADODB.Command"); 
		КомандаБД.ActiveConnection = СоединениеБД; 
		КомандаБД.CommandText = ЗапросСозданияСессии;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторЗапроса() Экспорт

	ДатаМиллисекунды = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Генератор = Новый ГенераторСлучайныхЧисел(ДатаМиллисекунды);
	СгенерированноеЧисло = Генератор.СлучайноеЧисло(100000000, 900000000); 
	
	Возврат СгенерированноеЧисло;
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗапросИдентификацииСоединения(Знач МенеджерВТ)
	
	Перем ЗапросУдержаниеСоединения;
	
	ЗапросУдержаниеСоединения = Новый Запрос;
	ЗапросУдержаниеСоединения.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросУдержаниеСоединения.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ " + XMLСтрока(ИдентификаторЗапроса) + "
	|	" + XMLСтрока(ИдентификаторЗапроса) + " КАК Число,
	|	686786745123126754432478123752 КАК ДополнительноеЧисло
	|ПОМЕСТИТЬ ВТ_ПроизвольныеЗначения";
	ЗапросУдержаниеСоединения.Выполнить();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьИдентификаторТекущегоСоединения(Форма)	
	
	Объект = Форма.Объект;
	
	ИдентификаторЗапросаСтрокой = XMLСтрока(Форма.ИдентификаторЗапроса);
	
	ИдентификаторОбработкиСтрока = Строка(Форма.Объект.ИдентификаторОбработки);
	ИдентификаторОбработкиСтрока = СтрЗаменить(ИдентификаторОбработкиСтрока, "-", "");
	
	ЗапросДанныеСессии = Форма.SQLServer_СкриптПолученияДанныхРасширенныхСобытий;
	ЗапросДанныеСессии = СтрЗаменить(ЗапросДанныеСессии, "{ИмяСессии}", "getSessionForQuery");
	ЗапросДанныеСессии = СтрЗаменить(ЗапросДанныеСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
	
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
		
	ИдентификаторСоединения = Неопределено;
		
	Если НЕ СоединениеБД = Неопределено Тогда
			
		КомандаБД = Новый COMОбъект("ADODB.Command"); 
		КомандаБД.ActiveConnection = СоединениеБД; 
		КомандаБД.CommandText = ЗапросДанныеСессии;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
			
		Пока НЕ РезультатБД.Eof() Цикл
			
			РезультатЗапроса = РезультатБД.Fields(0).Value;
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(РезультатЗапроса);
			
			ПостроительDOM = Новый ПостроительDOM;
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			
			Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
			РезультатПоискаСобытий = ДокументDOM.ВычислитьВыражениеXPath("/RingBufferTarget/event", ДокументDOM, Разыменователь, ТипРезультатаDOMXPath.Любой);
			
			УзелСобытие = РезультатПоискаСобытий.ПолучитьСледующий();
			Пока НЕ УзелСобытие = Неопределено Цикл
				
				СвойстваСобытия = Новый Соответствие;
				
				Для Каждого ЭлементСобытия Из УзелСобытие.ДочерниеУзлы Цикл
					
					ИмяСвойства = СокрЛП(ЭлементСобытия.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение);
					ЗначениеСвойства = СокрЛП(ЭлементСобытия.ПоследнийДочерний.ТекстовоеСодержимое);
					Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
						ЗначениеСвойства = СокрЛП(ЭлементСобытия.ТекстовоеСодержимое);
					КонецЕсли;
					
					СвойстваСобытия.Вставить(ИмяСвойства, ЗначениеСвойства);
					
				КонецЦикла;
				
				ТекстЗапроса = СвойстваСобытия["batch_text"];
				Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
					ТекстЗапроса = СвойстваСобытия["statement"];	
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
					ТекстЗапроса = СвойстваСобытия["sql_text"];	
				КонецЕсли;
				
				Если Найти(ТекстЗапроса, "CREATE EVENT SESSION") > 0 Тогда
					
					УзелСобытие = РезультатПоискаСобытий.ПолучитьСледующий();
					Продолжить;
					
				ИначеЕсли Найти(ТекстЗапроса, ИдентификаторЗапросаСтрокой) > 0 Тогда
					
					ИдентификаторСоединения = СвойстваСобытия["session_id"];
					Прервать;					
					
				КонецЕсли;
				
				УзелСобытие = РезультатПоискаСобытий.ПолучитьСледующий();
				
			КонецЦикла;
				
			РезультатБД.MoveNext(); 
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Форма.ИдентификаторСоединения = ИдентификаторСоединения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройку(Знач ИмяНастройки, Знач НовоеЗначение, Знач ФлагЕстьИзменение)
	
	Если Объект[ИмяНастройки] <> НовоеЗначение Тогда
		Объект[ИмяНастройки] = НовоеЗначение;
		ФлагЕстьИзменение = Истина ИЛИ ФлагЕстьИзменение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьСоединениеСБазой(Знач ТипСУБД, Знач ИмяСервера, Знач ИмяБД, Знач Пользователь, Знач Пароль, Знач АутентификацияNTLM = Ложь)
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	
	Если ТипСУБД = "SQLServer" Тогда
		
		Если АутентификацияNTLM Тогда
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Integrated Security=SSPI;"
				+ "Persist Security Info=False;"
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		Иначе	
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Password=" + Пароль + ";"
				+ "Persist Security Info=True;User ID=" + Пользователь + ";" 
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		КонецЕсли;
		
	ИначеЕсли ТипСУБД = "PostgreSQL" Тогда
		
		СтрокаСоединения = "Driver={PostgreSQL Unicode};Pwd=" + Пароль + ";"
			+ "Uid=" + Пользователь + ";"
			+ "Database=" + ИмяБД + ";"
			+ "Server=" + ИмяСервера;
		
	КонецЕсли;
	
	Попытка
		
	    Соединение.Open(СтрокаСоединения);
		
		Возврат Соединение;
		
	Исключение
		
		СообщениеОбОшибке = ТипСУБД 
			+ ": Ошибка установки соединения: " 
			+ Символы.ПС 
			+ ОписаниеОшибки();
		
		СообщитьПользователю(СообщениеОбОшибке);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоSQLServer(Форма)
	
	Возврат (Форма.Отчет.ТипСУБД = Форма.Отчет.СписокДоступныхСУБД.Получить(1).Значение);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса(ИмяЗапроса, ОбъектНаСервере = Неопределено)
	
	Если ОбъектНаСервере = Неопределено Тогда
		ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ОбъектНаСервере
		.ПолучитьМакет(ИмяЗапроса)
		.ПолучитьТекст();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗавершитьСессиюОпределенияИдентификатораСоединения(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИдентификаторЗапроса = ИдентификаторЗапроса();
	
	ИдентификаторОбработкиСтрока = Строка(Форма.Объект.ИдентификаторОбработки);
	ИдентификаторОбработкиСтрока = СтрЗаменить(ИдентификаторОбработкиСтрока, "-", "");
	
	ИмяБазыДанных = СокрЛП(Форма.Объект.ИмяБазыДанных);
	
	ЗапросУдалениеСессии = Форма.SQLServer_СкриптУдаленияСессииСбораДанных;	
	ЗапросУдалениеСессии = СтрЗаменить(ЗапросУдалениеСессии, "{ИмяСессии}", "getSessionForQuery");
	ЗапросУдалениеСессии = СтрЗаменить(ЗапросУдалениеСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
		
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
		
	Если НЕ СоединениеБД = Неопределено Тогда
			
		КомандаБД = Новый COMОбъект("ADODB.Command"); 
		КомандаБД.ActiveConnection = СоединениеБД; 
		КомандаБД.CommandText = ЗапросУдалениеСессии;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапуститьСессиюСбораДанныхОЗапросах(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИдентификаторЗапроса = ИдентификаторЗапроса();
	
	ИдентификаторОбработкиСтрока = Строка(Форма.Объект.ИдентификаторОбработки);
	ИдентификаторОбработкиСтрока = СтрЗаменить(ИдентификаторОбработкиСтрока, "-", "");
	
	ИмяБазыДанных = СокрЛП(Форма.Объект.ИмяБазыДанных);
	
	Если ЭтоSQLServer2008(Форма) Тогда
		ЗапросСозданияСессии = Форма.SQLServer_2008_СкриптСбораДанныхОЗапросах;	
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторСоединения}", XMLСтрока(Форма.ИдентификаторСоединения));
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторБазыДанных}", Объект.ИдентификаторБазыДанных);
	Иначе
		ЗапросСозданияСессии = Форма.SQLServer_СкриптСбораДанныхОЗапросах;	
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторСоединения}", XMLСтрока(Форма.ИдентификаторСоединения));
		ЗапросСозданияСессии = СтрЗаменить(ЗапросСозданияСессии, "{ИдентификаторБазыДанных}", Объект.ИдентификаторБазыДанных);
	КонецЕсли;
	
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
		
	Если НЕ СоединениеБД = Неопределено Тогда
			
		КомандаБД = Новый COMОбъект("ADODB.Command"); 
		КомандаБД.ActiveConnection = СоединениеБД; 
		КомандаБД.CommandText = ЗапросСозданияСессии;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗавершитьСессиюСбораДанныхОЗапросах(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИдентификаторЗапроса = ИдентификаторЗапроса();
	
	ИдентификаторОбработкиСтрока = Строка(Форма.Объект.ИдентификаторОбработки);
	ИдентификаторОбработкиСтрока = СтрЗаменить(ИдентификаторОбработкиСтрока, "-", "");
	
	ИмяБазыДанных = СокрЛП(Форма.Объект.ИмяБазыДанных);
	
	ЗапросУдалениеСессии = Форма.SQLServer_СкриптУдаленияСессииСбораДанных;	
	ЗапросУдалениеСессии = СтрЗаменить(ЗапросУдалениеСессии, "{ИмяСессии}", "getQueriesInfo");
	ЗапросУдалениеСессии = СтрЗаменить(ЗапросУдалениеСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
		
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
		
	Если НЕ СоединениеБД = Неопределено Тогда
			
		Если Форма.КомандаБД = Неопределено Тогда
		
			КомандаБД = Новый COMОбъект("ADODB.Command"); 
			КомандаБД.ActiveConnection = СоединениеБД;
			
		Иначе
			
			КомандаБД = Форма.КомандаБД;
			
		КонецЕсли;
		
		КомандаБД.CommandText = ЗапросУдалениеСессии;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьДанныеОВыполненныхЗапросов(Форма)	
	
	Объект = Форма.Объект;
	
	ИдентификаторОбработкиСтрока = Строка(Форма.Объект.ИдентификаторОбработки);
	ИдентификаторОбработкиСтрока = СтрЗаменить(ИдентификаторОбработкиСтрока, "-", "");
	
	ЗапросДанныеСессии = Форма.SQLServer_СкриптПолученияДанныхРасширенныхСобытий;
	ЗапросДанныеСессии = СтрЗаменить(ЗапросДанныеСессии, "{ИмяСессии}", "getQueriesInfo");
	ЗапросДанныеСессии = СтрЗаменить(ЗапросДанныеСессии, "{ИдентификаторСессии}", ИдентификаторОбработкиСтрока);
	
	Если Форма.СоединениеБД = Неопределено Тогда	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);			
	Иначе			
		СоединениеБД = Форма.СоединениеБД;			
	КонецЕсли;
		
	ДанныеСобранныхЗапросов = Форма.Объект.ДанныеСобранныхЗапросов;
	ДанныеСобранныхЗапросов.Очистить();
	
	НомерПоПорядку = 1;
		
	Если НЕ СоединениеБД = Неопределено Тогда
		
		Если Форма.КомандаБД = Неопределено Тогда		
			КомандаБД = Новый COMОбъект("ADODB.Command"); 
			КомандаБД.ActiveConnection = СоединениеБД;			
		Иначе			
			КомандаБД = Форма.КомандаБД;			
		КонецЕсли;
			
		КомандаБД.CommandText = ЗапросДанныеСессии;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
					
		Пока НЕ РезультатБД.Eof() Цикл
			
			РезультатЗапроса = РезультатБД.Fields(0).Value;
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(РезультатЗапроса);
			
			ПостроительDOM = Новый ПостроительDOM;
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			
			Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
			РезультатПоискаСобытий = ДокументDOM.ВычислитьВыражениеXPath("/RingBufferTarget/event", ДокументDOM, Разыменователь, ТипРезультатаDOMXPath.Любой);
			
			МассивОператоров = Новый Массив;
			
			УзелСобытие = РезультатПоискаСобытий.ПолучитьСледующий();
			Пока НЕ УзелСобытие = Неопределено Цикл
				
				ИмяСобытия = СокрЛП(УзелСобытие.Атрибуты.ПолучитьИменованныйЭлемент("name").ТекстовоеСодержимое);
				ДатаСобытияСтрока = СокрЛП(УзелСобытие.Атрибуты.ПолучитьИменованныйЭлемент("timestamp").ТекстовоеСодержимое);
				ДатаСобытия = ПреобразоватьКДате(ДатаСобытияСтрока);
				
				СвойстваСобытия = Новый Соответствие;
				
				Для Каждого ЭлементСобытия Из УзелСобытие.ДочерниеУзлы Цикл
					
					ИмяСвойства = СокрЛП(ЭлементСобытия.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение);
					ЗначениеСвойства = СокрЛП(ЭлементСобытия.ПоследнийДочерний.ТекстовоеСодержимое);
					Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
						ЗначениеСвойства = СокрЛП(ЭлементСобытия.ТекстовоеСодержимое);
					КонецЕсли;
					
					СвойстваСобытия.Вставить(ИмяСвойства, ЗначениеСвойства);
					
				КонецЦикла;
				
				ТекстЗапроса = СвойстваСобытия["statement"];
				Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
					ТекстЗапроса = СвойстваСобытия["batch_text"];	
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
					ТекстЗапроса = СвойстваСобытия["sql_text"];	
				КонецЕсли;
				
				Если Найти(ТекстЗапроса, "CREATE EVENT SESSION") > 0 Тогда
					
					УзелСобытие = РезультатПоискаСобытий.ПолучитьСледующий();
					Продолжить;				
					
				КонецЕсли;
				
				Если ИмяСобытия = "rpc_completed" ИЛИ ИмяСобытия = "sql_batch_completed" Тогда
				
					ЗаписьДанныеЗапроса = ДанныеСобранныхЗапросов.Добавить();
					ЗаписьДанныеЗапроса.ПорядокВыполнения = НомерПоПорядку;
					ЗаписьДанныеЗапроса.Показать = Истина;
					ЗаписьДанныеЗапроса.CPU = ПреобразоватьКЧислу(СвойстваСобытия["cpu_time"]);
					ЗаписьДанныеЗапроса.ЛогическиеЧтения = ПреобразоватьКЧислу(СвойстваСобытия["logical_reads"]);
					ЗаписьДанныеЗапроса.ФизическиеЧтения = ПреобразоватьКЧислу(СвойстваСобытия["physical_reads"]);
					ЗаписьДанныеЗапроса.ИдентификаторКлиента = ПреобразоватьКЧислу(СвойстваСобытия["client_pid"]);
					ЗаписьДанныеЗапроса.ИмяПриложения = СвойстваСобытия["client_app_name"];
					ЗаписьДанныеЗапроса.ИмяОбъекта = СвойстваСобытия["object_name"];
					ЗаписьДанныеЗапроса.ИдентификаторЯдраCPU = ПреобразоватьКЧислу(СвойстваСобытия["cpu_id"]);
					ЗаписьДанныеЗапроса.ВремяВыполнения = ПреобразоватьКЧислу(СвойстваСобытия["duration"]);
					ЗаписьДанныеЗапроса.КоличествоЗаписей = ПреобразоватьКЧислу(СвойстваСобытия["row_count"]);
					ЗаписьДанныеЗапроса.ЗаписьДанных = ПреобразоватьКЧислу(СвойстваСобытия["writes"]);
					ЗаписьДанныеЗапроса.Системный = ПреобразоватьКБулево(СвойстваСобытия["is_system"]);
					ЗаписьДанныеЗапроса.ТекстЗапроса = ТекстЗапроса;
					
					Если МассивОператоров.Количество() = 1 Тогда						
						ЗаписьДанныеЗапроса.ХэшПланаЗапроса = ПодготовитьИдентификаторПланаЗапроса(
							МассивОператоров.Получить(0).Получить("plan_handle"));
						ЗаписьДанныеЗапроса.ЕстьПланЗапроса = ЗначениеЗаполнено(ЗаписьДанныеЗапроса.ХэшПланаЗапроса);						
					Иначе						
						ЗаписьДанныеЗапроса.ХэшПланаЗапроса = Неопределено;
						ЗаписьДанныеЗапроса.ПланЗапросаXML = Неопределено;
						ЗаписьДанныеЗапроса.ЕстьПланЗапроса = Ложь;						
					КонецЕсли;
					
					ЗаписьДанныеЗапроса.ИмяСобытия = ИмяСобытия;
					ЗаписьДанныеЗапроса.ДатаСобытия = ДатаСобытия;
					
					МассивОператоров.Очистить();
					НомерПоПорядку = НомерПоПорядку + 1;
					
					// Переопределение события "ПриПолученииДанныхЗапросов"
					Если ЗначениеЗаполнено(Объект.СобытиеПриПолученииДанныхЗапросов) Тогда			
						Выполнить(Объект.СобытиеПриПолученииДанныхЗапросов);			
					КонецЕсли;
					
				Иначе
					
					МассивОператоров.Добавить(СвойстваСобытия);
					
				КонецЕсли;
				
				УзелСобытие = РезультатПоискаСобытий.ПолучитьСледующий();
				
			КонецЦикла;
				
			РезультатБД.MoveNext(); 
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Форма.СформироватьПакетЗапросовSQL();
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрочитатьПланЗапроса(Форма, Знач ИдентификаторПланаЗапроса)
	
	Объект = Форма.Объект;
		
	ЗапросДанныеПлана = Форма.SQLServer_СкриптЧтенияПланаЗапроса;
	ЗапросДанныеПлана = СтрЗаменить(ЗапросДанныеПлана, "{ИдентификаторПланаЗапроса}", ИдентификаторПланаЗапроса);
	
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
	
	СодержимоеПланаЗапроса = Неопределено;
	
	Если НЕ СоединениеБД = Неопределено Тогда
		
		Если Форма.КомандаБД = Неопределено Тогда
		
			КомандаБД = Новый COMОбъект("ADODB.Command"); 
			КомандаБД.ActiveConnection = СоединениеБД;
			
		Иначе
			
			КомандаБД = Форма.КомандаБД;
			
		КонецЕсли;
			
		КомандаБД.CommandText = ЗапросДанныеПлана;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
					
		Пока НЕ РезультатБД.Eof() Цикл
			
			СодержимоеПланаЗапроса = РезультатБД.Fields(2).Value;
				
			РезультатБД.MoveNext(); 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СодержимоеПланаЗапроса;
	
КонецФункции

&НаСервере
Процедура СформироватьПакетЗапросовSQL() Экспорт
	
	Объект.ТекстЗапросаSQL = "";
	
	ТаблицаЗапросов = Объект.ДанныеСобранныхЗапросов.Выгрузить();
	ТаблицаЗапросов.Сортировать("ПорядокВыполнения Возр");
	
	Для Каждого ДанныеЗапроса Из ТаблицаЗапросов Цикл
		
		Если НЕ ДанныеЗапроса.Показать Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.ТекстЗапросаSQL = Объект.ТекстЗапросаSQL
			+ ДанныеЗапроса.ТекстЗапроса
			+ "					
			|
			|";
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчисткаДанных(Форма, СоединениеБД = Неопределено)
	
	Объект = Форма.Объект;
	
	ЗапросУдалениеСессии = Форма.SQLServer_СкриптОчисткиДанных;	
	
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
		
	Если НЕ СоединениеБД = Неопределено Тогда
			
		КомандаБД = Новый COMОбъект("ADODB.Command"); 
		КомандаБД.ActiveConnection = СоединениеБД; 
		КомандаБД.CommandText = ЗапросУдалениеСессии;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьКЧислу(Знач ИсходноеЗначение)
	
	Попытка
		
		Возврат Число(ИсходноеЗначение);
		
	Исключение
		
		Возврат 0;
		
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьКБулево(Знач ИсходноеЗначение)
	
	Если ТипЗнч(ИсходноеЗначение) = Тип("Строка") Тогда
	
		ИсходноеЗначение = ВРег(ИсходноеЗначение);
		
		Если ИсходноеЗначение = "TRUE" Тогда
			
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Булево") Тогда
		
		Возврат ИсходноеЗначение;
		
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Число") Тогда 
		
		Возврат (ИсходноеЗначение > 0);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьКДате(Знач ИсходноеЗначение)
	
	ДатаСтрока = СтрЗаменить(ИсходноеЗначение, "-", "");
	ДатаСтрока = СтрЗаменить(ДатаСтрока, ":", "");
	ДатаСтрока = СтрЗаменить(ДатаСтрока, "T", "");
	ДатаСтрока = Лев(ДатаСтрока, Найти(ДатаСтрока, ".") - 1);
	
	ДатаЗначение = Неопределено;
	
	Попытка
	
		ДатаЗначение = Дата(ДатаСтрока);
		
	Исключение
		
		ДатаЗначение = Дата(1,1,1);
		
	КонецПопытки;
	
	Возврат ДатаЗначение;
	
КонецФункции

&НаСервере
Процедура ДанныеСобранныхЗапросовПоказатьПриИзмененииНаСервере()
	
	СформироватьПакетЗапросовSQL();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьНастроекПодключения()
		
	Элементы.ИмяПользователя.Доступность = НЕ Объект.АутентификацияNTLM;
	Элементы.Пароль.Доступность = НЕ Объект.АутентификацияNTLM;
	Элементы.СохранятьПароль.Доступность = НЕ Объект.АутентификацияNTLM;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПодключениеНаСервере()
	
	Возврат ПроверитьПодключениеКБазеДанных(ЭтаФорма);	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПодключениеКБазеДанных(Форма)
	
	СоединениеБД = СоздатьСоединениеСБазой(
		Форма.Объект.ТипСУБД, 
		Форма.Объект.Сервер, 
		Форма.Объект.ИмяБазыДанных, 
		Форма.Объект.ИмяПользователя, 
		Форма.Объект.Пароль, 
		Форма.Объект.АутентификацияNTLM);
		
	Если СоединениеБД = Неопределено Тогда

		Форма.Элементы.ГруппаНастройки.Картинка = БиблиотекаКартинок.Остановить;
		Форма.Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Форма.Элементы.ГруппаНастройки;
		Форма.Элементы.ГруппаОсновнаяПанель1С.Доступность = Ложь;
		Форма.Элементы.ГруппаОсновнаяПанельЗапросSQL.Доступность = Ложь;
		Форма.Элементы.ГруппаДополнительныеНастройки.Доступность = Ложь;
		
		Форма.Элементы.ГруппаНастройкиРедактирование.ЦветФона = WebЦвета.АнтикБелый;
		Форма.Элементы.ГруппаНастройки.ЦветФона = WebЦвета.АнтикБелый;
		
		Возврат Ложь;
		
	Иначе

		Форма.Элементы.ГруппаНастройки.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
		Форма.Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Форма.Элементы.ГруппаОсновнаяПанель1С;
		Форма.Элементы.ГруппаОсновнаяПанель1С.Доступность = Истина;
		Форма.Элементы.ГруппаОсновнаяПанельЗапросSQL.Доступность = Истина;
		Форма.Элементы.ГруппаДополнительныеНастройки.Доступность = Истина;
		
		Форма.Элементы.ГруппаНастройкиРедактирование.ЦветФона = WebЦвета.Роса;
		Форма.Элементы.ГруппаНастройки.ЦветФона = WebЦвета.Роса;

		ЗакрытьСоединениеADO(СоединениеБД);
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимЗапрос(Форма)

	Возврат (Форма.Объект.Режим = 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимАлгоритм(Форма)

	Возврат (Форма.Объект.Режим = 1);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьРежимаРаботы()
	
	Если РежимЗапрос(ЭтаФорма) Тогда
		
		Элементы.ГруппаОсновнаяПанельЗапрос1СВариантыВыполнения.ТекущаяСтраница = Элементы.ГруппаОсновнаяПанельЗапрос1СВариантыВыполненияЗапрос;	
		
	ИначеЕсли РежимАлгоритм(ЭтаФорма) Тогда
		
		Элементы.ГруппаОсновнаяПанельЗапрос1СВариантыВыполнения.ТекущаяСтраница = Элементы.ГруппаОсновнаяПанельЗапрос1СВариантыВыполненияАлгоритм;
		
	Иначе
		
		Элементы.ГруппаОсновнаяПанельЗапрос1СВариантыВыполнения.ТекущаяСтраница = Элементы.ГруппаОсновнаяПанельЗапрос1СВариантыВыполненияЗапрос;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатЗапросаПриИзмененииНаСервере()
	
	Если Объект.ПоказатьРезультатЗапроса Тогда
		Элементы.РезультатЗапроса1С.Видимость = Истина;	
	Иначе
		Элементы.РезультатЗапроса1С.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗакрытьСоединениеADO(Соединение) Экспорт
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение.Close();
	Исключение
		// Действий не требуется	
	КонецПопытки;
	
	Соединение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагПоказаЗапросов(ЗначениеФлага)
	
	Для Каждого Строка Из Объект.ДанныеСобранныхЗапросов Цикл
		
		Строка.Показать = ЗначениеФлага;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПланЗапросаXMLПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.ДанныеСобранныхЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		
		ПутьФайлаДляСохранения = ВыбранныеФайлы.Получить(0);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекущиеДанные.ПланЗапросаXML);
		ТекстовыйДокумент.Записать(ПутьФайлаДляСохранения, КодировкаТекста.UTF8);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложенияПродолжение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьИдентификаторБазыДанных(Форма)
	
	Объект = Форма.Объект;
	
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
	
	ИмяБазыДанных = Форма.Объект.ИмяБазыДанных;
	
	ШаблонКоманды = "SELECT DB_ID('{ИмяБазыДанных}') AS DatabaseId";
	ШаблонКоманды = СтрЗаменить(ШаблонКоманды, "{ИмяБазыДанных}", ИмяБазыДанных);
	
	Если НЕ СоединениеБД = Неопределено Тогда
		
		Если Форма.КомандаБД = Неопределено Тогда
		
			КомандаБД = Новый COMОбъект("ADODB.Command"); 
			КомандаБД.ActiveConnection = СоединениеБД;
			
		Иначе
			
			КомандаБД = Форма.КомандаБД;
			
		КонецЕсли;
			
		КомандаБД.CommandText = ШаблонКоманды;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
					
		Пока НЕ РезультатБД.Eof() Цикл
			
			РезультатЗапроса = РезультатБД.Fields(0).Value;
			Объект.ИдентификаторБазыДанных = XMLСтрока(РезультатЗапроса);
				
			РезультатБД.MoveNext(); 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВерсиюСУБД(Форма)
	
	Объект = Форма.Объект;
	
	Если Форма.СоединениеБД = Неопределено Тогда
	
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
			
	Иначе
			
		СоединениеБД = Форма.СоединениеБД;
			
	КонецЕсли;
	
	ИмяБазыДанных = Форма.Объект.ИмяБазыДанных;
	
	ШаблонКоманды = "SELECT @@VERSION AS SQLServerVersion";
	ШаблонКоманды = СтрЗаменить(ШаблонКоманды, "{ИмяБазыДанных}", ИмяБазыДанных);
	
	Если НЕ СоединениеБД = Неопределено Тогда
		
		Если Форма.КомандаБД = Неопределено Тогда
		
			КомандаБД = Новый COMОбъект("ADODB.Command"); 
			КомандаБД.ActiveConnection = СоединениеБД;
			
		Иначе
			
			КомандаБД = Форма.КомандаБД;
			
		КонецЕсли;
			
		КомандаБД.CommandText = ШаблонКоманды;
		КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
		
		РезультатБД = КомандаБД.Execute();
					
		Пока НЕ РезультатБД.Eof() Цикл
			
			РезультатЗапроса = РезультатБД.Fields(0).Value;
			Объект.ВерсияСУБД = XMLСтрока(РезультатЗапроса);
				
			РезультатБД.MoveNext(); 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоSQLServer2008(Форма)
	
	ВерсияСУБД = Форма.Объект.ВерсияСУБД;
	
	Если Найти(ВерсияСУБД, "Microsoft SQL Server 2008") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура Ожидать(МиллисекундОжидания)
	
	// TODO: Когда-нибудь избавиться от этого ужаса
	
	ТекущаяДатаМиллисекунды = ТекущаяУниверсальнаяДатаВМиллисекундах() + МиллисекундОжидания;
	Пока ТекущаяДатаМиллисекунды >= ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
		// Ничего не делаем
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьИдентификаторПланаЗапроса(Знач ИсходныйИдентификаторПланаЗапроса)
	
	ИдентификаторПланаЗапроса = ИсходныйИдентификаторПланаЗапроса;
	
	НачалоИдентификатораПланаЗапроса = "<plan handle='0x";
	Если Найти(ИдентификаторПланаЗапроса, НачалоИдентификатораПланаЗапроса) > 0 Тогда
		ДлинаИдентификатораПланаЗапроса = СтрДлина(ИдентификаторПланаЗапроса) - СтрДлина(НачалоИдентификатораПланаЗапроса) - 3;
		ИдентификаторПланаЗапроса = Сред(ИдентификаторПланаЗапроса, 
			СтрДлина(НачалоИдентификатораПланаЗапроса) + 1, 
			ДлинаИдентификатораПланаЗапроса);
	КонецЕсли;
	
	Возврат ИдентификаторПланаЗапроса;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПланЗапросаНаСервере(ИдентификаторСтроки)

	ДанныеСтроки = Объект.ДанныеСобранныхЗапросов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДанныеСтроки.ПланЗапросаXML = ПрочитатьПланЗапроса(ЭтаФорма, ДанныеСтроки.ХэшПланаЗапроса);
	ДанныеСтроки.ПланЗапросаXML = СокрЛП(ДанныеСтроки.ПланЗапросаXML);
	
КонецПроцедуры

#КонецОбласти
