
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сведения о внешней обработке
// 
// Возвращаемое значение:
//   - Структура - Информация о внешнем отчете и обработке
//
Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", НСтр("ru='Мастер полнотекстового поиска'"));
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0.2");
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", 
		НСтр("ru='Набор инструментов для работы с полнотекстовым индексом платформы 1С. 
			|Стандартные и расширенные возможности..'"));
		
	МассивНазначенийОбработки = НазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	ТаблицаКомандОбработки = ТаблицаКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

// Получает актуальную информацию о полнотекстовом поиске информационной базы
// 
Процедура ОбновитьИнформациюПолнотекстовогоПоиска(ОпределятьКаталогПолнотекстовогоИндекса = Истина) Экспорт
	
	ТекущийРежимПолнотекстовогоПоиска = ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска();

	ИндексАктуален = Неопределено;
	ОбновлениеИндексаЗавершено = Неопределено;
	ДатаАктуальности = Неопределено;
	КоличествоЗаданийИндексирования = Неопределено;
	МаксимальныйРазмерИндексируемыхДанных = Неопределено;
	ТекущийРежимРазделенияСоставныхСлов = Неопределено;
	Если ОпределятьКаталогПолнотекстовогоИндекса Тогда
		КаталогПолнотекстовогоИндекса = Неопределено;
	КонецЕсли;
	РазмерПолнотекстовогоИндекса = Неопределено;

	Если ТекущийРежимПолнотекстовогоПоиска = РежимПолнотекстовогоПоискаРазрешить() Тогда	
	
		ИндексАктуален = ПолнотекстовыйПоиск.ИндексАктуален();	
		ОбновлениеИндексаЗавершено = ПолнотекстовыйПоиск.ОбновлениеИндексаЗавершено();
				
		ДатаАктуальности = ПолнотекстовыйПоиск.ДатаАктуальности();
		Если НЕ ЗначениеЗаполнено(ДатаАктуальности)
			И ИндексАктуален
			И ОбновлениеИндексаЗавершено Тогда
			ДатаАктуальности = ТекущаяДатаСеанса();		
		КонецЕсли;
		
		КоличествоЗаданийИндексирования = 0;
		Если ДоступнаФункцияКоличествоЗаданийИндексирования() Тогда
			КоличествоЗаданийИндексирования = ПолнотекстовыйПоиск.ПолучитьКоличествоЗаданийИндексирования();
		КонецЕсли;
		МаксимальныйРазмерИндексируемыхДанных = 0;
		Если ДоступнаФункцияМаксимальныйРазмерИндексируемыхДанных() Тогда
			МаксимальныйРазмерИндексируемыхДанных = ПолнотекстовыйПоиск.ПолучитьМаксимальныйРазмерИндексируемыхДанных();
		КонецЕсли;
		
		Если ДоступнаФункцияРежимРазделенияСоставныхСлов() Тогда	
			ТекущийРежимРазделенияСоставныхСлов = ПолнотекстовыйПоиск.ПолучитьРежимРазделенияСоставныхСлов();
			Если ТекущийРежимРазделенияСоставныхСлов = "Не использовать" Тогда
				ТекущийРежимРазделенияСоставныхСлов = РежимРазделенияСоставныхСловДоступныеЗначения.Получить(2).Значение;	
			КонецЕсли;
		Иначе
			ТекущийРежимРазделенияСоставныхСлов = РежимРазделенияСоставныхСловДоступныеЗначения.Получить(0).Значение;		
		КонецЕсли;
		
		Если ОпределятьКаталогПолнотекстовогоИндекса Тогда
		
			Если НЕ ЗначениеЗаполнено(КаталогПолнотекстовогоИндекса) Тогда
				КаталогПолнотекстовогоИндекса = КаталогПолнотекстовогоИндекса();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КаталогПолнотекстовогоИндекса) Тогда
			РазмерПолнотекстовогоИндекса = РазмерКаталога(КаталогПолнотекстовогоИндекса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Включение использования полнотекстового поиска для информационной базы
// 
Функция ВключитьПолнотекстовыйПоиск() Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Полнотекстовый поиск успешно включен.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;	

КонецФункции

// Выключение использования полнотекстового поиска для информационной базы
// 
Функция ВыключитьПолнотекстовыйПоиск() Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Запретить);
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Полнотекстовый поиск успешно отключен.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Полное обновление полнотекстового индекса
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщение - Строка - Информация о результате операции
// * Успешно - Булево - Истина в случае успешного выполнения, Ложь в противном случае.
//
Функция ПолноеОбновлениеПолнотекстовогоИндекса() Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Ложь);
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Полное обновление полнотекстового индекса успешно выполнено.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Частичное обновление полнотекстового индекса
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщение - Строка - Информация о результате операции
// * Успешно - Булево - Истина в случае успешного выполнения, Ложь в противном случае.
//
Функция ЧастичноеОбновлениеПолнотекстовогоИндекса() Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Истина);
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Порционное обновление полнотекстового индекса успешно выполнено.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Слияние полного и частичного полнотекстового индекса
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщение - Строка - Информация о результате операции
// * Успешно - Булево - Истина в случае успешного выполнения, Ложь в противном случае.
//
Функция СлияниеЧастичногоИПолногоПолнотекстовогоИндекса() Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.ОбновитьИндекс(Истина, Истина);
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Слияние частичного и полного полнотекстового индекса успешно выполнено.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Полная очистка полнотекстового индекса
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщение - Строка - Информация о результате операции
// * Успешно - Булево - Истина в случае успешного выполнения, Ложь в противном случае.
//
Функция ОчиститьПолнотекстовыйИндекс() Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.ОчиститьИндекс();
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Очистка полнотекстового индекса успешно выполнено.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Устанавливает максимальное количество фоновых заданий индексирования
// 
// Параметры:
// 	КоличествоЗаданий - Число - Количество заданий
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщение - Строка - Сообщение о результате операции
// * Успешно - Булево - Истина при успешной операции. Ложь в противном случае.
//
Функция СохранитьКоличествоЗаданийИндексирования(КоличествоЗаданий) Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.УстановитьКоличествоЗаданийИндексирования(КоличествоЗаданий);
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Установка количества заданий индексирования выполнена успешно.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Устанавливает максимальный размер индексируемых данных
// 
// Параметры:
// 	КоличествоЗаданий - Число - Размер данных в байтах
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщение - Строка - Сообщение о результате операции
// * Успешно - Булево - Истина при успешной операции. Ложь в противном случае.
//
Функция СохранитьМаксимальныйРазмерИндексируемыхДанных(МаксимальныйРазмер) Экспорт

	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		ПолнотекстовыйПоиск.УстановитьМаксимальныйРазмерИндексируемыхДанных(МаксимальныйРазмер);
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Установка максимального размера индексируемых данных выполнена успешно.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Устанавливает максимальный размер индексируемых данных
// 
// Параметры:
// 	РежимРазделения - Строка - Режим разделения составных слов строкой (Авто, Использовать, НеИспользовать)
// Возвращаемое значение:
// 	Структура - Описание:
// * Сообщение - Строка - Сообщение о результате операции
// * Успешно - Булево - Истина при успешной операции. Ложь в противном случае.
//
Функция СохранитьРежимРазделенияСоставныхСлов(РежимРазделения) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Успешно", Ложь);
	РезультатОперации.Вставить("Сообщение", Неопределено);

	Попытка
		
		УстановитьБезопасныйРежим(Истина);
		
		Если РежимРазделения = "Авто" Тогда
			КомандаТекст = 
			"ПолнотекстовыйПоиск.УстановитьРежимРазделенияСоставныхСлов(РежимРазделенияСоставныхСлов.Авто);";
		ИначеЕсли РежимРазделения = "Использовать" Тогда
			КомандаТекст = 
			"ПолнотекстовыйПоиск.УстановитьРежимРазделенияСоставныхСлов(РежимРазделенияСоставныхСлов.Использовать);";
		ИначеЕсли РежимРазделения = "НеИспользовать" Тогда
			КомандаТекст = 
			"ПолнотекстовыйПоиск.УстановитьРежимРазделенияСоставныхСлов(РежимРазделенияСоставныхСлов.НеИспользовать);";
		Иначе
			КомандаТекст = Неопределено;
		КонецЕсли;
		
		Если НЕ КомандаТекст = Неопределено Тогда
			Выполнить(КомандаТекст);
		КонецЕсли;
		
		РезультатОперации.Успешно = Истина;
		РезультатОперации.Сообщение = "Установка максимального размера индексируемых данных выполнена успешно.";
		
	Исключение

		СведенияОбОшибке = ИнформацияОбОшибке();
		
		ТекстовоеОписаниеОшибки = Неопределено;
		Если НЕ СведенияОбОшибке.Причина = Неопределено Тогда
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Причина.Описание;
		Иначе
			ТекстовоеОписаниеОшибки = СведенияОбОшибке.Описание;
		КонецЕсли;
		
		РезультатОперации.Успешно = Ложь;                                     		
		РезультатОперации.Сообщение = ТекстовоеОписаниеОшибки;
		 			
	КонецПопытки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Каталог полнотекстового индекса информационной базы
// 
// Возвращаемое значение:
// 	Строка, Неопределено - Путь к каталогу.
//
Функция КаталогПолнотекстовогоИндекса() Экспорт

	ПутьККаталогуПолнотекстовогоИндекса = Неопределено;

	Если ЭтоФайловаяБаза() Тогда
		
		#Область ФайловаяБаза		
		СтрокаСоединенияБазы = СтрокаСоединенияИнформационнойБазы();		
		ПутьККаталогуБазы = Сред(СтрокаСоединенияБазы, 7, СтрДлина(СтрокаСоединенияБазы) - 8);
		
		ПутьККаталогуПолнотекстовогоИндекса = ПутьККаталогуБазы + "\1Cv8FTxt";				
		#КонецОбласти
		
	Иначе
		
		#Область КлиентСервернаяБаза
		ИнформацияОСоединении = ИнформацияОСоединенииСИнформационнойБазой();		
		ВсеСлужбы = СформироватьСписокСлужбАгентаСервера1С();
		Если ВсеСлужбы.Количество() = 1 Тогда
			
			ПутьККаталогуКластера = "";
			
			ПутьЗапускаСлужбы = ВсеСлужбы.Получить(0).PathName;
			ВсеЧастиПутиЗапускаСлужбы = _СтрРазделить(ПутьЗапускаСлужбы, " ", Ложь);
			ИндексПараметраКаталогаКластера = ВсеЧастиПутиЗапускаСлужбы.Найти("-d");
			Если НЕ ИндексПараметраКаталогаКластера = Неопределено Тогда
				ТекущийИндекс = ИндексПараметраКаталогаКластера + 1;
				Пока ВсеЧастиПутиЗапускаСлужбы.Количество() >= ТекущийИндекс + 1 Цикл					
					
					ТекущаяЧастьПути = ВсеЧастиПутиЗапускаСлужбы.Получить(ТекущийИндекс);
					Если НЕ _СтрНайти(ТекущаяЧастьПути, "-") = 0 Тогда
						Прервать;
					КонецЕсли;
					
					ПутьККаталогуКластера = ПутьККаталогуКластера 
						+ ТекущаяЧастьПути
						+ " ";
						
					ТекущийИндекс = ТекущийИндекс + 1;
						
				КонецЦикла;				
			КонецЕсли;
			
			ПутьККаталогуКластера = СокрЛП(ПутьККаталогуКластера);
			ПутьККаталогуКластера = СтрЗаменить(ПутьККаталогуКластера, """", "");
			
			ОписаниеКаталогаКластера = Новый Файл(ПутьККаталогуКластера);
			Если ОписаниеКаталогаКластера.ЭтоКаталог()
				И ОписаниеКаталогаКластера.Существует() Тогда
				
				КаталогБазКластера = ПутьККаталогуКластера + "\reg_" + XMLСтрока(ИнформацияОСоединении.ПортСервера);
				ФайлНастроекСпискаБаз = КаталогБазКластера + "\1CV8Clst.lst";
				ОписаниеФайлаНастроекСпискаБаз = Новый Файл(ФайлНастроекСпискаБаз);
				Если ОписаниеФайлаНастроекСпискаБаз.Существует() Тогда
					
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ФайлНастроекСпискаБаз);
					СодержимоеФайлаНастроек = ТекстовыйДокумент.ПолучитьТекст();

					МакетШаблонаВыраженийПоиска = ПолучитьМакет("РегулярноеВыражениеПоискаИнформацииОБазах");					
					РегулярноеВыражениеПоискаБаз = МакетШаблонаВыраженийПоиска.ПолучитьТекст();		
					RegExp = Новый COMОбъект("VBScript.RegExp");
					RegExp.MultiLine = Истина;
					RegExp.Global = Истина;
					RegExp.IgnoreCase = Истина;
					RegExp.Pattern = РегулярноеВыражениеПоискаБаз;
					
					РезультатАнализаСтроки = RegExp.Execute(СодержимоеФайлаНастроек);
					
					МассивВыражений = Новый Массив;					
					Для Каждого Выражение Из РезультатАнализаСтроки Цикл
						
						СтруктураВыражение = Новый Структура (
							"Начало, Длина, Значение, ПодВыражения", 
							Выражение.FirstIndex, Выражение.Length,Выражение.Value);						
						
						МассивПодВыражений = Новый Массив;
						Для Каждого ПодВыражение Из Выражение.SubMatches Цикл
							МассивПодВыражений.Добавить(ПодВыражение);
						КонецЦикла;
						СтруктураВыражение.ПодВыражения = МассивПодВыражений;
						
						МассивВыражений.Добавить (СтруктураВыражение);
						
					КонецЦикла;				
					
					Для Каждого НайденноеВыражение Из МассивВыражений Цикл
						
						ИдентификаторИнформационнойБазы = Лев(НайденноеВыражение.Значение, 36);
						ИмяИнформационноБазы = Сред(НайденноеВыражение.Значение, 39, СтрДлина(НайденноеВыражение.Значение) - 36);
						
						Если ВРег(ИнформацияОСоединении.ИмяБазы) = ВРег(ИмяИнформационноБазы) Тогда														
							КаталогИнформационнойБазы = КаталогБазКластера + "\" + ИдентификаторИнформационнойБазы;
							ПутьККаталогуПолнотекстовогоИндекса = КаталогИнформационнойБазы + "\1Cv8FTxt";
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЕсли;
	
	Возврат ПутьККаталогуПолнотекстовогоИндекса;
	
КонецФункции


// Формирует таблицу объектов и их полей, которые участвуют в формировании индекса
// полнотекстового поиска.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ТипОбъекта
// * ВидОбъекта 
// * Таблица 
// * Реквизит
// 
Функция ТаблицаИспользованияПолнотекстовогоПоиска() Экспорт
	
	ДанныеПолнотекстовогоПоиска = Новый ТаблицаЗначений;
	ДанныеПолнотекстовогоПоиска.Колонки.Добавить("ТипОбъекта");
	ДанныеПолнотекстовогоПоиска.Колонки.Добавить("ВидОбъекта");
	ДанныеПолнотекстовогоПоиска.Колонки.Добавить("Таблица");
	ДанныеПолнотекстовогоПоиска.Колонки.Добавить("Реквизит");
	
	МассивВидовМетаданных = Новый Массив;
	МассивВидовМетаданных.Добавить("ПланыОбмена");
	МассивВидовМетаданных.Добавить("Справочники");
	МассивВидовМетаданных.Добавить("Документы");
	МассивВидовМетаданных.Добавить("ПланыВидовХарактеристик");
	МассивВидовМетаданных.Добавить("ПланыВидовРасчета");
	МассивВидовМетаданных.Добавить("Задачи");
	МассивВидовМетаданных.Добавить("РегистрыСведений");
	МассивВидовМетаданных.Добавить("РегистрыНакопления");
	МассивВидовМетаданных.Добавить("РегистрыБухгалтерии");
	МассивВидовМетаданных.Добавить("РегистрыРасчета");
	МассивВидовМетаданных.Добавить("БизнесПроцессы");
	
	ДобавитьДанныеОбъектов(
		МассивВидовМетаданных, 
		ДанныеПолнотекстовогоПоиска); 
	
	Возврат ДанныеПолнотекстовогоПоиска;
	
КонецФункции

// Таблица с описанием файлов полнотекстового индекса
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ПутьКФайлу 
// * ИмяФайла 
// * ВремяИзменения 
// * РазмерБайт 
// * РазмерКилобайт 
// * РазмерМегабайт 
// * РазмерГигабайт
// 
Функция ТаблицаФайловПолнотекстовогоИндекса() Экспорт

	ТаблицаФайлов = Новый ТаблицаЗначений();
	ТаблицаФайлов.Колонки.Добавить("ПутьКФайлу");
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла");	
	ТаблицаФайлов.Колонки.Добавить("ВремяИзменения");
	ТаблицаФайлов.Колонки.Добавить("РазмерБайт");
	ТаблицаФайлов.Колонки.Добавить("РазмерКилобайт");
	ТаблицаФайлов.Колонки.Добавить("РазмерМегабайт");
	ТаблицаФайлов.Колонки.Добавить("РазмерГигабайт");

	ОписаниеКаталога = Новый Файл(КаталогПолнотекстовогоИндекса);
	Если ЗначениеЗаполнено(КаталогПолнотекстовогоИндекса)
		И ОписаниеКаталога.ЭтоКаталог()
		И ОписаниеКаталога.Существует() Тогда

		ДобавитьИнформациюОФайлахКаталога(ТаблицаФайлов, ОписаниеКаталога.ПолноеИмя);	
		
	КонецЕсли;
	
	Возврат ТаблицаФайлов;
		
КонецФункции


// Таблица объекто в очереди к обновлению полнотекстового индекса
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Период 
// * Метаданные 
// * Значение 
// * Порядок
// 
Функция ТаблицаОчередиКОбновлениюПолнотекстовогоИндекса() Экспорт

	СоответствиеЧисловыхИдентификаторов = СоответствиеЧисловыхИдентификаторовТипов();

	ТаблицаОчередиКОбновлению = Новый ТаблицаЗначений;
	ТаблицаОчередиКОбновлению.Колонки.Добавить("Период");
	ТаблицаОчередиКОбновлению.Колонки.Добавить("Метаданные");
	ТаблицаОчередиКОбновлению.Колонки.Добавить("Значение");
	ТаблицаОчередиКОбновлению.Колонки.Добавить("Порядок");

	ОписаниеКаталога = Новый Файл(КаталогПолнотекстовогоИндекса);
	Если НЕ (ЗначениеЗаполнено(КаталогПолнотекстовогоИндекса)
		И ОписаниеКаталога.ЭтоКаталог()
		И ОписаниеКаталога.Существует()) Тогда
		Возврат ТаблицаОчередиКОбновлению;					
	КонецЕсли;

	ФайлыСИнформациейОбИзменениях = НайтиФайлы(КаталогПолнотекстовогоИндекса, "changes*.log", Ложь);
	Порядок = 0;
	
	Для Каждого ФайлИзменения Из ФайлыСИнформациейОбИзменениях Цикл

		ПериодОчередиСтрокой = СтрЗаменить(ФайлИзменения.ИмяБезРасширения, "changes", "");
		ПериодОчереди = Дата(ПериодОчередиСтрокой);
		
		ЧтениеТекста = Новый ЧтениеТекста(ФайлИзменения.ПолноеИмя, КодировкаТекста.Системная, , , Ложь);
		
		ТекущееЗначениеСтрокой = "";
		ЗначениеСтроки = ЧтениеТекста.ПрочитатьСтроку();
		ЗначениеСтроки = УбратьСлужебныеСимволы(ЗначениеСтроки);
		ЗначениеСтроки = СокрЛП(ЗначениеСтроки);
		
		Пока ЗначениеСтроки <> Неопределено Цикл
			
			НачалоСтроки = Лев(ЗначениеСтроки, 15);
			ЭтоНачалоЗначения = (Найти(НачалоСтроки, ":") > 0);
			Если ЭтоНачалоЗначения И ЗначениеЗаполнено(ТекущееЗначениеСтрокой) Тогда
				ЗначениеОчереди = ЗначениеИзСлужебногоОпределения(ТекущееЗначениеСтрокой, СоответствиеЧисловыхИдентификаторов);
				
				СтрокаОчереди = ТаблицаОчередиКОбновлению.Добавить();
				СтрокаОчереди.Период = ПериодОчереди;
				СтрокаОчереди.Метаданные = ЗначениеОчереди.Метаданные().ПолноеИмя();
				Если ЭтоСсылка(ТипЗнч(ЗначениеОчереди)) Тогда
					СтрокаОчереди.Значение = ЗначениеОчереди;
				Иначе
					СтрокаОчереди.Значение = Строка(ЗначениеОчереди);	
				КонецЕсли;
				СтрокаОчереди.Порядок = Порядок;
				
				ТекущееЗначениеСтрокой = "";
			КонецЕсли;
			
			Если ЭтоНачалоЗначения Тогда
				ТекущееЗначениеСтрокой = ЗначениеСтроки;
			Иначе			
				ТекущееЗначениеСтрокой = ТекущееЗначениеСтрокой + ЗначениеСтроки;
			КонецЕсли;
						
			ЗначениеСтроки = ЧтениеТекста.ПрочитатьСтроку();
			Если НЕ ЗначениеСтроки = Неопределено Тогда
				ЗначениеСтроки = УбратьСлужебныеСимволы(ЗначениеСтроки);
				ЗначениеСтроки = СокрЛП(ЗначениеСтроки);
			КонецЕсли;
			
			Порядок = Порядок + 1;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекущееЗначениеСтрокой) Тогда

			ЗначениеОчереди = ЗначениеИзСлужебногоОпределения(ТекущееЗначениеСтрокой, СоответствиеЧисловыхИдентификаторов);
	
			СтрокаОчереди = ТаблицаОчередиКОбновлению.Добавить();
			СтрокаОчереди.Период = ПериодОчереди;
			СтрокаОчереди.Метаданные = ЗначениеОчереди.Метаданные().ПолноеИмя();
			Если ЭтоСсылка(ТипЗнч(ЗначениеОчереди)) Тогда
				СтрокаОчереди.Значение = ЗначениеОчереди;
			Иначе
				СтрокаОчереди.Значение = Строка(ЗначениеОчереди);	
			КонецЕсли;
			СтрокаОчереди.Порядок = Порядок;
			
		КонецЕсли;
		
		ЧтениеТекста.Закрыть();
		
	КонецЦикла;

	Возврат ТаблицаОчередиКОбновлению;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Значение режима полнотекстового поиска "Разрешить"
// 
// Возвращаемое значение:
// 	Строка - Строковое значение режима полнотекстового поиска "Разрешить"
//
Функция РежимПолнотекстовогоПоискаРазрешить() Экспорт

	Возврат "Разрешить";
	
КонецФункции

// Значение режима полнотекстового поиска "Запретить"
// 
// Возвращаемое значение:
// 	Строка - Строковое значение режима полнотекстового поиска "Запретить"
//
Функция РежимПолнотекстовогоПоискаЗапретить() Экспорт

	Возврат "Запретить";
	
КонецФункции

// Проверяет доступность настройки "Режим разделения составных слов"
// 
// Возвращаемое значение:
// 	Булево - Истина, если функционал доступен. Ложь в противном случае.
//
Функция ДоступнаФункцияРежимРазделенияСоставныхСлов() Экспорт
	
	ИнформацияОВерсииПлатформы = ВерсияПлатформы();
	
	Если ИнформацияОВерсииПлатформы.ОсновнаяВерсия = 8
		И ИнформацияОВерсииПлатформы.МладшаяВерсия = 3
		И ИнформацияОВерсииПлатформы.Релиз >= 15 Тогда
			
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;	
	
КонецФункции

// Проверяет доступность настройки "Количество заданийИ индексирования"
// 
// Возвращаемое значение:
// 	Булево - Истина, если функционал доступен. Ложь в противном случае.
//
Функция ДоступнаФункцияКоличествоЗаданийИндексирования() Экспорт
	
	ИнформацияОВерсииПлатформы = ВерсияПлатформы();
	
	Если ИнформацияОВерсииПлатформы.ОсновнаяВерсия = 8
		И ИнформацияОВерсииПлатформы.МладшаяВерсия = 3
		И ИнформацияОВерсииПлатформы.Релиз >= 12 Тогда
			
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;	
	
КонецФункции

// Проверяет доступность настройки "Максимальный размер индексируемых данных"
// 
// Возвращаемое значение:
// 	Булево - Истина, если функционал доступен. Ложь в противном случае.
//
Функция ДоступнаФункцияМаксимальныйРазмерИндексируемыхДанных() Экспорт
	
	ИнформацияОВерсииПлатформы = ВерсияПлатформы();
	
	Если ИнформацияОВерсииПлатформы.ОсновнаяВерсия = 8
		И ИнформацияОВерсииПлатформы.МладшаяВерсия = 3
		И ИнформацияОВерсииПлатформы.Релиз >= 8 Тогда
			
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НазначениеОбработки() 
	
	МассивНазначенийОбработки = Новый Массив;
	 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

Функция ТаблицаКомандОбработки() 
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево"));
	
	ДобавитьКоманду(тзКоманд, НСтр("ru='МастерПолнотекстовогоПоиска'"), НСтр("ru='Мастер полнотекстового поиска'"), Ложь, "ОткрытиеФормы", "", Ложь);
	
	Возврат тзКоманд;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, 
	ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	строкаКоманды = ТаблицаКоманд.Добавить();
	строкаКоманды.Идентификатор = Идентификатор;
	строкаКоманды.Представление = Представление;
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	строкаКоманды.Использование = Использование;
	строкаКоманды.Модификатор = Модификатор;
	строкаКоманды.Скрыть = Скрыть;
	
КонецПроцедуры

Функция ВерсияПлатформы()
	
	ИнформацияОВерсииПлатформы = Новый Структура;
	ИнформацияОВерсииПлатформы.Вставить("Версия", Неопределено);
	ИнформацияОВерсииПлатформы.Вставить("ОсновнаяВерсия", Неопределено);
	ИнформацияОВерсииПлатформы.Вставить("МладшаяВерсия", Неопределено);
	ИнформацияОВерсииПлатформы.Вставить("Релиз", Неопределено);
	ИнформацияОВерсииПлатформы.Вставить("ДополнительныйНомерРелиза", Неопределено);	
	
	ИнформацияОПриложении = Новый СистемнаяИнформация;
	ВерсияПлатформы = ИнформацияОПриложении.ВерсияПриложения;
	ИнформацияОВерсииПлатформы.Вставить("Версия", ВерсияПлатформы);

	ЧастиВерсии = _СтрРазделить(ВерсияПлатформы, ".", Ложь);
	Если ЧастиВерсии.Количество() = 4 Тогда
	
		ИнформацияОВерсииПлатформы.Вставить("ОсновнаяВерсия", ПреобразоватьКЧислу(ЧастиВерсии.Получить(0)));
		ИнформацияОВерсииПлатформы.Вставить("МладшаяВерсия", ПреобразоватьКЧислу(ЧастиВерсии.Получить(1)));
		ИнформацияОВерсииПлатформы.Вставить("Релиз", ПреобразоватьКЧислу(ЧастиВерсии.Получить(2)));
		ИнформацияОВерсииПлатформы.Вставить("ДополнительныйНомерРелиза", ПреобразоватьКЧислу(ЧастиВерсии.Получить(3)));	
		
	КонецЕсли;
	
	Возврат ИнформацияОВерсииПлатформы;
	
КонецФункции

Функция ПреобразоватьКЧислу(Знач ИсходноеЗначение)

	Попытка

		Возврат Число(ИсходноеЗначение);
			
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ЭтоФайловаяБаза()
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	 
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	Если ПозицияПоиска = 1 тогда
		Возврат Истина;	
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	              	
КонецФункции

Функция РазмерКаталога(ПутьККаталогу)

	МассивНайденныхФайлов = НайтиФайлы(ПутьККаталогу, "*.*", Истина);
	
    Размер = 0;
     
    Для Каждого Файл Из МассивНайденныхФайлов Цикл
    	Если Файл.ЭтоФайл() Тогда
			Размер = Размер + Файл.Размер();                    
        КонецЕсли;    
    КонецЦикла;
    	
   	Возврат Размер;
	
КонецФункции

Функция ИнформацияОСоединенииСИнформационнойБазой()
	
	ИнформацияОСоединении = Новый Структура;
	ИнформацияОСоединении.Вставить("ЭтоФайловаябаза", ЭтоФайловаяБаза());
	ИнформацияОСоединении.Вставить("КаталогИнформационнойБазы", Неопределено);
	ИнформацияОСоединении.Вставить("ИмяСервера", Неопределено);
	ИнформацияОСоединении.Вставить("ИмяБазы", Неопределено);
	ИнформацияОСоединении.Вставить("ПортСервера", 1541);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ИнформацияОСоединении.ЭтоФайловаябаза Тогда
		
		КаталогИБ = Сред(СтрокаСоединения, 7, СтрДлина(СтрокаСоединения) - 8);		
		ИнформацияОСоединении.Вставить("КаталогИнформационнойБазы", КаталогИБ);
		
	Иначе
		
		НомерПортаСервера = 1541;
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "SRVR=");
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		ИмяСервера = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияТочкиСЗапятой + 1);
		
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "REF=");
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2;
		ИмяИБНаСервере = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		Если _СтрНайти(ИмяСервера, ":") > 0 Тогда
			
			ЧастиИмениСервера = _СтрРазделить(ИмяСервера, ":", Ложь);
			Если ЧастиИмениСервера.Количество() = 2 Тогда
				ИмяСервера = ЧастиИмениСервера.Получить(0);
				НомерПортаСервера = ПреобразоватьКЧислу(ЧастиИмениСервера.Получить(1));
				ИнформацияОСоединении.Вставить("ПортСервера", НомерПортаСервера);
			КонецЕсли;
			
		КонецЕсли;
		
		ИнформацияОСоединении.Вставить("ИмяСервера", ИмяСервера);
		ИнформацияОСоединении.Вставить("ИмяБазы", ИмяИБНаСервере);
		
	КонецЕсли;
	
	Возврат ИнформацияОСоединении;
	
КонецФункции

Функция СоответствиеЧисловыхИдентификаторовТипов()
	
	СоответствиеТипов = Новый Соответствие;
	
	СтруктураБазыДанных = ПолучитьСтруктуруХраненияБазыДанных(, Истина);
	Для Каждого ОбъектБазы Из СтруктураБазыДанных Цикл
		
		ИмяТаблицы = ОбъектБазы.ИмяТаблицыХранения;
		ИмяМетаданных = ОбъектБазы.Метаданные;
		ЧисловойИдентификаторТипа = ИзвлечьЧислоИзСтроки(ИмяТаблицы);
		
		ИнформацияОТипе = Новый Структура;
		ИнформацияОТипе.Вставить("ИмяТаблицы", ИмяТаблицы); 
		ИнформацияОТипе.Вставить("ИмяМетаданных", ИмяМетаданных);
		ИнформацияОТипе.Вставить("ЧисловойИдентификаторТипа", ЧисловойИдентификаторТипа);
		
		СоответствиеТипов.Вставить(ЧисловойИдентификаторТипа, ИнформацияОТипе);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

Функция СформироватьСписокСлужбАгентаСервера1С()
	
    Win32_ServiceInfo = Новый ТаблицаЗначений;
    Win32_ServiceInfo.Колонки.Добавить("Name");
    Win32_ServiceInfo.Колонки.Добавить("Caption");
    Win32_ServiceInfo.Колонки.Добавить("Description");
    Win32_ServiceInfo.Колонки.Добавить("PathName");
    Win32_ServiceInfo.Колонки.Добавить("StartMode");
    Win32_ServiceInfo.Колонки.Добавить("StartName");
    Win32_ServiceInfo.Колонки.Добавить("State");
    Win32_ServiceInfo.Колонки.Добавить("ProcessID");
    Win32_ServiceInfo.Колонки.Добавить("SystemName");
    
    Попытка

		ЗапросПоискаСлужбы = "SELECT * FROM Win32_Service " 
			+ "WHERE Name LIKE '%1C:Enterprise 8.3 Server Agent%' AND State = 'Running'";
	        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\.\root\cimv2");
        Win32_Service = WinMGMT.ExecQuery(ЗапросПоискаСлужбы);
        
        Для Каждого Service ИЗ Win32_Service Цикл
            
            ServiceInfo = Win32_ServiceInfo.Добавить();
            ServiceInfo.Name = Service.Name;
            ServiceInfo.Caption = Service.Caption;
            ServiceInfo.Description = Service.Description;
            ServiceInfo.PathName = Service.PathName;
            ServiceInfo.StartMode = Service.StartMode;
            ServiceInfo.StartName = Service.StartName;
            ServiceInfo.State = Service.State;
            ServiceInfo.ProcessID = Service.ProcessID;
            ServiceInfo.SystemName = Service.SystemName;
            
        КонецЦикла;
        
    Исключение
    	
    КонецПопытки;
    
    Возврат Win32_ServiceInfo;

КонецФункции

Функция ЗначениеИзСлужебногоОпределения(Знач СлужебноеОпределениеСтрокой, СоответствиеЧисловыхИдентификаторов)
	
	КонецОпределенияТипа = Найти(СлужебноеОпределениеСтрокой, ":");
	СтроковоеОпределениеТипа = Лев(СлужебноеОпределениеСтрокой, КонецОпределенияТипа);
	ЧисловойИдентификаторТипа = ИзвлечьЧислоИзСтроки(СтроковоеОпределениеТипа);
	ИнформацияОТипе = СоответствиеЧисловыхИдентификаторов.Получить(ЧисловойИдентификаторТипа);
		
	ЭтоСсылочноеЗначение = Ложь;
	ЧастиСсылки = _СтрРазделить(СлужебноеОпределениеСтрокой, ":", Ложь);
	Если ЧастиСсылки.Количество() >= 2
		И СтрДлина(ЧастиСсылки.Получить(1)) = 32 Тогда
		ЭтоСсылочноеЗначение = Истина;
	КонецЕсли;
	
	СлужебноеОпределениеСтрокой = Прав(СлужебноеОпределениеСтрокой, СтрДлина(СлужебноеОпределениеСтрокой) - СтрДлина(СтроковоеОпределениеТипа));
	
	ЗначениеОчереди = Неопределено;
	
	МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ИнформацияОТипе.ИмяМетаданных);
	Если ЭтоСсылочноеЗначение Тогда
		ИдентификаторСсылкиСтрокой = ПреобразоватьСлужебныйИдентификатор(СлужебноеОпределениеСтрокой);	
		ИдентификаторСсылки = Новый УникальныйИдентификатор(ИдентификаторСсылкиСтрокой);
		ЗначениеОчереди = МенеджерОбъекта.ПолучитьСсылку(ИдентификаторСсылки);
	Иначе
		ЗначениеОчереди = ЗначениеИзСтрокиВнутр(СлужебноеОпределениеСтрокой);	
	КонецЕсли;		
	
	Возврат ЗначениеОчереди;
	
КонецФункции

Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = _СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОм = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение "Неизвестный тип объекта метаданных";
	
КонецФункции

Функция ЭтоСсылка(ПроверяемыйТип) Экспорт
	
	Возврат ПроверяемыйТип <> Тип("Неопределено") 
		И ОписаниеТипаВсеСсылки().СодержитТип(ПроверяемыйТип);
	
КонецФункции

Функция ОписаниеТипаВсеСсылки() Экспорт
	
	Возврат Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
		Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
			Справочники.ТипВсеСсылки(),
			Документы.ТипВсеСсылки().Типы()),
			ПланыОбмена.ТипВсеСсылки().Типы()),
			Перечисления.ТипВсеСсылки().Типы()),
			ПланыВидовХарактеристик.ТипВсеСсылки().Типы()),
			ПланыСчетов.ТипВсеСсылки().Типы()),
			ПланыВидовРасчета.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()),
			Задачи.ТипВсеСсылки().Типы());
	
КонецФункции

Функция ПреобразоватьСлужебныйИдентификатор(Знач ИсходныйИдентификатор)
	
	УникальныйИдентификаторСтрокой = Сред(ИсходныйИдентификатор, 25, 8) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 21, 4) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 17, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 1, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 5, 12);	
		
	Если ЭтоУникальныйИдентификатор(УникальныйИдентификаторСтрокой) Тогда
		Возврат Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ЭтоУникальныйИдентификатор(Знач УникальныйИдентификаторСтрокой)
	
	РезультатПроверки = Неопределено;
	
	Попытка
		ПроверочныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
		РезультатПроверки = Истина;
	Исключение
		РезультатПроверки = Ложь;
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция _СтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина) Экспорт
	
	РезультатирующийМассив = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если ВключатьПустые = Ложь
			И НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатирующийМассив.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат РезультатирующийМассив;
	
КонецФункции

Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоиска = "СНачала", Знач НачальнаяПозиция = 1
	, Знач НомерВхождения = 1) Экспорт
	
	ДлинаСтроки = СтрДлина(Строка);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	Если НачальнаяПозиция = 0
		Или НомерВхождения = 0
		Или ДлинаСтроки < НачальнаяПозиция	
		Или (НаправлениеПоиска <> "СНачала" И НаправлениеПоиска <> "СКонца") Тогда
		
		Возврат 0;	
	КонецЕсли; 
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Строка = СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		ОставшаясяЧастьСтроки = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		ОставшаясяЧастьСтроки = Прав(Строка, ДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(ОставшаясяЧастьСтроки, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерТекущегоВхождения = 0;
	Пока НомерТекущегоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(ОставшаясяЧастьСтроки, СтрокаПоиска);
		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки + СтрДлина(Лев(ОставшаясяЧастьСтроки, ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		ОставшаясяЧастьСтроки = Прав(ОставшаясяЧастьСтроки, СтрДлина(ОставшаясяЧастьСтроки) - (ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		НомерТекущегоВхождения = НомерТекущегоВхождения + 1;
		
	КонецЦикла;	
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Возврат ДлинаСтроки - ДлинаПройденнойЧастиСтроки + ДлинаСтрокиПоиска;
	Иначе	
		Возврат ДлинаПройденнойЧастиСтроки + 1 - ДлинаСтрокиПоиска;
	КонецЕсли;
	
КонецФункции

Функция СтрокаЗадомНаперед(Знач Строка) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = _СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = _СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = _СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УбратьСлужебныеСимволы(Знач ИсходнаяСтрока)
	
	ПреобразованаяСтрока = "";	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		КодСимвола = КодСимвола(ТекущийСимвол);
		
		Если КодСимвола = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПреобразованаяСтрока = ПреобразованаяСтрока + ТекущийСимвол;
		
	КонецЦикла;
	
	Возврат ПреобразованаяСтрока;
	
КонецФункции

Функция ИзвлечьЧислоИзСтроки(Знач СтрокаИсходная)
	
	ВсеЦифры = "0123456789";
	
	ЧисловойИдентификаторСтрокой = "";	
	ДлинаСтроки = СтрДлина(СтрокаИсходная);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(СтрокаИсходная, Сч, 1);
		
		Если Найти(ВсеЦифры, ТекущийСимвол) > 0 Тогда
			ЧисловойИдентификаторСтрокой = ЧисловойИдентификаторСтрокой + ТекущийСимвол;
		ИначеЕсли ЗначениеЗаполнено(ЧисловойИдентификаторСтрокой) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧисловойИдентификатор = ПреобразоватьКЧислу(ЧисловойИдентификаторСтрокой);
	
	Возврат ЧисловойИдентификатор;
	
КонецФункции

Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)

	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);

	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);

	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьДанныеОбъектов(МассивВидовМетаданных, ДанныеПолнотекстовогоПоиска)
		
	Для Каждого ВидМетаданных Из МассивВидовМетаданных Цикл		
		
		КоллекцияМетаданных = Метаданные[ВидМетаданных];		
		Для Каждого Мета Из КоллекцияМетаданных Цикл			

			ЗначениеИспользоватьПоиск = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;			
			ОбъектИспользуетПолнотекстовыйПоиск = (Мета.ПолнотекстовыйПоиск = ЗначениеИспользоватьПоиск);
			Если НЕ ОбъектИспользуетПолнотекстовыйПоиск Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьПоляОбъектаПолнотекстовогоПоиска(
				ДанныеПолнотекстовогоПоиска, 
				Мета, 
				ВидМетаданных, 
				Мета.Имя, 
				"Основная", 
				"СтандартныеРеквизиты");
			
			ДобавитьПоляОбъектаПолнотекстовогоПоиска(
				ДанныеПолнотекстовогоПоиска, 
				Мета, 
				ВидМетаданных, 
				Мета.Имя, 
				"Основная", 
				"Реквизиты");
			
			Если ПеременнаяСодержитСвойство(Мета, "ТабличныеЧасти") Тогда
			
				Для Каждого ТабличнаяЧасть Из Мета.ТабличныеЧасти Цикл
					
					ДобавитьПоляОбъектаПолнотекстовогоПоиска(
						ДанныеПолнотекстовогоПоиска, 
						ТабличнаяЧасть, 
						ВидМетаданных, 
						Мета.Имя, 
						"ТабличнаяЧасть." + ТабличнаяЧасть.Имя, 
						"СтандартныеРеквизиты");
					
					ДобавитьПоляОбъектаПолнотекстовогоПоиска(
						ДанныеПолнотекстовогоПоиска, 
						ТабличнаяЧасть, 
						ВидМетаданных, 
						Мета.Имя, 
						"ТабличнаяЧасть." + ТабличнаяЧасть.Имя, 
						"Реквизиты");
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;	
			
КонецПроцедуры

Процедура ДобавитьПоляОбъектаПолнотекстовогоПоиска(ДанныеПолнотекстовогоПоиска, ОбъектМетаданных, ВидМетаданных, ТипОбъекта, ИмяТаблицы, ИмяКоллекцииПолейМетаданных)
	
	Для Каждого Эл Из ОбъектМетаданных[ИмяКоллекцииПолейМетаданных] Цикл				
		
		РеквизитИспользуетПолнотекстовыйПоиск = Эл.ПолнотекстовыйПоиск = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
		Если НЕ РеквизитИспользуетПолнотекстовыйПоиск Тогда
			Продолжить;
		КонецЕсли;				
		
		НовСтр = ДанныеПолнотекстовогоПоиска.Добавить();
		НовСтр.ВидОбъекта = ВидМетаданных;
		НовСтр.ТипОбъекта = ТипОбъекта;
		НовСтр.Таблица = ИмяТаблицы;
		НовСтр.Реквизит = Эл.Имя;			
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИнформациюОФайлахКаталога(ТаблицаФайлов, ПутьККаталогу)
	
	ФайлыПолнотекстовогоИндекса = НайтиФайлы(ПутьККаталогу, "*.*", Истина);	
		
	Для Каждого НайденныйФайл Из ФайлыПолнотекстовогоИндекса Цикл
		
		Если НайденныйФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФайл = ТаблицаФайлов.Добавить();
		СтрокаФайл.ПутьКФайлу = СтрЗаменить(НайденныйФайл.Путь, КаталогПолнотекстовогоИндекса, "");
		СтрокаФайл.ИмяФайла = НайденныйФайл.Имя;		
		СтрокаФайл.ВремяИзменения = НайденныйФайл.ПолучитьВремяИзменения();
		СтрокаФайл.РазмерБайт = НайденныйФайл.Размер();
		СтрокаФайл.РазмерКилобайт = СтрокаФайл.РазмерБайт / 1024;
		СтрокаФайл.РазмерМегабайт = СтрокаФайл.РазмерКилобайт / 1024;
		СтрокаФайл.РазмерГигабайт = СтрокаФайл.РазмерМегабайт / 1024;		
			
	КонецЦикла;
	
КонецПроцедуры

Процедура Инициализация()
	
	ИспользованиеПолнотекстовогоПоискаДоступныеЗначения.Добавить("Использовать", "Использовать");
	ИспользованиеПолнотекстовогоПоискаДоступныеЗначения.Добавить("НеИспользовать", "Не использовать");
	
	РежимПолнотекстовогоПоискаДоступныеЗначеняи.Добавить(РежимПолнотекстовогоПоискаРазрешить());
	РежимПолнотекстовогоПоискаДоступныеЗначеняи.Добавить(РежимПолнотекстовогоПоискаЗапретить());
	
	РежимРазделенияСоставныхСловДоступныеЗначения.Добавить("Авто", "Авто");
	РежимРазделенияСоставныхСловДоступныеЗначения.Добавить("Использовать", "Использовать");
	РежимРазделенияСоставныхСловДоступныеЗначения.Добавить("НеИспользовать", "Не использовать");
	
	ОбновитьИнформациюПолнотекстовогоПоиска(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализация();

#КонецОбласти

#КонецЕсли