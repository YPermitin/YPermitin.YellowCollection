
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ПолноеИмяОбработки = ОбъектНаСервере.Метаданные().ПолноеИмя();	
	
	МассивОписанияФайловДляУдаления = ОбъектНаСервере.МассивОписанияФайловДляУдаленияПередВыгрузкой();
	МаскиУдаленияФайловПередВыгрузкой.ЗагрузитьЗначения(МассивОписанияФайловДляУдаления);
	
	Элементы.НазначениеВыгрузки.СписокВыбора.Добавить(НазначениеНаКлиенте());
	Элементы.НазначениеВыгрузки.СписокВыбора.Добавить(НазначениеНаСервере());	
	НазначениеВыгрузки = НазначениеНаКлиенте();
	
	Элементы.НазначениеЗагрузки.СписокВыбора.Добавить(НазначениеНаКлиенте());
	Элементы.НазначениеЗагрузки.СписокВыбора.Добавить(НазначениеНаСервере());	
	НазначениеЗагрузки = НазначениеНаКлиенте();
	
	Элементы.ГруппаНастройкиПодсистемыДополнительныеОтчетыОбработки.Доступность = Объект.ДоступнаПодсистемаДополнительныеОтчетыИОбработки;
	
	ОбновитьНастройкиФильтровВыгрузки();	
	ЗагрузитьНастройкиФильтров();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	Если Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		
		ОбъектНаСервере.ОбработкаПроверкиЗаполненияПередВыгрузкой(Отказ);
		
	ИначеЕсли Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		
		ОбъектНаСервере.ОбработкаПроверкиЗаполненияПередЗагрузкой(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		
		Элементы.ФормаВыгрузитьВКаталог.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		
		Элементы.ЗагрузитьИзКаталога.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ОсновнойКаталогВыгрузки;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог выгрузки'");
	
	ОписаниеОповещенияВыбораФайла = Новый ОписаниеОповещения("ОсновнойКаталогВыгрузкиНачалоВыбораПродолжение", ЭтаФорма);
	ДиалогОткрытияФайла.Показать(ОписаниеОповещенияВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКаталогВыгрузкиНачалоВыбораПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено
		И ТипЗнч(Результат) = Тип("Массив")
		И Результат.Количество() > 0 Тогда
		
		Объект.ОсновнойКаталогВыгрузки = Результат.Получить(0);		
		
	КонецЕсли;
	   	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойКаталогВыгрузки) Тогда
				
		ОповещениеОткрытияКаталога = Новый ОписаниеОповещения("ОткрытиеКаталогаПродолжение", ЭтаФорма);
		
		НачатьЗапускПриложения(ОповещениеОткрытияКаталога, Объект.ОсновнойКаталогВыгрузки);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеКаталогаПродолжение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Действий не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКаталогЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ОсновнойКаталогЗагрузки;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог загрузки'");
	
	ОписаниеОповещенияВыбораФайла = Новый ОписаниеОповещения("ОсновнойКаталогЗагрузкиНачалоВыбораПродолжение", ЭтаФорма);
	ДиалогОткрытияФайла.Показать(ОписаниеОповещенияВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКаталогЗагрузкиНачалоВыбораПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено
		И ТипЗнч(Результат) = Тип("Массив")
		И Результат.Количество() > 0 Тогда
		
		Объект.ОсновнойКаталогЗагрузки = Результат.Получить(0);		
		
	КонецЕсли;
	   	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКаталогЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойКаталогЗагрузки) Тогда
				
		ОповещениеОткрытияКаталога = Новый ОписаниеОповещения("ОткрытиеКаталогаПродолжение", ЭтаФорма);
		
		НачатьЗапускПриложения(ОповещениеОткрытияКаталога, Объект.ОсновнойКаталогЗагрузки);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьТаблицуВыгрузкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыДляВыгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ОбновитьНастройкиПоАдресуХранилища(ВыбранноеЗначение);	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВКаталог(Команда)
	
	Отказ = Ложь;	
	ОбработкаПроверкиЗаполненияНаКлиенте(Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НазначениеВыгрузки = НазначениеНаКлиенте() Тогда
		КоличествоКУдалению = КоличествоФайловКУдалению(ЭтаФорма);
	ИначеЕсли НазначениеВыгрузки = НазначениеНаСервере() Тогда
		КоличествоКУдалению = КоличествоФайловКУдалениюНаСервере();
	КонецЕсли;
	
	Если КоличествоКУдалению > 0 Тогда
		
		ТекстВопроса = 
			"В каталоге для выгрузки обнаружены файлы,
			|подлежащие удалению:
			|	- Файлы внешних обработок (*.epf)
			|	- Файлы внешних отчетов (*.erf)
			|	- Файл конфигурации 'config.json'
			|
			|При выгрузке эти файлы будут удалены.
			|
			|Продолжить?";
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьВКаталогПродолжение", ЭтаФорма);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
		
		Возврат;
		
	КонецЕсли;	
	
	Если НазначениеВыгрузки = НазначениеНаКлиенте() Тогда
		
		Состояние(НСтр("ru = 'Выгрузка дополнительных отчетов и обработок на клиенте...'"));
		
		ВыгрузитьВКаталогНаКлиенте();
		
	ИначеЕсли НазначениеВыгрузки = НазначениеНаСервере() Тогда
		
		Состояние(НСтр("ru = 'Выгрузка дополнительных отчетов и обработок на сервере...'"));
		
		ВыгрузитьВКаталогНаСервере();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВКаталогПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НазначениеВыгрузки = НазначениеНаКлиенте() Тогда
			
			Состояние(НСтр("ru = 'Выгрузка дополнительных отчетов и обработок на клиенте...'"));
			
			ВыгрузитьВКаталогНаКлиенте();
			
		ИначеЕсли НазначениеВыгрузки = НазначениеНаСервере() Тогда
			
			Состояние(НСтр("ru = 'Выгрузка дополнительных отчетов и обработок на сервере...'"));
			
			ВыгрузитьВКаталогНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКаталога(Команда)
	
	Отказ = Ложь;	
	ОбработкаПроверкиЗаполненияНаКлиенте(Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НазначениеЗагрузки = НазначениеНаКлиенте() Тогда
		
		ЗагрузитьИзКаталогаНаКлиенте();	
		
	ИначеЕсли НазначениеЗагрузки = НазначениеНаСервере() Тогда
				
		ЗагрузитьИзКаталогаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокОбъектовВыгрузки(Команда)
	
	ОбновитьТаблицуВыгрузкиНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеКВыгрузке(Команда)
	
	УстановитьВсеФлажки(Объект.ОбъектыДляВыгрузки, "Выбран", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеСВыгрузки(Команда)
	
	УстановитьВсеФлажки(Объект.ОбъектыДляВыгрузки, "Выбран", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеКВыгрузке(Команда)
	
	ВыделенныеСтроки = Элементы.ОбъектыДляВыгрузки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВсеФлажки(Объект.ОбъектыДляВыгрузки, "Выбран", Истина, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделенныеКВыгрузке(Команда)

	ВыделенныеСтроки = Элементы.ОбъектыДляВыгрузки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВсеФлажки(Объект.ОбъектыДляВыгрузки, "Выбран", Ложь, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеКЗагрузке(Команда)

	ВыделенныеСтроки = Элементы.ОбъектыДляЗагрузки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВсеФлажки(Объект.ОбъектыДляЗагрузки, "Выбран", Истина, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделенныеКЗагрузке(Команда)
	
	ВыделенныеСтроки = Элементы.ОбъектыДляЗагрузки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВсеФлажки(Объект.ОбъектыДляЗагрузки, "Выбран", Ложь, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокОбъектовЗагрузки(Команда)
	
	Если НазначениеЗагрузки = НазначениеНаКлиенте() Тогда
		
		ОбновитьТаблицуЗагрузкиНаКлиенте();	
		
	ИначеЕсли НазначениеЗагрузки = НазначениеНаСервере() Тогда
		
		ОбновитьТаблицуЗагрузкиНаСервере();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеКЗагрузке(Команда)
	
	УстановитьВсеФлажки(Объект.ОбъектыДляЗагрузки, "Выбран", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеСЗагрузки(Команда)
	
	УстановитьВсеФлажки(Объект.ОбъектыДляЗагрузки, "Выбран", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФильтровВыгрузки(Команда)
	
	ПараметрыФильтров = Новый Структура;
	ПараметрыФильтров.Вставить("АдресСхемы", АдресСхемы);
	ПараметрыФильтров.Вставить("АдресНастройкиФильтров", АдресНастройкиФильтров());
	
	ОткрытьФорму(ПолноеИмяОбработки + ".Форма.НастройкиФильтровВыгрузки", 
		ПараметрыФильтров,
		Элементы.ОбъектыДляВыгрузки,
		УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтрВыгрузки(Команда)
	
	ОчиститьФильтрВыгрузкиНаСервере();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОчиститьФильтрВыгрузкиНаСервере()
	
	НастройкиПоУмолчанию = НастройкиФильтровПоУмолчанию();
	ФильтрВыгрузки.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	
	ОбновитьПредставлениеФильтраВыгрузки();
	
	ОбновитьТаблицуВыгрузкиНаСервере();
	
КонецПроцедуры

&НаСервере
Функция МассивСсылокНаОбработкиПоФильтру()
	
	Настройки = ФильтрВыгрузки.ПолучитьНастройки();
	Настройки.Выбор.Элементы.Очистить();
	ПолеДляВывода = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеДляВывода.Использование = Истина;
	ПолеДляВывода.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);

	ТаблицаРезультат = Новый ТаблицаЗначений;
	
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТаблицаРезультат.Количество() > 0 Тогда
	
		Возврат ТаблицаРезультат.ВыгрузитьКолонку("Ссылка");
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьНастройкиПоАдресуХранилища(АдресХранилища)
	
	НастройкиФильтров = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если НастройкиФильтров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрВыгрузки.ЗагрузитьНастройки(НастройкиФильтров);
	
	ОбновитьПредставлениеФильтраВыгрузки();
	
	ОбновитьТаблицуВыгрузкиНаСервере();
	
	СохранитьНастройкиФильтров();
	
КонецПроцедуры

&НаСервере
Функция АдресНастройкиФильтров()
	
	НастройкиФильтров = ФильтрВыгрузки.ПолучитьНастройки();
	
	АдресНастройкиФильтров = ПоместитьВоВременноеХранилище(НастройкиФильтров, УникальныйИдентификатор);
	
	Возврат АдресНастройкиФильтров;
	
КонецФункции

&НаСервере
Процедура ОбновитьНастройкиФильтровВыгрузки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Схема = ОбработкаОбъект.СоздатьСхемуКомпоновкиДляОсновногоСправочника();
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	
	ДоступныеНастройки = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	ФильтрВыгрузки.Инициализировать(ДоступныеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФильтров()
	
	НастройкиФильтров = ФильтрВыгрузки.ПолучитьНастройки();
	
	ХранилищеОбщихНастроек.Сохранить(
		ПолноеИмяОбработки,
		"НастройкиФильтров",
		НастройкиФильтров);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьНастройкиФильтров()
		
	НастройкиФильтров = ХранилищеОбщихНастроек.Загрузить(
		ПолноеИмяОбработки,
		"НастройкиФильтров");
		
	Если НЕ НастройкиФильтров = Неопределено Тогда
		
		ФильтрВыгрузки.ЗагрузитьНастройки(НастройкиФильтров);
		
	Иначе
		
		НастройкиПоУмолчанию = НастройкиФильтровПоУмолчанию();
		
		ФильтрВыгрузки.ЗагрузитьНастройки(НастройкиПоУмолчанию);
		
	КонецЕсли;
	
	ОбновитьПредставлениеФильтраВыгрузки();
	
КонецПроцедуры

&НаСервере
Функция НастройкиФильтровПоУмолчанию()
	
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемы);
	НастройкиПоУмолчанию = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	ЭлементыОтбора = НастройкиПоУмолчанию.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	МетаданныеСправочника = Метаданные.Справочники[Объект.МетаданныеСправочника];
	РеквизитПубликация = МетаданныеСправочника.Реквизиты.Найти("Публикация");
	Если НЕ РеквизитПубликация = Неопределено Тогда
		
		ДоступноПеречислениеПубликация = Ложь;
		
		ТипыРеквизита = РеквизитПубликация.Тип.Типы();
		Если ТипыРеквизита.Количество() > 0 Тогда
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипыРеквизита.Получить(0));
			Если МетаданныеТипа.Имя = "ВариантыПубликацииДополнительныхОтчетовИОбработок"
				И НЕ Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = Неопределено Тогда
				
				ДоступноПеречислениеПубликация = Истина;
				
			КонецЕсли;			
		КонецЕсли;
		
		Если ДоступноПеречислениеПубликация Тогда
			
			УстановитьБезопасныйРежим(Истина);
			
			ЗначениеПубликация = Неопределено;
			Выполнить("ЗначениеПубликация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;");
			
			УстановитьБезопасныйРежим(Ложь);
			
			ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Публикация");
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ПравоеЗначение = ЗначениеПубликация;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат НастройкиПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредставлениеФильтраВыгрузки()
	
	НастройкиФильтров = ФильтрВыгрузки.ПолучитьНастройки();
	
	ЭлементыФильтра = НастройкиФильтров.Отбор.Элементы;
	
	ПредставлениеФильтров = "";
	
	Для Каждого ЭлементФильтра Из ЭлементыФильтра Цикл
		
		ПредставлениеЭлементаФильтра(ЭлементФильтра, ПредставлениеФильтров);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредставлениеФильтров) Тогда
		Элементы.НастройкаФильтровВыгрузки.Заголовок = ПредставлениеФильтров;
	Иначе
		Элементы.НастройкаФильтровВыгрузки.Заголовок = НСтр("ru = 'Фильтр не установлен'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПредставлениеЭлементаФильтра(ЭлементФильтра, ПредставлениеФильтров, УсловиеМеждуЭлементами = "И")
	
	Если ТипЗнч(ЭлементФильтра) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		ПредставлениеЗначения = Строка(ЭлементФильтра.ПравоеЗначение);
		
		ПредставлениеФильтров = ПредставлениеФильтров
			+ ?(ЗначениеЗаполнено(ПредставлениеФильтров), " " + УсловиеМеждуЭлементами + " ", "")
			+ Строка(ЭлементФильтра.ЛевоеЗначение)
			+ " "
			+ ВидСравненияПредставление(ЭлементФильтра.ВидСравнения)
			+ " "
			+ ?(ЗначениеЗаполнено(ПредставлениеЗначения), ПредставлениеЗначения, "''");
		
	ИначеЕсли ТипЗнч(ЭлементФильтра) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
		ПредставлениеФильтров = ПредставлениеФильтров 
			+ ?(ЗначениеЗаполнено(ПредставлениеФильтров), " " + УсловиеМеждуЭлементами + " ", "");
			
		Если ЭлементФильтра.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			УсловиеГруппы = "И";
			ПредставлениеФильтров = ПредставлениеФильтров + "("
		ИначеЕсли ЭлементФильтра.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда 
			УсловиеГруппы = "ИЛИ";			
			ПредставлениеФильтров = ПредставлениеФильтров + "("
		ИначеЕсли ЭлементФильтра.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			УсловиеГруппы = "И";
			ПредставлениеФильтров = ПредставлениеФильтров + "НЕ (";
		КонецЕсли; 
		
		ПредставлениеФильтровГруппы = "";
		
		Для Каждого ПодчиненныйЭлементФильтра Из ЭлементФильтра.Элементы Цикл
			
			ПредставлениеЭлементаФильтра(ПодчиненныйЭлементФильтра, ПредставлениеФильтровГруппы, УсловиеГруппы);
		
		КонецЦикла;
		
		ПредставлениеФильтров = ПредставлениеФильтров
			+ ПредставлениеФильтровГруппы
			+ ")";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидСравненияПредставление(ВидСравненияОтбор)
	
	ПредставлениеОтбора = "";
	
	Если ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Равно Тогда
		ПредставлениеОтбора = "=";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ПредставлениеОтбора = "<>";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		ПредставлениеОтбора = "В ИЕРАРХИИ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		ПредставлениеОтбора = "НЕ В ИЕРАРХИИ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ПредставлениеОтбора = "<";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ПредставлениеОтбора = "<=";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Больше Тогда
		ПредставлениеОтбора = ">";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ПредставлениеОтбора = ">=";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		ПредставлениеОтбора = "В";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		ПредставлениеОтбора = "НЕ В";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Содержит Тогда
		ПредставлениеОтбора = "ПОДОБНО";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		ПредставлениеОтбора = "НЕ ПОДОБНО";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		ПредставлениеОтбора = "Заполнено";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		ПредставлениеОтбора = "НЕ Заполнено";
	КонецЕсли;
	
	Возврат ПредставлениеОтбора;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПроверкиЗаполненияНаКлиенте(Отказ)
	
	ОчиститьСообщения();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлажки(КоллекцияОбъектов, ИмяПоляФлажка, ЗначениеФлажка, ВыделенныеСтроки = Неопределено)
	
	Если ВыделенныеСтроки = Неопределено Тогда
	
		Для Каждого ЭлементКоллекции Из КоллекцияОбъектов Цикл
			
			ЭлементКоллекции[ИмяПоляФлажка] = ЗначениеФлажка;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементКоллекции Из ВыделенныеСтроки Цикл
			
			СтрокаВыделенная = КоллекцияОбъектов.НайтиПоИдентификатору(ЭлементКоллекции);
			Если СтрокаВыделенная = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВыделенная[ИмяПоляФлажка] = ЗначениеФлажка;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НазначениеНаКлиенте()
	
	Возврат НСтр("ru = 'На клиенте'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НазначениеНаСервере()
	
	Возврат НСтр("ru = 'На сервере'");
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуВыгрузкиНаСервере()
	
	ОтборПоОбработкам = МассивСсылокНаОбработкиПоФильтру();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТаблицуВыгрузки(ОтборПоОбработкам);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуЗагрузкиНаКлиентеПослеПроверкиФайла(Существует, ДополнительныеПараметры) Экспорт
	
	ПутьФайлаКонфигурации = ДополнительныеПараметры.ПутьФайлаКонфигурации;
	
	Если Существует = Истина Тогда
	
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ПутьФайлаКонфигурации);
		КонфигурацияЗагрузки = ПрочитатьJSON(ЧтениеJSON, Ложь);
		
		Для Каждого ЭлементЗагрузки Из КонфигурацияЗагрузки.Элементы Цикл
			
			ОбъектЗагрузки = Объект.ОбъектыДляЗагрузки.Добавить();
			ОбъектЗагрузки.Выбран = Истина;
			ОбъектЗагрузки.Представление = ЭлементЗагрузки.Представление;
			ОбъектЗагрузки.Имя = ЭлементЗагрузки.Имя;
			ОбъектЗагрузки.УникальныйИдентификатор = Новый УникальныйИдентификатор(ЭлементЗагрузки.УникальныйИдентификатор);
			ОбъектЗагрузки.Вид = ЭлементЗагрузки.Вид;
			
		КонецЦикла;
		
	Иначе
		
		МассивОбработок = НайтиФайлы(Объект.ОсновнойКаталогВыгрузки, "*.epf");
		МассивОтчет = НайтиФайлы(Объект.ОсновнойКаталогВыгрузки, "*.erf");
		
		Для Каждого ЭлементОбработка Из МассивОбработок Цикл
			
			ОбъектЗагрузки = Объект.ОбъектыДляЗагрузки.Добавить();
			ОбъектЗагрузки.Выбран = Истина;
			ОбъектЗагрузки.Представление = ЭлементОбработка.ИмяБезРасширения;
			ОбъектЗагрузки.Имя = ЭлементОбработка.ИмяБезРасширения;
			ОбъектЗагрузки.УникальныйИдентификатор = Неопределено;
			ОбъектЗагрузки.Вид = "Обработка";			
			
		КонецЦикла;
		
		Для Каждого ЭлементОтчет Из МассивОтчет Цикл
			
			ОбъектЗагрузки = Объект.ОбъектыДляЗагрузки.Добавить();
			ОбъектЗагрузки.Выбран = Истина;
			ОбъектЗагрузки.Представление = ЭлементОтчет.ИмяБезРасширения;
			ОбъектЗагрузки.Имя = ЭлементОтчет.ИмяБезРасширения;
			ОбъектЗагрузки.УникальныйИдентификатор = Неопределено;
			ОбъектЗагрузки.Вид = "Отчет";			
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСсылкиСправочникаТаблицыЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуЗагрузкиНаКлиенте()
	
	Объект.ОбъектыДляЗагрузки.Очистить();
	
	ПутьФайлаКонфигурации = Объект.ОсновнойКаталогЗагрузки
			+ "\"
			+ "config.json";
			
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПутьФайлаКонфигурации", ПутьФайлаКонфигурации);
			
	ОписаниеОповещенияПроверка = Новый ОписаниеОповещения(
		"ОбновитьТаблицуЗагрузкиНаКлиентеПослеПроверкиФайла", 
		ЭтаФорма,
		ДополнительныеПараметры);
			
	ФайлКонфигурации = Новый Файл(ПутьФайлаКонфигурации);
	ФайлКонфигурации.НачатьПроверкуСуществования(ОписаниеОповещенияПроверка);
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗагрузкиНаСервере()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ОбновитьТаблицуЗагрузки();	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКаталогаНаКлиенте()
	
	Для Каждого ЭлементЗагрузки Из Объект.ОбъектыДляЗагрузки Цикл
		
		ЭлементЗагрузки.РезультатОперации = 0;
		
		Если НЕ ЭлементЗагрузки.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтроки = Объект.ОбъектыДляЗагрузки.Индекс(ЭлементЗагрузки);
		
		ПутьФайлаОбъекта = Объект.ОсновнойКаталогЗагрузки
			+ "\"
			+ ПодготовитьИмяФайла(ЭлементЗагрузки.Имя)
			+ "."
			+ ?(ЭлементЗагрузки.Вид = "Обработка", "epf", "erf");
			
		Попытка
			
			ДвоичныеДанныеОбъекта = Новый ДвоичныеДанные(ПутьФайлаОбъекта);
			
			ЗаписатьДанныеОбъектаВХранилище(ДвоичныеДанныеОбъекта, ЭлементЗагрузки.Ссылка, ПутьФайлаОбъекта);
			
			ЭлементЗагрузки.РезультатОперации = 1;
			
		Исключение
			
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = "Произошла непредвиденная ошибка при загрузке:
				|
				|" + ИнформацияОбОшибке;
			
			СообщитьПользователю(
				НСтр("ru = '" + ТекстСообщения + "'"),,
				"ОбъектыДляЗагрузки[" + XMLСтрока(ИндексСтроки) +"].Ссылка",
				"Объект");
				
			ЭлементЗагрузки.РезультатОперации = 2;			
			
		КонецПопытки;
		
	КонецЦикла;
	
	СообщитьОбИтогеЗагрузкиОбработок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеОбъектаВХранилище(ДвоичныеДанныеОбъекта, СсылкаНаОбъект, ПутьФайлаОбъекта)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ЗаписатьДанныеОбъектаВХранилище(ДвоичныеДанныеОбъекта, СсылкаНаОбъект, ПутьФайлаОбъекта);	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзКаталогаНаСервере()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ЗагрузитьИзКаталога();	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
	СообщитьОбИтогеЗагрузкиОбработок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ДвоичныеДанныеОбъекта(СсылкаНаОбъект)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработки.ДвоичныеДанныеОбъекта(СсылкаНаОбъект);
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьВКаталогНаКлиенте()
	
	МаскиУдаляемыхФайлов = МаскиУдаленияФайловПередВыгрузкой.ВыгрузитьЗначения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущийНомерМаскиУдаленияФайлов", 1);
	ДополнительныеПараметры.Вставить("МаскиУдаляемыхФайлов", МаскиУдаляемыхФайлов);
	
	КоличествоМасокУдаляемыхФайлов = ДополнительныеПараметры.МаскиУдаляемыхФайлов.Количество();
	Если КоличествоМасокУдаляемыхФайлов = ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов Тогда
		
		ОписаниеОповещенияУдаления = Новый ОписаниеОповещения("ВыгрузитьВКаталогПослеУдаленияФайлов", ЭтаФорма, ДополнительныеПараметры);
				
	Иначе
			
		ОписаниеОповещенияУдаления = Новый ОписаниеОповещения("ПродолжитьУдалениеФайлов", ЭтаФорма, ДополнительныеПараметры);	
			
	КонецЕсли;
	
	ИндексМаски = ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов - 1;
	ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов = ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов + 1;
	
	НачатьУдалениеФайлов(
		ОписаниеОповещенияУдаления, 
		Объект.ОсновнойКаталогВыгрузки, 
		МаскиУдаляемыхФайлов.Получить(ИндексМаски));
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУдалениеФайлов(ДополнительныеПараметры) Экспорт
	
	КоличествоМасокУдаляемыхФайлов = ДополнительныеПараметры.МаскиУдаляемыхФайлов.Количество();
	Если КоличествоМасокУдаляемыхФайлов = ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов Тогда
		
		ОписаниеОповещенияУдаления = Новый ОписаниеОповещения("ВыгрузитьВКаталогПослеУдаленияФайлов", ЭтаФорма, ДополнительныеПараметры);
				
	Иначе
			
		ОписаниеОповещенияУдаления = Новый ОписаниеОповещения("ПродолжитьУдалениеФайлов", ЭтаФорма, ДополнительныеПараметры);	
			
	КонецЕсли;
	
	МаскиУдаляемыхФайлов = ДополнительныеПараметры.МаскиУдаляемыхФайлов;
	
	ИндексМаски = ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов - 1;
	ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов = ДополнительныеПараметры.ТекущийНомерМаскиУдаленияФайлов + 1;
	
	НачатьУдалениеФайлов(
		ОписаниеОповещенияУдаления, 
		Объект.ОсновнойКаталогВыгрузки, 
		МаскиУдаляемыхФайлов.Получить(ИндексМаски));	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВКаталогПослеУдаленияФайлов(ДополнительныеПараметры) Экспорт
	
	ПутьФайлаКонфигурации = Объект.ОсновнойКаталогВыгрузки
			+ "\"
			+ "config.json";
			
	ДанныеФайлаКонфигурации = Новый Структура;
	ДанныеФайлаКонфигурации.Вставить("ДатаВыгрузки", ТекущаяДата());
	ДанныеФайлаКонфигурации.Вставить("КоличествоОбъектов", Объект.ОбъектыДляВыгрузки.Количество());
	ДанныеФайлаКонфигурации.Вставить("Элементы", Новый Массив);
	
	Попытка
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ПутьФайлаКонфигурации);
		ЗаписатьJSON(ЗаписьJSON, ДанныеФайлаКонфигурации);
		ЗаписьJSON.Закрыть();

	Исключение
		
		ТекстСообщения = "Не удалось инициализировать файл конфигурации выгрузки ''"
			+ ПутьФайлаКонфигурации + "''"
			+ Символы.ПС
			+ "Выгрузка не выполнена.";
				
		СообщитьПользователю(
			НСтр("ru = '" + ТекстСообщения + "'"),,,,);
		
		Возврат;		
		
	КонецПопытки;
	
	Для Каждого СтрокаОбъекта Из Объект.ОбъектыДляВыгрузки Цикл
		
		СтрокаОбъекта.РезультатОперации = 0;
		
		Если НЕ СтрокаОбъекта.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтроки = Объект.ОбъектыДляВыгрузки.Индекс(СтрокаОбъекта);
		
		ПутьФайлаВыгрузки = Объект.ОсновнойКаталогВыгрузки
			+ "\"
			+ ПодготовитьИмяФайла(СтрокаОбъекта.Имя)
			+ "."
			+ ?(СтрокаОбъекта.Вид = "Обработка", "epf", "erf");
			
		Попытка
			
			ДвоичныеОбъектаДляЗаписи = ДвоичныеДанныеОбъекта(СтрокаОбъекта.Ссылка);
			
			Если ДвоичныеОбъектаДляЗаписи = Неопределено Тогда
				
				СообщитьПользователю(
					НСтр("ru = 'Обработка не содержит двоичные данные в хранилище и не была выгружена в каталог.'"),,
					"ОбъектыДляЗагрузки[" + XMLСтрока(ИндексСтроки) +"].Ссылка",
					"Объект");
					
				СтрокаОбъекта.РезультатОперации = 2;
					
			Иначе
				
				ДвоичныеОбъектаДляЗаписи.Записать(ПутьФайлаВыгрузки);
				
				ПараметрыВыгрузкиОбработки = Новый Структура;
				ПараметрыВыгрузкиОбработки.Вставить("Представление", СтрокаОбъекта.Представление);
				ПараметрыВыгрузкиОбработки.Вставить("Имя", СтрокаОбъекта.Имя);
				ПараметрыВыгрузкиОбработки.Вставить("УникальныйИдентификатор", XMLСтрока(СтрокаОбъекта.УникальныйИдентификатор));
				ПараметрыВыгрузкиОбработки.Вставить("Вид", СтрокаОбъекта.Вид);
				ДанныеФайлаКонфигурации.Элементы.Добавить(ПараметрыВыгрузкиОбработки);
				
				СтрокаОбъекта.РезультатОперации = 1;
				
			КонецЕсли;
			
		Исключение
			
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = "Произошла непредвиденная ошибка при выгрузке:
				|
				|" + ИнформацияОбОшибке;
			
			СообщитьПользователю(
				НСтр("ru = '" + ТекстСообщения + "'"),,
				"ОбъектыДляЗагрузки[" + XMLСтрока(ИндексСтроки) +"].Ссылка",
				"Объект");
				
			СтрокаОбъекта.РезультатОперации = 2;			
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ПутьФайлаКонфигурации);
	ЗаписатьJSON(ЗаписьJSON, ДанныеФайлаКонфигурации);
	ЗаписьJSON.Закрыть();
	
	СообщитьОбИтогеВыгрузкиОбработок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВКаталогНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.ВыгрузитьВКаталог();
	ЗначениеВРеквизитФормы(ОбъектНаСервере, "Объект");
	
	СообщитьОбИтогеВыгрузкиОбработок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоФайловКУдалению(Форма)
	
	МаскиУдаленияФайловПередВыгрузкой = Форма.МаскиУдаленияФайловПередВыгрузкой.ВыгрузитьЗначения();
	
	КоличествоФайлов = 0;
	
	Для Каждого МаскаФайлов Из МаскиУдаленияФайловПередВыгрузкой Цикл
		
		НайденныеФайлы = НайтиФайлы(Форма.Объект.ОсновнойКаталогВыгрузки, МаскаФайлов);
		
		КоличествоФайлов = КоличествоФайлов + НайденныеФайлы.Количество();
		
	КонецЦикла;
	
	Возврат КоличествоФайлов;
	
КонецФункции

&НаСервере
Функция КоличествоФайловКУдалениюНаСервере()
	
	Возврат КоличествоФайловКУдалению(ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСсылкиСправочникаТаблицыЗагрузки()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	Для Каждого ЭлементЗагрузки Из Объект.ОбъектыДляЗагрузки Цикл
		
		Если ЗначениеЗаполнено(ЭлементЗагрузки.УникальныйИдентификатор) Тогда
			
			ЭлементЗагрузки.Ссылка = ОбъектНаСервере.СсылкаНаСправочникПоУникальномуИдентификатору(
				ЭлементЗагрузки.УникальныйИдентификатор);
				
		Иначе
			
			РасширениеФайла = ?(ЭлементЗагрузки.Вид = "Обработка", ".epf", ".erf");
			ИмяФайла = ЭлементЗагрузки.Имя + РасширениеФайла;
			ПолноеИмяФайла = Объект.ОсновнойКаталогЗагрузки + "\" + ИмяФайла;			
			ЭлементВнешнийОбъект = Новый Файл(ПолноеИмяФайла);
			
			ОбъектНаСервере.ОпределитьСсылкуНаЭлементСправочника(ЭлементЗагрузки, ЭлементВнешнийОбъект);
						
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьИмяФайла(Знач ИсходноеИмя)
	
    ПодготовленноеИмя = ИсходноеИмя;
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, "\", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, "/", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, ":", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, "*", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, "?", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, """", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, "<", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, ">", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, "|", "");
    ПодготовленноеИмя = СтрЗаменить(ПодготовленноеИмя, "+", "");
    
    Возврат ПодготовленноеИмя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	Сообщение.КлючДанных = КлючДанных;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьОбИтогеВыгрузкиОбработок(Форма)
	
	Объект = Форма.Объект;
	
	КоличествоУспешноВыгружено = 0;
	КоличествоВсего = 0;
	
	Для Каждого СтрокаВыгрузка Из Объект.ОбъектыДляВыгрузки Цикл
		
		Если НЕ СтрокаВыгрузка.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
		Если СтрокаВыгрузка.РезультатОперации = 1 Тогда
			КоличествоУспешноВыгружено = КоличествоУспешноВыгружено + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Успешно выгружено " + XMLСтрока(КоличествоУспешноВыгружено) + " из " + XMLСтрока(КоличествоВсего) + "'");
	
	СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьОбИтогеЗагрузкиОбработок(Форма)
	
	Объект = Форма.Объект;
	
	КоличествоУспешноЗагружено = 0;
	КоличествоВсего = 0;
	
	Для Каждого СтрокаВыгрузка Из Объект.ОбъектыДляЗагрузки Цикл
		
		Если НЕ СтрокаВыгрузка.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
		Если СтрокаВыгрузка.РезультатОперации = 1 Тогда
			КоличествоУспешноЗагружено = КоличествоУспешноЗагружено + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Успешно загружено " + XMLСтрока(КоличествоУспешноЗагружено) + " из " + XMLСтрока(КоличествоВсего) + "'");
	
	СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти