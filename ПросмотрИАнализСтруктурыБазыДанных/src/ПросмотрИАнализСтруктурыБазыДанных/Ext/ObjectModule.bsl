
#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Просмотр и анализ структуры базы данных");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0.4");
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	РегистрационныеДанные.Вставить("Информация", 
		"Отчет ""Просмотр и анализ структуры базы данных"" предназначен для получения информации о внутренней структуре базы данных 
		|в связке с метаданными конфигурации. Поддерживается работа с файловыми базами (ограниченный режим), а также базами на SQL Server и PostgreSQL.");
		
	МассивНазначенийОбработки = НазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	ТаблицаКомандОбработки = ТаблицаКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция НазначениеОбработки() Экспорт 
	
	МассивНазначенийОбработки = Новый Массив;
	 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

Функция ТаблицаКомандОбработки() Экспорт 
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево"));
	
	ДобавитьКоманду(тзКоманд, "ПросмотрИАнализСтруктурыБазыДанных", "Просмотр и анализ структуры базы данных", Ложь, "ОткрытиеФормы", "", Ложь);
	
	Возврат тзКоманд;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	строкаКоманды = ТаблицаКоманд.Добавить();
	строкаКоманды.Идентификатор = Идентификатор;
	строкаКоманды.Представление = Представление;
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	строкаКоманды.Использование = Использование;
	строкаКоманды.Модификатор = Модификатор;
	строкаКоманды.Скрыть = Скрыть;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьСтруктуруМетаданных();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
		
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
	
	СтруктураИсточниковДанных = Новый Структура(
		"ТаблицыХранения, ТаблицыХраненияSQL, ПоляТаблицы, ПоляТаблицыSQL, ПоляТаблицыРасширенные, Индексы, ИндексыРасширенныеSQL, ПоляИндексов", 
		ТекущиеДанныеСтруктурыБазыДанных.ТаблицыХранения,
		ТекущиеДанныеСтруктурыБазыДанных.ТаблицыХраненияSQL,
		ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицы,
		ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицыSQL,
		ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицыРасширенные,
		ТекущиеДанныеСтруктурыБазыДанных.Индексы,
		ТекущиеДанныеСтруктурыБазыДанных.ИндексыРасширенныеSQL,
		ТекущиеДанныеСтруктурыБазыДанных.ПоляИндексов
	);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, СтруктураИсточниковДанных, ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
			
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КоличествоГруппировок = ДокументРезультат.КоличествоУровнейГруппировокСтрок();
	Пока КоличествоГруппировок >= 0 Цикл
		
		ДокументРезультат.ПоказатьУровеньГруппировокСтрок(КоличествоГруппировок);
		
		КоличествоГруппировок = КоличествоГруппировок - 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИсточникДанныхИспользуется(ИмяИсточника) Экспорт
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	НаборДанных = МакетКомпоновки.НаборыДанных.Найти(ИмяИсточника);
	
	Возврат НаборДанных <> Неопределено;
	
КонецФункции

Функция ИсточникДанныхПолучен(Знач СостоянияИсточниковДанныхОтчета = Неопределено, ИмяИсточникаДанных) Экспорт
	
	Если СостоянияИсточниковДанныхОтчета = Неопределено Тогда
		
		ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
		
		СостоянияИсточниковДанныхОтчета = ТекущиеДанныеСтруктурыБазыДанных.СостоянияИсточниковДанныхОтчета;
		
	КонецЕсли;
	
	ИсточникПолучен = СостоянияИсточниковДанныхОтчета.Получить(ИмяИсточникаДанных);
	
	Если ИсточникПолучен = Истина Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьСтруктуруМетаданных() Экспорт
		
	ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
	
	ВыбранаФайловаяСУБД = (ТипСУБД = СписокДоступныхСУБД.Получить(0).Значение);;
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеСтруктурыБазыДанных.СостоянияИсточниковДанныхОтчета;
	
	ТаблицыХранения = ТекущиеДанныеСтруктурыБазыДанных.ТаблицыХранения;
	ПоляТаблицы = ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицы;
	ПоляТаблицыРасширенные = ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицыРасширенные;
	Индексы = ТекущиеДанныеСтруктурыБазыДанных.Индексы;
	ПоляИндексов = ТекущиеДанныеСтруктурыБазыДанных.ПоляИндексов;	
	
	// 1. Получение обязательных источников данных, которые заполняются вне зависимости
	// от настроек отчета.
	
	ТаблицыХраненияяПолучен = ИсточникДанныхПолучен(СостоянияИсточниковДанныхОтчета, "ТаблицыХранения");
	ПоляТаблицыПолучен = ИсточникДанныхПолучен(СостоянияИсточниковДанныхОтчета, "ПоляТаблицы");
	ИндексыПолучен = ИсточникДанныхПолучен(СостоянияИсточниковДанныхОтчета, "Индексы");
	ПоляИндексовПолучен = ИсточникДанныхПолучен(СостоянияИсточниковДанныхОтчета, "ПоляИндексов");
	
	Если ТаблицыХраненияяПолучен = Ложь
		ИЛИ ПоляТаблицыПолучен = Ложь
		ИЛИ ИндексыПолучен = Ложь
		ИЛИ ПоляИндексовПолучен = Ложь Тогда
		
		ТаблицыХранения.Очистить();
		ПоляТаблицы.Очистить();
		Индексы.Очистить();
		ПоляИндексов.Очистить();
		
		ТаблицыХраненияМетаданных = ПолучитьСтруктуруХраненияБазыДанных(, Истина);
		Для Каждого ЭлементХранения Из ТаблицыХраненияМетаданных Цикл
			
			НовСтр = ТекущиеДанныеСтруктурыБазыДанных.ТаблицыХранения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ЭлементХранения);
			НовСтр.ИмяТаблицыХранения = ВРег(НовСтр.ИмяТаблицыХранения);
			
			ЗаполнитьКлассификациюСтроки(НовСтр);
			
			ПорядковыйНомерПоля = 1;
			
			Для Каждого Поля Из ЭлементХранения.Поля Цикл
				
				НовПоле = ПоляТаблицы.Добавить();
				НовПоле.ИмяТаблицыХранения = ВРег(ЭлементХранения.ИмяТаблицыХранения);
				НовПоле.ИмяПоля = Поля.ИмяПоля;
				НовПоле.ИмяПоляХранения = ВРег(Поля.ИмяПоляХранения);
				НовПоле.ПорядковыйНомер = ПорядковыйНомерПоля;
				
				Если НЕ ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
					НовПоле.ИмяПоля = ИмяПоляПоИнформацииОТаблице(НовСтр, НовПоле, ЭлементХранения, Поля);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
					
					ПоискОсновнойТаблицы = ТаблицыХраненияМетаданных.НайтиСтроки(Новый Структура("Метаданные, Назначение", НовСтр.Метаданные, "Основная"));
					Если ПоискОсновнойТаблицы.Количество() = 1 Тогда
						
						Если НЕ ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
							
							ПоискПоляОсновнойТаблицы = ПоискОсновнойТаблицы.Получить(0).Поля
								.НайтиСтроки(Новый Структура("ИмяПоляХранения", Поля.ИмяПоляХранения));							
							Если ПоискПоляОсновнойТаблицы.Количество() = 1 Тогда							
								НовПоле.ИмяПоля = ПоискПоляОсновнойТаблицы.Получить(0).ИмяПоля;							
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
							
							ИзмененноеИмяДляПоиска = СтрЗаменить(Поля.ИмяПоляХранения ,"RRef", "") + "СtRRef";
							ПоискПоляОсновнойТаблицы = ПоискОсновнойТаблицы.Получить(0).Поля
								.НайтиСтроки(Новый Структура("ИмяПоляХранения", ИзмененноеИмяДляПоиска));							
							Если ПоискПоляОсновнойТаблицы.Количество() = 1 Тогда							
								 НайденноеИмяПоля = ПоискПоляОсновнойТаблицы.Получить(0).ИмяПоля;
								 НовПоле.ИмяПоля = Лев(НайденноеИмяПоля, СтрДлина(НайденноеИмяПоля) - 2);
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
						
							ИзмененноеИмяДляПоиска = СтрЗаменить(Поля.ИмяПоляХранения ,"RRef", "") + "DtRRef";
							ПоискПоляОсновнойТаблицы = ПоискОсновнойТаблицы.Получить(0).Поля
								.НайтиСтроки(Новый Структура("ИмяПоляХранения", ИзмененноеИмяДляПоиска));							
							Если ПоискПоляОсновнойТаблицы.Количество() = 1 Тогда							
								 НайденноеИмяПоля = ПоискПоляОсновнойТаблицы.Получить(0).ИмяПоля;
								 НовПоле.ИмяПоля = Лев(НайденноеИмяПоля, СтрДлина(НайденноеИмяПоля) - 2);
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
							
							ИзмененноеИмяДляПоиска = Поля.ИмяПоляХранения + "Сt";
							ПоискПоляОсновнойТаблицы = ПоискОсновнойТаблицы.Получить(0).Поля
								.НайтиСтроки(Новый Структура("ИмяПоляХранения", ИзмененноеИмяДляПоиска));							
							Если ПоискПоляОсновнойТаблицы.Количество() = 1 Тогда							
								 НайденноеИмяПоля = ПоискПоляОсновнойТаблицы.Получить(0).ИмяПоля;
								 НовПоле.ИмяПоля = Лев(НайденноеИмяПоля, СтрДлина(НайденноеИмяПоля) - 2);
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
						
							ИзмененноеИмяДляПоиска = Поля.ИмяПоляХранения + "Dt";
							ПоискПоляОсновнойТаблицы = ПоискОсновнойТаблицы.Получить(0).Поля
								.НайтиСтроки(Новый Структура("ИмяПоляХранения", ИзмененноеИмяДляПоиска));							
							Если ПоискПоляОсновнойТаблицы.Количество() = 1 Тогда							
								 НайденноеИмяПоля = ПоискПоляОсновнойТаблицы.Получить(0).ИмяПоля;
								 НовПоле.ИмяПоля = Лев(НайденноеИмяПоля, СтрДлина(НайденноеИмяПоля) - 2);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовПоле.ИмяПоля) Тогда
				
					ДлинаИмениПоляХранения = СтрДлина(НовПоле.ИмяПоляХранения);
					Если ДлинаИмениПоляХранения > 5 Тогда
						
						Если Сред(НовПоле.ИмяПоляХранения, ДлинаИмениПоляХранения - 3, 4) = "TYPE" Тогда
							НовПоле.ИмяПоля = НовПоле.ИмяПоля + " (вид значения)";	
						ИначеЕсли Сред(НовПоле.ИмяПоляХранения, ДлинаИмениПоляХранения - 4, 6) = "RTREF" Тогда
							НовПоле.ИмяПоля = НовПоле.ИмяПоля + " (тип ссылки)";	
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				ПорядковыйНомерПоля = ПорядковыйНомерПоля + 1;
				
			КонецЦикла;
			
			Для Каждого ЭлементИндекс Из ЭлементХранения.Индексы Цикл
				
				НовИндекс = Индексы.Добавить();
				НовИндекс.ИмяТаблицыХранения = ВРег(ЭлементХранения.ИмяТаблицыХранения);
				НовИндекс.ИмяИндексаХранения = ВРег(ЭлементИндекс.ИмяИндексаХранения);
				НовИндекс.ИмяИндексаХраненияSQL = НовИндекс.ИмяИндексаХранения;
				НовИндекс.Неплатформенный = Ложь;
				НовИндекс.Существует = ВыбранаФайловаяСУБД;
				
				СписокПолейСтрокой = "";
				
				ПорядковыйНомерПоляИндекса = 1;
				
				Для Каждого ПолеИндекса Из ЭлементИндекс.Поля Цикл
					
					НовПолеИндекса = ПоляИндексов.Добавить();
					НовПолеИндекса.ИмяТаблицыХранения = ВРег(ЭлементХранения.ИмяТаблицыХранения);
					НовПолеИндекса.ИмяИндексаХранения = ВРег(НовИндекс.ИмяИндексаХранения);
					НовПолеИндекса.ИмяПоляХранения = ВРег(ПолеИндекса.ИмяПоляХранения);
					НовПолеИндекса.ПорядковыйНомер = ПорядковыйНомерПоляИндекса;
					
					Если НЕ ЗначениеЗаполнено(ПолеИндекса.ИмяПоля) Тогда
						
						СтрукутраПоискаОсновнойТаблицы = Новый Структура(
							"Метаданные, Назначение", 
							ЭлементХранения.Метаданные, "Основная");
						ПоискОсновнойТаблицы = ТаблицыХранения.НайтиСтроки(СтрукутраПоискаОсновнойТаблицы);	
						Если ПоискОсновнойТаблицы.Количество() = 1 Тогда
							
							СтруктураПоискаПолейОсновнойТаблицы = Новый Структура(
								"ИмяТаблицыХранения, ИмяПоляХранения", 
								ПоискОсновнойТаблицы.Получить(0).ИмяТаблицыХранения,
								НовПолеИндекса.ИмяПоляХранения);
							ДанныеПолейОсновнойТаблицы = ПоляТаблицы.НайтиСтроки(СтруктураПоискаПолейОсновнойТаблицы);	
							
							Если ДанныеПолейОсновнойТаблицы.Количество() = 1 Тогда
								
								НовПолеИндекса.ИмяПоля = ДанныеПолейОсновнойТаблицы.Получить(0).ИмяПоля;
								
							КонецЕсли;
							
						КонецЕсли;
						
						ТаблицыХранения.НайтиСтроки(Новый Структура("Метаданные, Назначение", ЭлементХранения.Метаданные, "Основная"))
						
					Иначе
						
						НовПолеИндекса.ИмяПоля = ПолеИндекса.ИмяПоля;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СписокПолейСтрокой) Тогда
						СписокПолейСтрокой = СписокПолейСтрокой + ",";
					КонецЕсли;
					СписокПолейСтрокой = СписокПолейСтрокой + НовПолеИндекса.ИмяПоляХранения;
					
					ПорядковыйНомерПоляИндекса = ПорядковыйНомерПоляИндекса + 1;
					
				КонецЦикла;				
				
				Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
				Хеш.Добавить(ВРег(СписокПолейСтрокой));
				НовИндекс.ХешПолей = ВРег(XMLСтрока(Хеш.ХешСумма));
				
			КонецЦикла;
			
		КонецЦикла;
		
		УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ТаблицыХранения", Истина);
		УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ПоляТаблицы", Истина);
		УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "Индексы", Истина);
		УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ПоляИндексов", Истина);
		
	КонецЕсли;
	
	// 2. Получение дополнительных источников данных
	
	ПоляТаблицыРасширенныеИспользуются = ИсточникДанныхИспользуется("ПоляТаблицыРасширенные");
	ПоляТаблицыРасширенныеПолучен = ИсточникДанныхПолучен(СостоянияИсточниковДанныхОтчета, "ПоляТаблицыРасширенные");
	
	Если ПоляТаблицыРасширенныеИспользуются
		И НЕ ПоляТаблицыРасширенныеПолучен Тогда
		
		ПоляТаблицыРасширенные.Очистить();
		
		Для Каждого ЭлементХранения Из ТаблицыХранения Цикл
			
			ТекущиеМетаданные = Неопределено;
			Если ЗначениеЗаполнено(ЭлементХранения.Метаданные) Тогда
				ТекущиеМетаданные = Метаданные.НайтиПоПолномуИмени(ЭлементХранения.Метаданные);
			КонецЕсли;
			
			СписокПолейТаблицы = ПоляТаблицы.НайтиСтроки(Новый Структура("ИмяТаблицыХранения", ЭлементХранения.ИмяТаблицыХранения));
			
			Для Каждого ПолеТаблицы Из СписокПолейТаблицы Цикл
				
				НовПолеРасширенное = ПоляТаблицыРасширенные.Добавить();
				НовПолеРасширенное.ИмяТаблицыХранения = ВРег(ЭлементХранения.ИмяТаблицыХранения);
				НовПолеРасширенное.ИмяПоляХранения = ВРег(ПолеТаблицы.ИмяПоляХранения);
				
				Если ТекущиеМетаданные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДлинаИмениПоляХранения = СтрДлина(НовПолеРасширенное.ИмяПоляХранения);
				Если ДлинаИмениПоляХранения > 5
					И (Сред(НовПолеРасширенное.ИмяПоляХранения, ДлинаИмениПоляХранения - 3, 4) = "TYPE"
					ИЛИ Сред(НовПолеРасширенное.ИмяПоляХранения, ДлинаИмениПоляХранения - 4, 6) = "RTREF") Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеТипаДляПоля = Неопределено;			
				Если ПеременнаяСодержитСвойство(ТекущиеМетаданные, "Реквизиты") Тогда
					Для Каждого Эл Из ТекущиеМетаданные.Реквизиты Цикл
						Если Эл.Имя = ПолеТаблицы.ИмяПоля Тогда
							ОписаниеТипаДляПоля = Эл.Тип;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ПеременнаяСодержитСвойство(ТекущиеМетаданные, "Ресурсы") Тогда
					Для Каждого Эл Из ТекущиеМетаданные.Ресурсы Цикл
						Если Эл.Имя = ПолеТаблицы.ИмяПоля Тогда
							ОписаниеТипаДляПоля = Эл.Тип;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ПеременнаяСодержитСвойство(ТекущиеМетаданные, "Ресурсы") Тогда
					Для Каждого Эл Из ТекущиеМетаданные.Измерения Цикл
						Если Эл.Имя = ПолеТаблицы.ИмяПоля Тогда
							ОписаниеТипаДляПоля = Эл.Тип;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ПеременнаяСодержитСвойство(ТекущиеМетаданные, "СтандартныеРеквизиты") Тогда
					Для Каждого Эл Из ТекущиеМетаданные.СтандартныеРеквизиты Цикл
						Если Эл.Имя = ПолеТаблицы.ИмяПоля Тогда
							ОписаниеТипаДляПоля = Эл.Тип;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ПеременнаяСодержитСвойство(ТекущиеМетаданные, "Измерения") Тогда
					Для Каждого Эл Из ТекущиеМетаданные.Измерения Цикл
						Если Эл.Имя = ПолеТаблицы.ИмяПоля Тогда
							ОписаниеТипаДляПоля = Эл.Тип;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				НовПолеРасширенное.Тип1С = ПредставлениеОписанияТипов(ОписаниеТипаДляПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
		УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ПоляТаблицыРасширенные", Истина);
		
	КонецЕсли;
			
	СохранитьТекущиеДанныеСтруктурыБазыДанных(ТекущиеДанныеСтруктурыБазыДанных);
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьИнформациюИсточникаДанных(ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, Знач ДополнительнаяИнформация) Экспорт
	
	Если ИмяИсточникаДанных = "ТаблицыХраненияSQL" Тогда
		ДозаполнитьИсточникТаблицыХраненияSQL(ДополнительнаяИнформация);
	ИначеЕсли ИмяИсточникаДанных = "ПоляТаблицыSQL" Тогда
		ДозаполнитьИсточникПоляТаблицыSQL(ДополнительнаяИнформация);
	ИначеЕсли ИмяИсточникаДанных = "Индексы" Тогда
		ДозаполнитьИсточникИндексыSQL(ДополнительнаяИнформация);
	ИначеЕсли ИмяИсточникаДанных = "ИндексыРасширенныеSQL" Тогда
		ДозаполнитьИсточникИндексыРасширенныеSQL(ДополнительнаяИнформация);
	ИначеЕсли ИмяИсточникаДанных = "ПоляИндексов" Тогда
		ДозаполнитьИсточникПоляИндексовSQL(ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеСтруктурыБазыДанных() Экспорт
	
	ТекущиеДанныеСтруктурыБазыДанных = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(ЭтотОбъект.АдресХранилищаДанныхСтруктурыБазыДанных) Тогда
		ТекущиеДанныеСтруктурыБазыДанных = ПолучитьИзВременногоХранилища(ЭтотОбъект.АдресХранилищаДанныхСтруктурыБазыДанных);	
	КонецЕсли;
	
	Если ТекущиеДанныеСтруктурыБазыДанных = Неопределено Тогда
		
		ТекущиеДанныеСтруктурыБазыДанных = Новый Структура;
		
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("СостоянияИсточниковДанныхОтчета", Новый Соответствие);
		
		ДанныеТаблицыХранения = Новый ТаблицаЗначений;
		ДанныеТаблицыХранения.Колонки.Добавить("ВидОбъекта");
		ДанныеТаблицыХранения.Колонки.Добавить("ТипОбъекта");
		ДанныеТаблицыХранения.Колонки.Добавить("ИмяТаблицы");
		ДанныеТаблицыХранения.Колонки.Добавить("Метаданные");
		ДанныеТаблицыХранения.Колонки.Добавить("Назначение");
		ДанныеТаблицыХранения.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеТаблицыХранения.Индексы.Добавить("ИмяТаблицыХранения");
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("ТаблицыХранения", ДанныеТаблицыХранения);
		
		ДанныеТаблицыХраненияSQL = Новый ТаблицаЗначений;
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("КоличествоСтрок");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("РазмерДанных");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("РазмерИндексов");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("Зарезервировано");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("Свободно");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("НеиспользуемаяТаблица");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("НеиспользуемаяТаблица_ОшибкаРеструктуризации");
		ДанныеТаблицыХраненияSQL.Колонки.Добавить("НеиспользуемаяТаблица_НетЗаписей");
		ДанныеТаблицыХраненияSQL.Индексы.Добавить("ИмяТаблицыХранения");		
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("ТаблицыХраненияSQL", ДанныеТаблицыХраненияSQL);
		
		ДанныеПоляТаблицы = Новый ТаблицаЗначений;
		ДанныеПоляТаблицы.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеПоляТаблицы.Колонки.Добавить("ИмяПоляХранения");
		ДанныеПоляТаблицы.Колонки.Добавить("ИмяПоля");			
		ДанныеПоляТаблицы.Колонки.Добавить("ПорядковыйНомер");
		ДанныеПоляТаблицы.Индексы.Добавить("ИмяТаблицыХранения, ИмяПоляХранения");		
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("ПоляТаблицы", ДанныеПоляТаблицы);		
		
		ДанныеПоляТаблицыSQL = Новый ТаблицаЗначений;
		ДанныеПоляТаблицыSQL.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеПоляТаблицыSQL.Колонки.Добавить("ИмяПоляХранения");
		ДанныеПоляТаблицыSQL.Колонки.Добавить("ИмяСхемы");
		ДанныеПоляТаблицыSQL.Колонки.Добавить("ПорядковыйНомер");
		ДанныеПоляТаблицыSQL.Колонки.Добавить("ТипSQL");
		ДанныеПоляТаблицыSQL.Колонки.Добавить("ДопустимоЗначениеNULL");
		ДанныеПоляТаблицыSQL.Индексы.Добавить("ИмяТаблицыХранения, ИмяПоляХранения");
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("ПоляТаблицыSQL", ДанныеПоляТаблицыSQL);
		
		ДанныеИндексы = Новый ТаблицаЗначений;
		ДанныеИндексы.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеИндексы.Колонки.Добавить("ИмяИндексаХранения");
		ДанныеИндексы.Колонки.Добавить("Существует");
		ДанныеИндексы.Колонки.Добавить("Неплатформенный");
		ДанныеИндексы.Колонки.Добавить("ХешПолей");
		ДанныеИндексы.Колонки.Добавить("ИмяИндексаХраненияSQL");
		ДанныеИндексы.Индексы.Добавить("ИмяТаблицыХранения, ИмяИндексаХранения");
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("Индексы", ДанныеИндексы);
		
		ДанныеИндексыРасширенныеSQL = Новый ТаблицаЗначений;
		ДанныеИндексыРасширенныеSQL.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеИндексыРасширенныеSQL.Колонки.Добавить("ИмяИндексаХранения");
		ДанныеИндексыРасширенныеSQL.Колонки.Добавить("Размер");
		ДанныеИндексыРасширенныеSQL.Колонки.Добавить("Уникальный");
		ДанныеИндексыРасширенныеSQL.Индексы.Добавить("ИмяТаблицыХранения, ИмяИндексаХранения");
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("ИндексыРасширенныеSQL", ДанныеИндексыРасширенныеSQL);
		
		ДанныеПоляИндексов = Новый ТаблицаЗначений;
		ДанныеПоляИндексов.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеПоляИндексов.Колонки.Добавить("ИмяИндексаХранения");	
		ДанныеПоляИндексов.Колонки.Добавить("ИмяПоляХранения");	
		ДанныеПоляИндексов.Колонки.Добавить("ИмяПоля");
		ДанныеПоляИндексов.Колонки.Добавить("ПорядковыйНомер");
		ДанныеПоляИндексов.Индексы.Добавить("ИмяТаблицыХранения, ИмяИндексаХранения, ИмяПоляХранения");
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("ПоляИндексов", ДанныеПоляИндексов);
		
		ДанныеПоляТаблицыРасширенные = Новый ТаблицаЗначений;
		ДанныеПоляТаблицыРасширенные.Колонки.Добавить("ИмяТаблицыХранения");
		ДанныеПоляТаблицыРасширенные.Колонки.Добавить("ИмяПоляХранения");
		ДанныеПоляТаблицыРасширенные.Колонки.Добавить("Тип1С");
		ДанныеПоляТаблицыРасширенные.Индексы.Добавить("ИмяТаблицыХранения, ИмяПоляХранения");
		ТекущиеДанныеСтруктурыБазыДанных.Вставить("ПоляТаблицыРасширенные", ДанныеПоляТаблицыРасширенные);
		
	КонецЕсли;
	
	Возврат ТекущиеДанныеСтруктурыБазыДанных;
	
КонецФункции

Процедура ДозаполнитьИсточникТаблицыХраненияSQL(Знач ДополнительнаяИнформация)
	
	ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
	
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеСтруктурыБазыДанных.СостоянияИсточниковДанныхОтчета;
	
	ТаблицыХранения = ТекущиеДанныеСтруктурыБазыДанных.ТаблицыХранения;
	ТаблицыХраненияSQL = ТекущиеДанныеСтруктурыБазыДанных.ТаблицыХраненияSQL;
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформация Цикл
		
		МассивСтрок = ТаблицыХранения.НайтиСтроки(Новый Структура("ИмяТаблицыХранения", ВРег(СтрокаИнформации.ИмяТаблицыХранения)));	
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			НовСтр = ТаблицыХранения.Добавить();
			НовСтр.ИмяТаблицыХранения = ВРег(СтрокаИнформации.ИмяТаблицыХранения);
			
			Если НЕ ЗначениеЗаполнено(НовСтр.Метаданные) Тогда
				
				Если ЭтоТаблицаПослеОшибкиРеструктуризации(НовСтр) Тогда
					
					ИмяТаблицыХраненияБезПостфикса = Лев(НовСтр.ИмяТаблицыХранения, СтрДлина(НовСтр.ИмяТаблицыХранения) - 2);
					ПоискМетаданных = ТаблицыХранения.НайтиСтроки(Новый Структура("ИмяТаблицыХранения", ИмяТаблицыХраненияБезПостфикса));
					
					Если ПоискМетаданных.Количество() > 0 Тогда
						
						ЗаписьМетаданные = ПоискМетаданных.Получить(0);
						НовСтр.ИмяТаблицы = ЗаписьМетаданные.ИмяТаблицы;
						НовСтр.Метаданные = ЗаписьМетаданные.Метаданные;
						НовСтр.Назначение = ЗаписьМетаданные.Назначение;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьКлассификациюСтроки(НовСтр);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементХранения Из ТаблицыХранения Цикл
		
		НовСтр = ТаблицыХраненияSQL.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ЭлементХранения);
		
	КонецЦикла;
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформация Цикл
	
		МассивСтрок = ТаблицыХраненияSQL.НайтиСтроки(Новый Структура("ИмяТаблицыХранения", ВРег(СтрокаИнформации.ИмяТаблицыХранения)));
		
		Для каждого СтрокаДанных из МассивСтрок Цикл
			
			СтрокаДанных.КоличествоСтрок = СтрокаИнформации.КоличествоСтрок; 
			СтрокаДанных.Зарезервировано = СтрокаИнформации.Зарезервировано;
			СтрокаДанных.РазмерДанных = СтрокаИнформации.РазмерДанных;
			СтрокаДанных.РазмерИндексов = СтрокаИнформации.РазмерИндексов;
			СтрокаДанных.Свободно = СтрокаИнформации.Свободно;
			
			СтрокаДанных.НеиспользуемаяТаблица_ОшибкаРеструктуризации = ЭтоТаблицаПослеОшибкиРеструктуризации(СтрокаДанных);
			СтрокаДанных.НеиспользуемаяТаблица_НетЗаписей = (СтрокаДанных.КоличествоСтрок = 0);
			
			СтрокаДанных.НеиспользуемаяТаблица = 
				СтрокаДанных.НеиспользуемаяТаблица_ОшибкаРеструктуризации
				ИЛИ СтрокаДанных.НеиспользуемаяТаблица_НетЗаписей;			
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ТаблицыХраненияSQL", Истина);
	
	СохранитьТекущиеДанныеСтруктурыБазыДанных(ТекущиеДанныеСтруктурыБазыДанных);
	
КонецПроцедуры

Процедура ДозаполнитьИсточникПоляТаблицыSQL(Знач ДополнительнаяИнформация)
	
	ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
	
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеСтруктурыБазыДанных.СостоянияИсточниковДанныхОтчета;
	
	ПоляТаблицы = ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицы;
	ПоляТаблицыРасширенные = ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицыРасширенные;
	ПоляТаблицыSQL = ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицыSQL;
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформация Цикл
		
		ИмяТаблицыХранения = ВРег(СтрокаИнформации.ИмяТаблицыХранения);
		ИмяПоляХранения = ВРег(СтрокаИнформации.ИмяПоляХранения);
		
		МассивСтрок = ПоляТаблицы.НайтиСтроки(Новый Структура("ИмяТаблицыХранения, ИмяПоляХранения", ИмяТаблицыХранения, ИмяПоляХранения));
		Если МассивСтрок.Количество() = 0 Тогда
			
			НовСтр = ПоляТаблицы.Добавить();
			НовСтр.ИмяТаблицыХранения = ИмяТаблицыХранения;
			НовСтр.ИмяПоляХранения = ИмяПоляХранения;
			
		КонецЕсли;
		
		МассивСтрок = ПоляТаблицыРасширенные.НайтиСтроки(Новый Структура("ИмяТаблицыХранения, ИмяПоляХранения", ИмяТаблицыХранения, ИмяПоляХранения));
		Если МассивСтрок.Количество() = 0 Тогда
			
			НовСтр = ПоляТаблицыРасширенные.Добавить();
			НовСтр.ИмяТаблицыХранения = ИмяТаблицыХранения;
			НовСтр.ИмяПоляХранения = ИмяПоляХранения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформация Цикл
	
		НовПолеSQL = ПоляТаблицыSQL.Добавить();	
		НовПолеSQL.ИмяТаблицыХранения = ВРег(СтрокаИнформации.ИмяТаблицыХранения);
		НовПолеSQL.ИмяПоляХранения = ВРег(СтрокаИнформации.ИмяПоляХранения);
		НовПолеSQL.ИмяСхемы = ВРег(СтрокаИнформации.ИмяСхемы);
		НовПолеSQL.ПорядковыйНомер = СтрокаИнформации.ПорядковыйНомер;
		
		НовПолеSQL.ТипSQL = "";
		Если ЗначениеЗаполнено(СтрокаИнформации.ТипSQL) Тогда
			НовПолеSQL.ТипSQL = СтрокаИнформации.ТипSQL;
			Если ЗначениеЗаполнено(СтрокаИнформации.Длина) Тогда
				
				НовПолеSQL.ТипSQL = НовПолеSQL.ТипSQL + "(" + XMLСтрока(СтрокаИнформации.Длина) + ")";
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаИнформации.Разрядность)
				И ЗначениеЗаполнено(СтрокаИнформации.РазрядностьДробнойЧасти) Тогда
				
				НовПолеSQL.ТипSQL = НовПолеSQL.ТипSQL 
					+ "(" + XMLСтрока(СтрокаИнформации.Разрядность) + "," 
					+ XMLСтрока(СтрокаИнформации.РазрядностьДробнойЧасти) + ")";
				
			КонецЕсли;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.ДопустимNULL) = "YES"
			ИЛИ СтрокаИнформации.ДопустимNULL = 1
			ИЛИ СтрокаИнформации.ДопустимNULL = Истина Тогда
			НовПолеSQL.ДопустимоЗначениеNULL = Истина;
		Иначе
			НовПолеSQL.ДопустимоЗначениеNULL = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ПоляТаблицыSQL", Истина);
	
	СохранитьТекущиеДанныеСтруктурыБазыДанных(ТекущиеДанныеСтруктурыБазыДанных);
	
КонецПроцедуры

Процедура ДозаполнитьИсточникИндексыSQL(Знач ДополнительнаяИнформация)
	
	ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
	
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеСтруктурыБазыДанных.СостоянияИсточниковДанныхОтчета;
	
	Индексы = ТекущиеДанныеСтруктурыБазыДанных.Индексы;
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформация Цикл
		
		Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
		Хеш.Добавить(ВРег(СтрокаИнформации.ХешПолей));
		ХешПолей = ВРег(XMLСтрока(Хеш.ХешСумма));
		
		СтрукутраПоиска = Новый Структура(
			"ИмяТаблицыХранения, ХешПолей", 
			ВРег(СтрокаИнформации.ИмяТаблицыХранения), ВРег(ХешПолей));
		
		НайденныеСтроки = Индексы.НайтиСтроки(СтрукутраПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИндекса = НайденныеСтроки.Получить(0);
			СтрокаИндекса.ИмяИндексаХраненияSQL = ВРег(СтрокаИнформации.ИмяИндексаХранения);
			СтрокаИндекса.Существует = Истина;
			СтрокаИндекса.Неплатформенный = Ложь;			
			
		Иначе
			
			СтрокаИндекса = Индексы.Добавить();
			СтрокаИндекса.ИмяТаблицыХранения = ВРег(СтрокаИнформации.ИмяТаблицыХранения);
			СтрокаИндекса.ИмяИндексаХранения = ВРег(СтрокаИнформации.ИмяИндексаХранения);
			СтрокаИндекса.ИмяИндексаХраненияSQL = ВРег(СтрокаИнформации.ИмяИндексаХранения);
		    СтрокаИндекса.ХешПолей = ВРег(ХешПолей);
			СтрокаИндекса.Существует = Истина;
			СтрокаИндекса.Неплатформенный = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ИндексыSQL", Истина);
	
	СохранитьТекущиеДанныеСтруктурыБазыДанных(ТекущиеДанныеСтруктурыБазыДанных);
	
КонецПроцедуры

Процедура ДозаполнитьИсточникИндексыРасширенныеSQL(Знач ДополнительнаяИнформация)
	
	ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
	
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеСтруктурыБазыДанных.СостоянияИсточниковДанныхОтчета;
	
	ИндексыРасширенныеSQL = ТекущиеДанныеСтруктурыБазыДанных.ИндексыРасширенныеSQL;
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформация Цикл
		
		НовСтр = ИндексыРасширенныеSQL.Добавить();
		НовСтр.ИмяТаблицыХранения = ВРег(СтрокаИнформации.ИмяТаблицыХранения);
		НовСтр.ИмяИндексаХранения = ВРег(СтрокаИнформации.ИмяИндексаХранения);
		НовСтр.Размер = СтрокаИнформации.Размер;
		
		Если СтрокаИнформации.Уникальный = 1
			ИЛИ СтрокаИнформации.Уникальный = "1"
			ИЛИ СтрокаИнформации.Уникальный = Истина Тогда
			
			НовСтр.Уникальный = Истина;
			
		Иначе
			
			НовСтр.Уникальный = Ложь;
			
		КонецЕсли;
				
	КонецЦикла;
	
	УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ИндексыРасширенныеSQL", Истина);
	
	СохранитьТекущиеДанныеСтруктурыБазыДанных(ТекущиеДанныеСтруктурыБазыДанных);
	
КонецПроцедуры

Процедура ДозаполнитьИсточникПоляИндексовSQL(Знач ДополнительнаяИнформация)
	
	ТекущиеДанныеСтруктурыБазыДанных = ДанныеСтруктурыБазыДанных();
	
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеСтруктурыБазыДанных.СостоянияИсточниковДанныхОтчета;
	
	Индексы = ТекущиеДанныеСтруктурыБазыДанных.Индексы;
	ПоляТаблицы = ТекущиеДанныеСтруктурыБазыДанных.ПоляТаблицы;
	ПоляИндексов = ТекущиеДанныеСтруктурыБазыДанных.ПоляИндексов;	
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформация Цикл
		
		ИмяТаблицыХраненияПоиск = ВРег(СтрокаИнформации.ИмяТаблицыХранения);
		ИмяПоляХраненияПоиск = ВРег(СтрокаИнформации.ИмяПоляХранения);
		ИмяИндексаХраненияSQLПоиск = ВРег(СтрокаИнформации.ИмяИндексаХранения);
		
		СтруктураПоискаИнформацииОИндексе = Новый Структура(
			"ИмяТаблицыХранения, ИмяИндексаХраненияSQL",
			ИмяТаблицыХраненияПоиск, ИмяИндексаХраненияSQLПоиск);
		ПоискИнформацииОИндексе = Индексы.НайтиСтроки(СтруктураПоискаИнформацииОИндексе);
		Если ПоискИнформацииОИндексе.Количество() = 1 Тогда
			ИмяИндексаХраненияПоиск = ПоискИнформацииОИндексе.Получить(0).ИмяИндексаХранения;
		Иначе
			ИмяИндексаХраненияПоиск = ИмяИндексаХраненияПоиск;
		КонецЕсли;
		
		СтрукутраПоиска = Новый Структура(
			"ИмяТаблицыХранения, ИмяИндексаХранения, ИмяПоляХранения", 
			ИмяТаблицыХраненияПоиск, ИмяИндексаХраненияПоиск, ИмяПоляХраненияПоиск);
		
		НайденныеСтроки = ПоляИндексов.НайтиСтроки(СтрукутраПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИндекса = НайденныеСтроки.Получить(0);			
			СтрокаИндекса.ПорядковыйНомер = СтрокаИнформации.ПорядковыйНомер;			
			
		Иначе
			
			СтрокаИндекса = ПоляИндексов.Добавить();
			СтрокаИндекса.ИмяТаблицыХранения = ВРег(СтрокаИнформации.ИмяТаблицыХранения);
			СтрокаИндекса.ИмяИндексаХранения = ВРег(СтрокаИнформации.ИмяИндексаХранения);
			СтрокаИндекса.ИмяПоляХранения = ВРег(СтрокаИнформации.ИмяПоляХранения);
			СтрокаИндекса.ПорядковыйНомер = СтрокаИнформации.ПорядковыйНомер;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаИндекса.ИмяПоля) Тогда
			
			СтрокаПоискаПоля = Новый Структура(
				"ИмяТаблицыХранения, ИмяПоляХранения",
				ВРег(СтрокаИндекса.ИмяТаблицыХранения), ВРег(СтрокаИндекса.ИмяПоляХранения));
				
			НайденныеПоля = ПоляТаблицы.НайтиСтроки(СтрокаПоискаПоля);	
			Если НайденныеПоля.Количество() > 0 Тогда
				НайденноеПоля = НайденныеПоля.Получить(0);
				
				СтрокаИндекса.ИмяПоля = НайденноеПоля.ИмяПоля;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ПоляИндексовSQL", Истина);
	
	СохранитьТекущиеДанныеСтруктурыБазыДанных(ТекущиеДанныеСтруктурыБазыДанных);
	
КонецПроцедуры

Процедура СохранитьТекущиеДанныеСтруктурыБазыДанных(ДанныеДляСохранения)
	
	АдресХранилищаДанныхСтруктурыБазыДанных = ПоместитьВоВременноеХранилище(ДанныеДляСохранения, ИдентификаторОтчета);
	
КонецПроцедуры

Процедура УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, ИмяИсточника, ФлагПолучен)
	
	СостоянияИсточниковДанныхОтчета.Вставить(ИмяИсточника, ФлагПолучен);
	
КонецПроцедуры

Функция ТипСУБДПоУмолчанию()
	
	Если ЭтоФайловаяБаза() Тогда
		
		Возврат СписокДоступныхСУБД.Получить(0);
		
	Иначе
		
		Возврат СписокДоступныхСУБД.Получить(1); 
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСписокДоступныхСУБД()
	
	СписокДоступныхСУБД = Новый СписокЗначений;
	
	СписокДоступныхСУБД.Добавить("Файловая", "Файловая");
	СписокДоступныхСУБД.Добавить("SQLServer", "SQLServer");
	СписокДоступныхСУБД.Добавить("PostgreSQL", "PostgreSQL");
		
КонецПроцедуры

Процедура ЗаполнитьКлассификациюСтроки(СтрокаОписания)

	Если НЕ ЗначениеЗаполнено(СтрокаОписания.Метаданные) Тогда
		
		Если СтрокаОписания.Назначение = "ХранилищеСистемныхНастроек"
			ИЛИ СтрокаОписания.Назначение = "ХранилищеОбщихНастроек"
			ИЛИ СтрокаОписания.Назначение = "ХранилищеПользовательскихНастроекОтчетов"
			ИЛИ СтрокаОписания.Назначение = "ХранилищеВариантовОтчетов"
			ИЛИ СтрокаОписания.Назначение = "ХранилищеНастроекДанныхФорм"
			ИЛИ СтрокаОписания.Назначение = "ХранилищеПользовательскихНастроекДинамическихСписков" Тогда
			
			СтрокаОписания.ВидОбъекта = "Общие";
			СтрокаОписания.ТипОбъекта = "ХранилищеНастроек";
			
		ИначеЕсли СтрокаОписания.Назначение = "НастройкиСтандартногоИнтерфейсаOData" Тогда
			
			СтрокаОписания.ВидОбъекта = "Общие";
			СтрокаОписания.ТипОбъекта = "НастройкаМеханизмовИнтеграции";
			
		ИначеЕсли СтрокаОписания.Назначение = "РегистрацияИзмененийКонфигурации"
			ИЛИ СтрокаОписания.Назначение = "РегистрацияИзмененийВнешнихСвойствКонфигурации" Тогда
			
			СтрокаОписания.ВидОбъекта = "Общие";
			СтрокаОписания.ТипОбъекта = "ИзмененияКонфигурации";
			
		ИначеЕсли СтрокаОписания.ИмяТаблицыХранения = ВРег("_ExtensionsInfoNGS")
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = ВРег("_ExtensionsRestruct")
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = ВРег("_ExtensionsRestructNGS")
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = ВРег("_ExtensionsInfo") Тогда
			
			СтрокаОписания.ВидОбъекта = "Общие";
			СтрокаОписания.ТипОбъекта = "РасширенияКонфигурации";
			
		ИначеЕсли СтрокаОписания.Назначение = "НастройкиПлановВидовРасчетов"
			ИЛИ СтрокаОписания.Назначение = "НастройкиСправочников"
			ИЛИ СтрокаОписания.Назначение = "НастройкиПлановВидовХарактеристик"
			ИЛИ СтрокаОписания.Назначение = "НастройкиПлановСчетов" Тогда
			
			СтрокаОписания.ВидОбъекта = "Общие";
			СтрокаОписания.ТипОбъекта = "НастройкиМетаданных";
			
		ИначеЕсли СтрокаОписания.Назначение = "НастройкиХраненияИтоговРегистраСведений"
			ИЛИ СтрокаОписания.Назначение = "КодыИзмеренийАгрегатовРегистровНакопления" Тогда
			
			СтрокаОписания.ВидОбъекта = "Общие";
			СтрокаОписания.ТипОбъекта = "НастройкиИтоговИАгрегатов";
			
		ИначеЕсли СтрокаОписания.ИмяТаблицыХранения = "CONFIG"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "PARAMS"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "SCHEMASTORAGE"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "FILES"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "V8USERS"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "CONFIGCAS"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "CONFIGSAVE"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "DBSCHEMA"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "_YEAROFFSET"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "CONFIGCASSAVE"
			ИЛИ СтрокаОписания.ИмяТаблицыХранения = "IBVERSION" Тогда 
			
			СтрокаОписания.ВидОбъекта = "Системные";
			СтрокаОписания.ТипОбъекта = "Системные";
			
		ИначеЕсли СтрокаОписания.Назначение = "ВерсииИсторииДанных"
			ИЛИ СтрокаОписания.Назначение = "МетаданныеИсторииДанных"
			ИЛИ СтрокаОписания.Назначение = "НастройкиИсторииДанных"
			ИЛИ СтрокаОписания.Назначение = "ОчередьИсторииДанных"
			ИЛИ Сред(СтрокаОписания.ИмяТаблицыХранения, 1, 26)  = "_DATAHISTORYLATESTVERSIONS" Тогда 
			
			СтрокаОписания.ВидОбъекта = "История";
			СтрокаОписания.ТипОбъекта = "ИсторияДанных";
			
		ИначеЕсли СтрокаОписания.Назначение = "ИсторияРаботыПользователей" Тогда 
			
			СтрокаОписания.ВидОбъекта = "История";
			СтрокаОписания.ТипОбъекта = "ИсторияДействий";
			
		Иначе
			
			СтрокаОписания.ВидОбъекта = "Неопределен";
			СтрокаОписания.ТипОбъекта = "Неопределен";
			
		КонецЕсли;
		
	Иначе
	
		ЧастиПолногоИмени = РазложитьСтрокуВМассивПодстрок(СтрокаОписания.Метаданные, ".");
		Если ЧастиПолногоИмени.Количество() > 1 Тогда
			
			СтрокаОписания.ВидОбъекта = ЧастиПолногоИмени.Получить(0);	
			СтрокаОписания.ТипОбъекта = ЧастиПолногоИмени.Получить(1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеОписанияТипов(ОписаниеТипа)
	
	ПредставлениеТипа = "";
	
	Если ОписаниеТипа = Неопределено Тогда
		Возврат ПредставлениеТипа;
	КонецЕсли;
	
	ВходящиеТипы = ОписаниеТипа.Типы();
	Для Каждого ВходящийТип ИЗ ВходящиеТипы Цикл
		
		Если ЗначениеЗаполнено(ПредставлениеТипа) Тогда
			ПредставлениеТипа = ПредставлениеТипа + Символы.ПС;	
		КонецЕсли;
		
		Если ВходящийТип = Тип("Строка") Тогда
			
			ДлинаСтроки = ОписаниеТипа.КвалификаторыСтроки.Длина;
			
			ПредставлениеТипа = ПредставлениеТипа + "Строка(" + XMLСтрока(ДлинаСтроки) + ")";
			
		ИначеЕсли ВходящийТип = Тип("Дата") Тогда
			
			ТипДаты = ОписаниеТипа.КвалификаторыДаты.ЧастиДаты;
			
			ПредставлениеТипа = ПредставлениеТипа + "Дата(" + XMLСтрока(ТипДаты) + ")";
			
		ИначеЕсли ВходящийТип = Тип("Число") Тогда
			
			ОписаниеЧисла = ОписаниеТипа.КвалификаторыЧисла;
			
			ПредставлениеТипа = ПредставлениеТипа + "Число(" 
				+ XMLСтрока(ОписаниеЧисла.Разрядность) + "," 
				+ XMLСтрока(ОписаниеЧисла.РазрядностьДробнойЧасти) + ")";
			
		ИначеЕсли ВходящийТип = Тип("Булево")
			ИЛИ ВходящийТип = Тип("ХранилищеЗначения") Тогда
			
			ПредставлениеТипа = Строка(ВходящийТип);
			
		Иначе
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ВходящийТип);
			Если НЕ МетаданныеТипа = Неопределено Тогда
				
				ПредставлениеТипа = ПредставлениеТипа + МетаданныеТипа.ПолноеИмя();
				
			Иначе
				
				ПредставлениеТипа = ПредставлениеТипа + Строка(ВходящийТип);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставлениеТипа;
	
КонецФункции

Функция ЭтоФайловаяБаза()
	
	СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = _СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = _СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = _СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)

	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);

	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);

	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция _СтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина) Экспорт
	
	РезультатирующийМассив = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если ВключатьПустые = Ложь
			И НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатирующийМассив.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат РезультатирующийМассив;
	
КонецФункции

Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоиска = "СНачала", Знач НачальнаяПозиция = 1
	, Знач НомерВхождения = 1) Экспорт
	
	ДлинаСтроки = СтрДлина(Строка);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	Если НачальнаяПозиция = 0
		Или НомерВхождения = 0
		Или ДлинаСтроки < НачальнаяПозиция	
		Или (НаправлениеПоиска <> "СНачала" И НаправлениеПоиска <> "СКонца") Тогда
		
		Возврат 0;	
	КонецЕсли; 
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Строка = СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		ОставшаясяЧастьСтроки = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		ОставшаясяЧастьСтроки = Прав(Строка, ДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(ОставшаясяЧастьСтроки, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерТекущегоВхождения = 0;
	Пока НомерТекущегоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(ОставшаясяЧастьСтроки, СтрокаПоиска);
		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки + СтрДлина(Лев(ОставшаясяЧастьСтроки, ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		ОставшаясяЧастьСтроки = Прав(ОставшаясяЧастьСтроки, СтрДлина(ОставшаясяЧастьСтроки) - (ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		НомерТекущегоВхождения = НомерТекущегоВхождения + 1;
		
	КонецЦикла;	
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Возврат ДлинаСтроки - ДлинаПройденнойЧастиСтроки + ДлинаСтрокиПоиска;
	Иначе	
		Возврат ДлинаПройденнойЧастиСтроки + 1 - ДлинаСтрокиПоиска;
	КонецЕсли;
	
КонецФункции

Функция СтрокаЗадомНаперед(Знач Строка) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоТаблицаПослеОшибкиРеструктуризации(СтрокаДанныеТаблицы)
	
	ПостфиксИмениТаблицы = ВРег(Прав(СтрокаДанныеТаблицы.ИмяТаблицыХранения, 2));
	Если ПостфиксИмениТаблицы = "NG"
		ИЛИ ПостфиксИмениТаблицы = "OG" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

Функция ИмяПоляПоИнформацииОТаблице(СтрокаОписаниеТаблицы, СтрокаОписаниеПоля, ИсходноеОписаниеТаблицы, ИсходноеОписаниеПоле)
	
	Если ЗначениеЗаполнено(СтрокаОписаниеПоля.ИмяПоля) Тогда
		Возврат СтрокаОписаниеПоля.ИмяПоля;
	КонецЕсли;
	
	ИмяПоля = "";
			
	Если СтрокаОписаниеПоля.ИмяПоляХранения	= "_ACCOUNTRREF" Тогда
		ИмяПоля = "Счет";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PERIOD" Тогда
		ИмяПоля = "Период";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EDHASHDT" Тогда
		ИмяПоля = "ХешДт";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EDHASHCT" Тогда
		ИмяПоля = "ХешКт";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_KEYFIELD" Тогда
		ИмяПоля = "Ключ";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_CORRESPOND" Тогда
		ИмяПоля = "Корреспонденция";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_NUMBERPREFIX" Тогда
		ИмяПоля = "ПрефиксНомера";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PREDEFINEDID" Тогда
		ИмяПоля = "ИдентификаторПредопределенногоЗначения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_SPLITTER" Тогда
		ИмяПоля = "Разделитель";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_VERSION" Тогда
		ИмяПоля = "ВерсияДанных";
	ИначеЕсли Лев(СтрокаОписаниеПоля.ИмяПоляХранения, 6) = "_VALUE"
		И Прав(СтрокаОписаниеПоля.ИмяПоляХранения, 5) = "_TYPE"
		И СтрДлина(СтрокаОписаниеПоля.ИмяПоляХранения) = 12 Тогда
		ИмяПоля = "Значение";
	ИначеЕсли Лев(СтрокаОписаниеПоля.ИмяПоляХранения, 6) = "_VALUE"
		И Прав(СтрокаОписаниеПоля.ИмяПоляХранения, 6) = "_RTREF"
		И СтрДлина(СтрокаОписаниеПоля.ИмяПоляХранения) = 13 Тогда
		ИмяПоля = "Значение";
	ИначеЕсли Лев(СтрокаОписаниеПоля.ИмяПоляХранения, 6) = "_VALUE"
		И Прав(СтрокаОписаниеПоля.ИмяПоляХранения, 6) = "_RRREF"
		И СтрДлина(СтрокаОписаниеПоля.ИмяПоляХранения) = 13 Тогда
		ИмяПоля = "Значение";
	ИначеЕсли Лев(ИсходноеОписаниеПоле.ИмяПоляХранения, 11) = "_TurnoverDt" Тогда
		ЧастиИмениМетаданных = РазложитьСтрокуВМассивПодстрок(ИсходноеОписаниеПоле.Метаданные, ".");
		ИмяПоля = ЧастиИмениМетаданных.Получить(ЧастиИмениМетаданных.Количество() - 1);		
		ИмяПоля = ИмяПоля + "ОборотДт";
	ИначеЕсли Лев(ИсходноеОписаниеПоле.ИмяПоляХранения, 11) = "_TurnoverCt" Тогда
		ЧастиИмениМетаданных = РазложитьСтрокуВМассивПодстрок(ИсходноеОписаниеПоле.Метаданные, ".");
		ИмяПоля = ЧастиИмениМетаданных.Получить(ЧастиИмениМетаданных.Количество() - 1);		
		ИмяПоля = ИмяПоля + "ОборотКт";
	ИначеЕсли Лев(ИсходноеОписаниеПоле.ИмяПоляХранения, 9) = "_Turnover" Тогда
		ЧастиИмениМетаданных = РазложитьСтрокуВМассивПодстрок(ИсходноеОписаниеПоле.Метаданные, ".");
		ИмяПоля = ЧастиИмениМетаданных.Получить(ЧастиИмениМетаданных.Количество() - 1);		
		ИмяПоля = ИмяПоля + "Оборот";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_REGID" Тогда
		ИмяПоля = "ИдентификаторРегистра";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ACTUALPERIOD" Тогда
		ИмяПоля = "ХранениеАктуальныхИтогов";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PERIODICITY" Тогда
		ИмяПоля = "ПериодичностьРегистра";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_REPETITIONFACTOR" Тогда
		ИмяПоля = "Кратность";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USETOTALS" Тогда
		ИмяПоля = "ИспользоватьИтоги";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_MINPERIOD" Тогда
		ИмяПоля = "МинимальныйПериодСКоторогоНужноПересчитыватьИтоги";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USESPLITTER" Тогда
		ИмяПоля = "ИспользоватьРазделениеИтогов";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_MINCALCULATEDPERIOD" Тогда
		ИмяПоля = "МинимальныйПериодПоКоторомуНужноНасчитыватьИтоги";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_MINCALCULATEDPERIOD" Тогда
		ИмяПоля = "МинимальныйПериодПоКоторомуНужноНасчитыватьИтоги";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DIMHASH" Тогда
		ИмяПоля = "ХешИзмерений";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DIMKEY" Тогда
		ИмяПоля = "КлючИзмерений";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USE" Тогда
		ИмяПоля = "Использовать";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DEFAULTPERIODIC" Тогда
		ИмяПоля = "ПериодичностьПоУмолчанию";
	ИначеЕсли Лев(СтрокаОписаниеПоля.ИмяПоляХранения, 7) = "_DIMUSE" Тогда
		ИмяПоля = "ИспользоватьИзмерение";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_SIZE" Тогда
		ИмяПоля = "Размер";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_UPDATED" Тогда
		ИмяПоля = "Обновлен";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ID" Тогда
		ИмяПоля = "Идентификатор";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_SLICEUSING" Тогда
		ИмяПоля = "ИспользоватьСрез";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EDHASH" Тогда
		ИмяПоля = "Хеш";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PDINITIALIZED" Тогда
		ИмяПоля = "ПредопределенноеЗначениеИнициализировано";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_TYPE" Тогда
		ИмяПоля = "Тип";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_FINISHTIME" Тогда
		ИмяПоля = "ВремяПоследнегоЗавершения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_STARTTIME" Тогда
		ИмяПоля = "ВремяПоследнегоЗапуска";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_STATE" Тогда
		ИмяПоля = "ЗаданиеВыполняется";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_RESTARTATTEMPTNUMBER" Тогда
		ИмяПоля = "НомерПоследнейПопыткиПерезапуска";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_RESTARTPERIOD" Тогда
		ИмяПоля = "ПериодВремениМеждуПерезапускамиПриОшибке";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_RESTARTCOUNT" Тогда
		ИмяПоля = "КоличествоПерезапусковПриОшибке";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ACTIVATIONCONDITION" Тогда
		ИмяПоля = "Расписание";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USERNAME" Тогда
		ИмяПоля = "ИмяПользователя";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PARAMETERS" Тогда
		ИмяПоля = "Параметры";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PREDEFINED" Тогда
		ИмяПоля = "Предопределенное";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_METADATAID" Тогда
		ИмяПоля = "ИдентификаторОбъектаМетаданных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_JOBKEY" Тогда
		ИмяПоля = "КлючРегламентногоЗадания";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DESCRIPTION" Тогда
		ИмяПоля = "Наименование";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DESCRIPTION" Тогда
		ИмяПоля = "Наименование";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_RECORDKEY" Тогда
		ИмяПоля = "КлючЗаписи";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_NODETREF"
		ИЛИ СтрокаОписаниеПоля.ИмяПоляХранения = "_NODERREF"
		ИЛИ СтрокаОписаниеПоля.ИмяПоляХранения = "_NODE_RRREF"
		ИЛИ СтрокаОписаниеПоля.ИмяПоляХранения = "_NODE_RTREF"
		ИЛИ СтрокаОписаниеПоля.ИмяПоляХранения = "_NODE_TYPE" Тогда
		ИмяПоля = "Узел";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_MESSAGENO" Тогда
		ИмяПоля = "НомерСообщения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_CONSTID" Тогда
		ИмяПоля = "ИдентификаторКонстанты";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USERID" Тогда
		ИмяПоля = "ИдентификаторПользователя";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_OBJECTKEY" Тогда
		ИмяПоля = "КлючОбъекта";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_SETTINGSKEY" Тогда
		ИмяПоля = "КлючНастроек";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_SETTINGSPRESENTATION" Тогда
		ИмяПоля = "ПредставлениеНастройки";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_SETTINGSDATA" Тогда
		ИмяПоля = "ДанныеНастройки";
	ИначеЕсли Лев(СтрокаОписаниеПоля.ИмяПоляХранения, 18) = "_DATASEPARATIONUSE" Тогда
		ИмяПоля = "ИспользованиеРазделенияДанных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_MDOBJID" Тогда
		ИмяПоля = "ИдентификаторОбъектаМетаданных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_IDRREF" Тогда
		ИмяПоля = "ИдентификаторОбъекта";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_FILENAME" Тогда
		ИмяПоля = "ИмяФайла";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_CONFIGCHNGR_IDRREF" Тогда
		ИмяПоля = "ИдентификаторОбъектаИзмененияКонфигурации";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_CONFIGCHNGR_IDRREF" Тогда
		ИмяПоля = "ИдентификаторОбъектаИзмененияКонфигурации";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DATA" Тогда
		ИмяПоля = "Данные";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DATAID" Тогда
		ИмяПоля = "ИдентификаторДанных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DATE" Тогда
		ИмяПоля = "Дата";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_CONTENT" Тогда
		ИмяПоля = "Содержимое";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_COMMENT" Тогда
		ИмяПоля = "Комментарий";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EXTNAME" Тогда
		ИмяПоля = "ИмяРасширения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EXTENSIONZIPPEDINFO" Тогда
		ИмяПоля = "СжатаяИнформацияРасширения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EXTENSIONUSEPURPOSE" Тогда
		ИмяПоля = "НазначениеИспользованияРасширения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EXTENSIONSCOPE" Тогда
		ИмяПоля = "ОбластьРасширения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EXTENSIONORDER" Тогда
		ИмяПоля = "ПорядокРасширения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_EXTDATAID" Тогда
		ИмяПоля = "ИдентификаторДанныхРасширения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ENABLEUSE" Тогда
		ИмяПоля = "ВключитьИспользование";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DIMUUID" Тогда
		ИмяПоля = "ИдентификаторИзмерения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DIMSMAP" Тогда
		ИмяПоля = "КартаИзмерения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DIMCODE" Тогда
		ИмяПоля = "КодИзмерения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ISACTUAL" Тогда
		ИмяПоля = "Актуальный";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_HISTORYDATAID" Тогда
		ИмяПоля = "ИдентификаторИсторииДанных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ISEXTENSIONS" Тогда
		ИмяПоля = "ЭтоРасширения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ISSETTINGS" Тогда
		ИмяПоля = "ЭтоНастройки";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_LEVEL" Тогда
		ИмяПоля = "Уровень";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_MASTERNODE" Тогда
		ИмяПоля = "ГлавныйУзел";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_MDID" Тогда
		ИмяПоля = "ИдентификаторМетаданных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_METADATAOBJECTUUID" Тогда
		ИмяПоля = "ИдентификаторОбъектаМетаданных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_METADATAVERSIONNUMBER" Тогда
		ИмяПоля = "НомерВерсииОбъектаМетаданных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_METADATAVERSIONNUMBER" Тогда
		ИмяПоля = "НомерВерсииОбъектаМетаданных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_URL" Тогда
		ИмяПоля = "АдресСсылки";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_URLHASH" Тогда
		ИмяПоля = "ХешАдресаСсылки";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USERFULLNAME" Тогда
		ИмяПоля = "ПолноеИмяПользователя";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_VERSIONNUMBER" Тогда
		ИмяПоля = "НомерВерсии";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ACTIONONACCEPT" Тогда
		ИмяПоля = "ДействиеПринято";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_AGGMODE" Тогда
		ИмяПоля = "РежимАгрегирования";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_BUFFERPERIODIC" Тогда
		ИмяПоля = "БуферПериодичности";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_CHANGETYPE" Тогда
		ИмяПоля = "ТипИзменения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DELTAPERIODIC" Тогда
		ИмяПоля = "ИзменениеПериодичности";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DEFAULTPRDBEG" Тогда
		ИмяПоля = "ДатаНачалаАгрегатаПоУмолчанию";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_DEFAULTPRDEND" Тогда
		ИмяПоля = "ДатаОкончанияАгрегатаПоУмолчанию";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_ECSACTIVITY" Тогда
		ИмяПоля = "АктивностьИсторииРаботыПользователей";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_FILLENDDATE" Тогда
		ИмяПоля = "ЗаполнятьДатуОкончания";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_FILLSTARTDATE" Тогда
		ИмяПоля = "ЗаполнятьДатуНачала";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_OFFDATE" Тогда
		ИмяПоля = "ДатаОтключения";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PDUPDMODE" Тогда
		ИмяПоля = "РежимОбновленияПредопределенныхДанных";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_POSITION" Тогда
		ИмяПоля = "Позиция";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PRDBEG" Тогда
		ИмяПоля = "ДатаНачалаАгрегата";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PRDEND" Тогда
		ИмяПоля = "ДатаОкончанияАгрегата";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_PROB" Тогда
		ИмяПоля = "СлужебноеПоле";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_RECORDKIND" Тогда
		ИмяПоля = "ВидЗаписи";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_RESTRUCTDATA" Тогда
		ИмяПоля = "ДанныеРеструктуризации";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_RESTRUCTDATAINT" Тогда
		ИмяПоля = "ДанныеРеструктуризацииЧисло";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_TRANSACTION" Тогда
		ИмяПоля = "Транзакция";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_UPDATETIME" Тогда
		ИмяПоля = "ВремяОбновления";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USECNT" Тогда
		ИмяПоля = "Использование";
	ИначеЕсли СтрокаОписаниеПоля.ИмяПоляХранения = "_USEDINDISTRIBUTEDINFOBASE" Тогда
		ИмяПоля = "ИспользованиеРаспределеннуюИнформационнуюБазу";
	КонецЕсли;
		
	Возврат ИмяПоля;
	
КонецФункции

#КонецОбласти

ИдентификаторОтчета = Новый УникальныйИдентификатор;

ЗаполнитьСписокДоступныхСУБД();
Если НЕ ЗначениеЗаполнено(ТипСУБД) Тогда
	ТипСУБД = ТипСУБДПоУмолчанию();
КонецЕсли;
Если НЕ ЗначениеЗаполнено(ТаймаутПодключенияСекунд) Тогда
	ТаймаутПодключенияСекунд = 180;
КонецЕсли;