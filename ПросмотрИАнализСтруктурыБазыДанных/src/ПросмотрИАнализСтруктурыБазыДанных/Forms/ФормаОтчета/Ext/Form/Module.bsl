
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");
	
	SQLServer_ИнформацияОПоляхТаблицы = ПолучитьТекстЗапроса("SQLServer_ИнформацияОПоляхТаблицы", ОбъектНаСервере);
	SQLServer_ИнформацияОТаблицах = ПолучитьТекстЗапроса("SQLServer_ИнформацияОТаблицах", ОбъектНаСервере);
	SQLServer_ИнформацияОбИндексах = ПолучитьТекстЗапроса("SQLServer_ИнформацияОбИндексах", ОбъектНаСервере);
	SQLServer_ИнформацияОПоляхИндексов = ПолучитьТекстЗапроса("SQLServer_ИнформацияОПоляхИндексов", ОбъектНаСервере);
	SQLServer_ИнформацияОбИндексахРасширенная = ПолучитьТекстЗапроса("SQLServer_ИнформацияОбИндексахРасширенная", ОбъектНаСервере);
	PostgreSQL_ИнформацияОТаблицах = ПолучитьТекстЗапроса("PostgreSQL_ИнформацияОТаблицах", ОбъектНаСервере);
	PostgreSQL_ИнформацияОПоляхТаблицы = ПолучитьТекстЗапроса("PostgreSQL_ИнформацияОПоляхТаблицы", ОбъектНаСервере);
	PostgreSQL_ИнформацияОбИндексах = ПолучитьТекстЗапроса("PostgreSQL_ИнформацияОбИндексах", ОбъектНаСервере);
	PostgreSQL_ИнформацияОПоляхИндексов = ПолучитьТекстЗапроса("PostgreSQL_ИнформацияОПоляхИндексов", ОбъектНаСервере);
	PostgreSQL_ИнформацияОбИндексахРасширенная = ПолучитьТекстЗапроса("PostgreSQL_ИнформацияОбИндексахРасширенная");
	
	ПолноеИмяМетаданных = ОбъектНаСервере.Метаданные().ПолноеИмя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = ПолноеИмяМетаданных + ".Форма.ФормаНастроекПодключения"	Тогда
		
		НастройкиИзменены = Ложь;
		
		ПрименитьНастройку("ТипСУБД", 					ВыбранноеЗначение.ТипСУБД, НастройкиИзменены);
		ПрименитьНастройку("ЗапросыСКлиента", 			ВыбранноеЗначение.ЗапросыСКлиента, НастройкиИзменены);
		ПрименитьНастройку("Сервер", 					ВыбранноеЗначение.Сервер, НастройкиИзменены);
		ПрименитьНастройку("ИмяБазыДанных", 			ВыбранноеЗначение.ИмяБазыДанных, НастройкиИзменены);
		ПрименитьНастройку("ИмяПользователя", 			ВыбранноеЗначение.ИмяПользователя, НастройкиИзменены);
		ПрименитьНастройку("Пароль", 					ВыбранноеЗначение.Пароль, НастройкиИзменены);
		ПрименитьНастройку("АутентификацияNTLM", 		ВыбранноеЗначение.АутентификацияNTLM, НастройкиИзменены);
		ПрименитьНастройку("ТаймаутПодключенияСекунд",	ВыбранноеЗначение.ТаймаутПодключенияСекунд, НастройкиИзменены);
		ПрименитьНастройку("СохранятьПароль",			ВыбранноеЗначение.СохранятьПароль, НастройкиИзменены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранятьПароль = Настройки.Получить("Объект.СохранятьПароль");	
	Если НЕ СохранятьПароль = Истина Тогда
		Настройки.Вставить("Объект.Пароль", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодключения(Команда)

	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ТипСУБД", Отчет.ТипСУБД);
	НастройкиПодключения.Вставить("ЗапросыСКлиента", Отчет.ЗапросыСКлиента);
	НастройкиПодключения.Вставить("Сервер", Отчет.Сервер);
	НастройкиПодключения.Вставить("ИмяБазыДанных", Отчет.ИмяБазыДанных);
	НастройкиПодключения.Вставить("ИмяПользователя", Отчет.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль", Отчет.Пароль);
	НастройкиПодключения.Вставить("АутентификацияNTLM", Отчет.АутентификацияNTLM);
	НастройкиПодключения.Вставить("ТаймаутПодключенияСекунд", Отчет.ТаймаутПодключенияСекунд);
	НастройкиПодключения.Вставить("СохранятьПароль", Отчет.СохранятьПароль);
	
	ОткрытьФорму(ПолноеИмяМетаданных + ".Форма.ФормаНастроекПодключения", 
		НастройкиПодключения, 
		ЭтаФорма, 
		УникальныйИдентификатор, , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	Состояние("Обновление данных о структуре информационной базы...");
	
	ПрочитатьСтруктуруМетаданных();
	
	Если Отчет.ЗапросыСКлиента И НЕ ЭтоФайловаяБаза(ЭтаФорма) Тогда
		
		ПрочитатьДополнительныеИточникиДанных(ЭтаФорма);
		
	КонецЕсли;
	
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформациюИсточникаДанных(Форма, ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, КлючЗапроса, СписокИменПолейДанных)
		
	Объект = Форма.Отчет;
	
	Если ЭтоФайловаяБаза(Форма) Тогда
		Возврат;
	Иначе	
		
		НеобходимоОбновитьданные = Форма.ИсточникДанныхИспользуется(ИмяИсточникаДанных)
			И НЕ Форма.ИсточникДанныхПолучен(ИмяФлагаИсточникаДанных);
		
		Если НЕ НеобходимоОбновитьданные Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоSQLServer(Форма) Тогда
			
			ТекстЗапроса = Форма["SQLServer_" + КлючЗапроса];
			
		ИначеЕсли ЭтоPostgreSQL(Форма) Тогда
			
			ТекстЗапроса = Форма["PostgreSQL_" + КлючЗапроса];
			
		КонецЕсли;
		
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
		
		Если НЕ СоединениеБД = Неопределено Тогда
			
			КомандаБД = Новый COMОбъект("ADODB.Command"); 
			КомандаБД.ActiveConnection = СоединениеБД; 
			КомандаБД.CommandText = ТекстЗапроса;
			КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд; 
			
			РезультатБД = КомандаБД.Execute();
			
			КоллекцияПолученныхДанных = Новый Массив;
			
			Пока НЕ РезультатБД.Eof() Цикл
				
				СтруктураДанных = Новый Структура(СписокИменПолейДанных);

				ИндексПоля = 0;
				Для Каждого КлючСтруктуры Из СтруктураДанных Цикл
					
					ЗначениеСтруктуры = РезультатБД.Fields(ИндексПоля).Value;
					
					СтруктураДанных[КлючСтруктуры.Ключ] = ЗначениеСтруктуры;
					
					ИндексПоля = ИндексПоля + 1;
					
				КонецЦикла;
				
				КоллекцияПолученныхДанных.Добавить(СтруктураДанных);																
				
				РезультатБД.MoveNext(); 
				
			КонецЦикла;
			
			Форма.ОбновитьИнформациюИсточникаДанныхНаСервере(ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, КоллекцияПолученныхДанных);
			КоллекцияПолученныхДанных = Неопределено
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюИсточникаДанныхНаСервере(Знач ИмяИсточникаДанных, Знач ИмяФлагаИсточникаДанных, Знач ДополнительнаяИнформация) Экспорт
	
	ОбъектОбработки = РеквизитФормыВЗначение("Отчет");
	ОбъектОбработки.ОбновитьИнформациюИсточникаДанных(ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, ДополнительнаяИнформация);
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Отчет");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьСоединениеСБазой(Знач ТипСУБД, Знач ИмяСервера, Знач ИмяБД, Знач Пользователь, Знач Пароль, Знач АутентификацияNTLM = Ложь)
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	
	Если ТипСУБД = "SQLServer" Тогда
		
		Если АутентификацияNTLM Тогда
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Integrated Security=SSPI;"
				+ "Persist Security Info=False;"
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		Иначе	
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Password=" + Пароль + ";"
				+ "Persist Security Info=True;User ID=" + Пользователь + ";" 
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		КонецЕсли;
		
	ИначеЕсли ТипСУБД = "PostgreSQL" Тогда
		
		СтрокаСоединения = "Driver={PostgreSQL Unicode};Pwd=" + Пароль + ";"
			+ "Uid=" + Пользователь + ";"
			+ "Database=" + ИмяБД + ";"
			+ "Server=" + ИмяСервера;
		
	КонецЕсли;
	
	Попытка
		
	    Соединение.Open(СтрокаСоединения);
		
		Возврат Соединение;
		
	Исключение
		
		СообщениеОбОшибке = ТипСУБД 
			+ ": Ошибка установки соединения: " 
			+ Символы.ПС 
			+ ОписаниеОшибки();
		
		СообщитьПользователю(СообщениеОбОшибке);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ИсточникДанныхИспользуется(ИмяИсточника) Экспорт
	
	ОбъектОбработки = РеквизитФормыВЗначение("Отчет");
	Возврат ОбъектОбработки.ИсточникДанныхИспользуется(ИмяИсточника);
	
КонецФункции

&НаСервере
Функция ИсточникДанныхПолучен(ИмяИсточникаДанных) Экспорт
	
	ОбъектОбработки = РеквизитФормыВЗначение("Отчет");
	
	Возврат ОбъектОбработки.ИсточникДанныхПолучен(Неопределено, ИмяИсточникаДанных);
	
КонецФункции

&НаСервере
Процедура ПрочитатьСтруктуруМетаданных()
		
	НеобходимоОбновитьОбъектОбработки = Ложь;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");	
	ОбъектНаСервере.ЗаполнитьСтруктуруМетаданных();
	ЗначениеВРеквизитФормы(ОбъектНаСервере, "Отчет");
	
	Если НЕ Отчет.ЗапросыСКлиента Тогда		
		
		ПрочитатьДополнительныеИточникиДанных(ЭтаФорма);			
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьДополнительныеИточникиДанных(Форма)
	
	ОбновитьИнформациюИсточникаДанных(
		Форма, 
		"ТаблицыХраненияSQL",  
		"ТаблицыХраненияSQL", 
		"ИнформацияОТаблицах", 
		"ИмяТаблицыХранения, КоличествоСтрок, Зарезервировано, РазмерДанных, РазмерИндексов, Свободно");		
		
	ОбновитьИнформациюИсточникаДанных(
		Форма, 
		"ПоляТаблицыSQL",  
		"ПоляТаблицыSQL", 
		"ИнформацияОПоляхТаблицы", 
		"ИмяТаблицыХранения, ИмяСхемы, ПорядковыйНомер, ИмяПоляХранения, ТипSQL"
			+", Разрядность, РазрядностьДробнойЧасти, Длина, ДопустимNULL");		
		
	ОбновитьИнформациюИсточникаДанных(
		Форма, 
		"Индексы",  
		"ИндексыSQL", 
		"ИнформацияОбИндексах", 
		"ИмяТаблицыХранения, ИмяИндексаХранения, ХешПолей");		
		
	ОбновитьИнформациюИсточникаДанных(
		Форма, 
		"ИндексыРасширенныеSQL",  
		"ИндексыРасширенныеSQL", 
		"ИнформацияОбИндексахРасширенная", 
		"ИмяТаблицыХранения, ИмяИндексаХранения, Размер, Уникальный");		
		
	ОбновитьИнформациюИсточникаДанных(
		Форма, 
		"ПоляИндексов",  
		"ПоляИндексовSQL", 
		"ИнформацияОПоляхИндексов", 
		"ИмяТаблицыХранения, ИмяИндексаХранения, ИмяПоляХранения, ПорядковыйНомер");	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФайловаяБаза(Форма)
	
	Возврат (Форма.Отчет.ТипСУБД = Форма.Отчет.СписокДоступныхСУБД.Получить(0).Значение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоSQLServer(Форма)
	
	Возврат (Форма.Отчет.ТипСУБД = Форма.Отчет.СписокДоступныхСУБД.Получить(1).Значение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоPostgreSQL(Форма)
	
	Возврат (Форма.Отчет.ТипСУБД = Форма.Отчет.СписокДоступныхСУБД.Получить(2).Значение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапроса(ИмяЗапроса, ОбъектНаСервере = Неопределено)
	
	Если ОбъектНаСервере = Неопределено Тогда
		ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ОбъектНаСервере
		.ПолучитьМакет(ИмяЗапроса)
		.ПолучитьТекст();
	
КонецФункции

&НаКлиенте
Процедура ПрименитьНастройку(Знач ИмяНастройки, Знач НовоеЗначение, Знач ФлагЕстьИзменение)
	
	Если Отчет[ИмяНастройки] <> НовоеЗначение Тогда
		Отчет[ИмяНастройки] = НовоеЗначение;
		ФлагЕстьИзменение = Истина ИЛИ ФлагЕстьИзменение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти