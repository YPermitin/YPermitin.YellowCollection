
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");
	
	SQLServer_ИсторияРаботыПользователей = ПолучитьТекстЗапроса("SQLServer_ИсторияРаботыПользователей", ОбъектНаСервере);
	PostgreSQL_ИсторияРаботыПользователей = ПолучитьТекстЗапроса("PostgreSQL_ИсторияРаботыПользователей", ОбъектНаСервере);
	
	ПолноеИмяМетаданных = ОбъектНаСервере.Метаданные().ПолноеИмя();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДобавитьРеквизитыФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = ПолноеИмяМетаданных + ".Форма.ФормаНастроекПодключения"	Тогда
		
		НастройкиИзменены = Ложь;
		
		ПрименитьНастройку("ТипСУБД", 					ВыбранноеЗначение.ТипСУБД, НастройкиИзменены);
		ПрименитьНастройку("ЗапросыСКлиента", 			ВыбранноеЗначение.ЗапросыСКлиента, НастройкиИзменены);
		ПрименитьНастройку("Сервер", 					ВыбранноеЗначение.Сервер, НастройкиИзменены);
		ПрименитьНастройку("ИмяБазыДанных", 			ВыбранноеЗначение.ИмяБазыДанных, НастройкиИзменены);
		ПрименитьНастройку("ИмяПользователя", 			ВыбранноеЗначение.ИмяПользователя, НастройкиИзменены);
		ПрименитьНастройку("Пароль", 					ВыбранноеЗначение.Пароль, НастройкиИзменены);
		ПрименитьНастройку("АутентификацияNTLM", 		ВыбранноеЗначение.АутентификацияNTLM, НастройкиИзменены);
		ПрименитьНастройку("ТаймаутПодключенияСекунд",	ВыбранноеЗначение.ТаймаутПодключенияСекунд, НастройкиИзменены);
		ПрименитьНастройку("СохранятьПароль",			ВыбранноеЗначение.СохранятьПароль, НастройкиИзменены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранятьПароль = Настройки.Получить("Объект.СохранятьПароль");	
	Если НЕ СохранятьПароль = Истина Тогда
		Настройки.Вставить("Объект.Пароль", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	ЗначениеРасшифровки = ЗначениеОбработкиРасшифровки(Расшифровка);
	Если НЕ ЗначениеРасшифровки = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(ЗначениеРасшифровки);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтбораПоПользователям = ЗначенияОтбораПользователей();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивПользователей", НастройкиОтбораПоПользователям.МассивПользователей);
	
	ФормаВыбора = ОткрытьФорму(
		ПолноеИмяМетаданных + ".Форма.ФормаВыбораПользователей",
		ПараметрыФормы,
		Элемент,
		УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Список_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	РезультатПоискаПользовательскойНастройки = НайтиПараметрыИЭлементПользовательскойНастройки("Пользователи");	
	Если НЕ РезультатПоискаПользовательскойНастройки = Неопределено Тогда	
		
		ПользовательскиеНастройкаДляИзменения = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			РезультатПоискаПользовательскойНастройки.ИдентификаторПользовательскойНастройки);
		Если НЕ ПользовательскиеНастройкаДляИзменения = Неопределено Тогда
			ПользовательскиеНастройкаДляИзменения.Значение = Новый СписокЗначений;
			ПользовательскиеНастройкаДляИзменения.Значение.ЗагрузитьЗначения(ВыбранноеЗначение);
			ПользовательскиеНастройкаДляИзменения.Использование = Истина;			
		КонецЕсли;
						
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
		
	ИнформацияПоОтборуПользователей = ЗначенияОтбораПользователей();
	Если НЕ ИнформацияПоОтборуПользователей.Использование
		ИЛИ ИнформацияПоОтборуПользователей.МассивПользователей.Количество() = 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетПродолжение", ЭтаФорма);
		ТекстВопроса =
			"В отчете не установлен отбор по пользователям информационной базы.
			|Это может привести к длительному формированию отчета и получению большого объема данных.
			|
			|Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодключения(Команда)
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ТипСУБД", Отчет.ТипСУБД);
	НастройкиПодключения.Вставить("ЗапросыСКлиента", Отчет.ЗапросыСКлиента);
	НастройкиПодключения.Вставить("Сервер", Отчет.Сервер);
	НастройкиПодключения.Вставить("ИмяБазыДанных", Отчет.ИмяБазыДанных);
	НастройкиПодключения.Вставить("ИмяПользователя", Отчет.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль", Отчет.Пароль);
	НастройкиПодключения.Вставить("АутентификацияNTLM", Отчет.АутентификацияNTLM);
	НастройкиПодключения.Вставить("ТаймаутПодключенияСекунд", Отчет.ТаймаутПодключенияСекунд);
	НастройкиПодключения.Вставить("СохранятьПароль", Отчет.СохранятьПароль);
	
	ОткрытьФорму(ПолноеИмяМетаданных + ".Форма.ФормаНастроекПодключения", 
		НастройкиПодключения, 
		ЭтаФорма, 
		УникальныйИдентификатор, , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьОтчетПродолжение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьОтчетНаКлиенте();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыСУБД(Знач УникальныйИдентификаторЭлемента)
	
	РезультатПреобразования = Новый Структура;
	РезультатПреобразования.Вставить("SQLServer", Неопределено);
	РезультатПреобразования.Вставить("PostgreSQL", Неопределено);
	
	УникальныйИдентификаторЭлемента = Строка(УникальныйИдентификаторЭлемента);	
	ЧастиУникальногоИдентификатора = РазложитьСтрокуВМассивПодстрок(
		УникальныйИдентификаторЭлемента, "-");
	
	Если ЧастиУникальногоИдентификатора.Количество() = 5 Тогда
		
		СокращенныйИдентфикаторСсылки = 
		ВРег(ЧастиУникальногоИдентификатора.Получить(3))
			+ ВРег(ЧастиУникальногоИдентификатора.Получить(4))
			+ ВРег(ЧастиУникальногоИдентификатора.Получить(2))
			+ ВРег(ЧастиУникальногоИдентификатора.Получить(1))
			+ ВРег(ЧастиУникальногоИдентификатора.Получить(0));
		
		РезультатПреобразования.SQLServer = "0x" + СокращенныйИдентфикаторСсылки;		
		РезультатПреобразования.PostgreSQL = "'\x" + СокращенныйИдентфикаторСсылки + "'";			
		
	Иначе
		
		РезультатПреобразования.SQLServer = "";
		РезультатПреобразования.PostgreSQL = "";
		
	КонецЕсли;
	
	Возврат РезультатПреобразования;
	
КонецФункции

&НаСервере
Функция ЗначенияОтбораПользователей() Экспорт
	
	НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрПользователи = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Пользователи");
	Если ПараметрПользователи.Значение = Неопределено Тогда
		МассивПользователей = Новый Массив;	
	ИначеЕсли ТипЗнч(ПараметрПользователи.Значение) = Тип("Строка") Тогда
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(ПараметрПользователи.Значение);
	Иначе
		МассивПользователей = ПараметрПользователи.Значение.ВыгрузитьЗначения();
	КонецЕсли;
	
	ТекстУсловия = "(";
	УстановитьБезопасныйРежим(Истина);
	КоличествоВыбранныхПользователей = МассивПользователей.Количество();
	НомерТекущегоПользователя = 0;
	Для Каждого ВыбранныйПользователь Из МассивПользователей Цикл
		НомерТекущегоПользователя = НомерТекущегоПользователя + 1;
		
		НайденныйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ВыбранныйПользователь);
		Если НЕ НайденныйПользователь = Неопределено Тогда
			ДанныеИдентификаторов = ИдентификаторыСУБД(НайденныйПользователь.УникальныйИдентификатор);
			Если ЭтоSQLServer(ЭтаФорма) Тогда
				ТекстУсловия = ТекстУсловия + ДанныеИдентификаторов.SQLServer;
			ИначеЕсли ЭтоPostgreSQL(ЭтаФорма) Тогда
				ТекстУсловия = ТекстУсловия + ДанныеИдентификаторов.PostgreSQL;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ КоличествоВыбранныхПользователей = НомерТекущегоПользователя Тогда
			ТекстУсловия = ТекстУсловия + ", "; 	
		КонецЕсли;
	КонецЦикла;
	ТекстУсловия = ТекстУсловия + ")";
	УстановитьБезопасныйРежим(Ложь);
	
	НастройкиОтборовЗапроса = Новый Структура;
	НастройкиОтборовЗапроса.Вставить("Использование", ПараметрПользователи.Использование);
	НастройкиОтборовЗапроса.Вставить("МассивПользователей", МассивПользователей);
	НастройкиОтборовЗапроса.Вставить("ТекстУсловия", ТекстУсловия);
	
	Возврат НастройкиОтборовЗапроса;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыФильтров()
	
	РезультатПоиска = НайтиПараметрыИЭлементПользовательскойНастройки("Пользователи");	
	Если НЕ РезультатПоиска = Неопределено Тогда	
		
		НайденныйЭлементФильтра = Элементы[РезультатПоиска.Элемент];
		НайденныйЭлементФильтра.УстановитьДействие("НачалоВыбора", "Подключаемый_ЭлементНастройки_НачалоВыбора"); 
		НайденныйЭлементФильтра.УстановитьДействие("ОбработкаВыбора", "Подключаемый_Список_ОбработкаВыбора");
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция НайтиПараметрыИЭлементПользовательскойНастройки(ИмяПараметра)
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Элемент", Неопределено);
	РезультатПоиска.Вставить("ПутьКДанным", Неопределено);
	РезультатПоиска.Вставить("ИдентификаторПользовательскойНастройки", Неопределено);
	
	КоллекцияПараметров = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ИскомыйПараметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	ИдентификаторПользовательскойНастройки = Неопределено;
	ИндексНайденногоПараметра = Неопределено;
	Для Каждого ЭлементПараметр Из КоллекцияПараметров Цикл
		Если ТипЗнч(ЭлементПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ЭлементПараметр.Параметр = ИскомыйПараметр Тогда
			ИндексНайденногоПараметра = КоллекцияПараметров.Индекс(ЭлементПараметр);
			ИдентификаторПользовательскойНастройки = ЭлементПараметр.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексНайденногоПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьДанныхДляПоиска = 
		"Отчет.КомпоновщикНастроек.ПользовательскиеНастройки[" 
		+ XMLСтрока(ИндексНайденногоПараметра) 
		+ "].Значение";
	
	НайденныйЭлементФильтра = Неопределено;
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И ЭлементФормы.ПутьКДанным = ПутьДанныхДляПоиска
			И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
			НайденныйЭлементФильтра = ЭлементФормы;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	РезультатПоиска.Элемент = НайденныйЭлементФильтра.Имя;
	РезультатПоиска.ПутьКДанным = ПутьДанныхДляПоиска;
	РезультатПоиска.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	
	Возврат РезультатПоиска;
	
КонецФункции

&НаСервере
Функция ИсточникДанныхПолучен(ИмяИсточникаДанных) Экспорт
	
	ОбъектОбработки = РеквизитФормыВЗначение("Отчет");
	
	Возврат ОбъектОбработки.ИсточникДанныхПолучен(Неопределено, ИмяИсточникаДанных);
	
КонецФункции

&НаСервере
Функция ИсточникДанныхИспользуется(ИмяИсточника) Экспорт
	
	ОбъектОбработки = РеквизитФормыВЗначение("Отчет");
	Возврат ОбъектОбработки.ИсточникДанныхИспользуется(ИмяИсточника);
	
КонецФункции

&НаКлиенте
Процедура ПрименитьНастройку(Знач ИмяНастройки, Знач НовоеЗначение, Знач ФлагЕстьИзменение)
	
	Если Отчет[ИмяНастройки] <> НовоеЗначение Тогда
		Отчет[ИмяНастройки] = НовоеЗначение;
		ФлагЕстьИзменение = Истина ИЛИ ФлагЕстьИзменение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	Состояние("Обновление данных о структуре информационной базы...");
		
	Если Отчет.ЗапросыСКлиента И НЕ ЭтоФайловаяБаза(ЭтаФорма) Тогда
		
		ПрочитатьДополнительныеИточникиДанных(ЭтаФорма);
		
	Иначе
		
		ПрочитатьДополнительныеИточникиДанныхНаСервере();
		
	КонецЕсли;
	
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьДополнительныеИточникиДанных(Форма)
	
	ОбновитьИнформациюИсточникаДанных(
		Форма,
		"ТаблицаИсторииРаботыПользователей",
		"ТаблицаИсторииРаботыПользователей",
		"ИсторияРаботыПользователей",
		"ИдентификаторПользователя, Дата, НавигационнаяСсылка");		
	
КонецПроцедуры
	
&НаСервере
Процедура ПрочитатьДополнительныеИточникиДанныхНаСервере()
	
	ОбновитьИнформациюИсточникаДанных(
		ЭтаФорма,
		"ТаблицаИсторииРаботыПользователей",
		"ТаблицаИсторииРаботыПользователей",
		"ИсторияРаботыПользователей",
		"ИдентификаторПользователя, Дата, НавигационнаяСсылка");		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформациюИсточникаДанных(Форма, ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, КлючЗапроса, СписокИменПолейДанных)
		
	Объект = Форма.Отчет;
	
	Если ЭтоФайловаяБаза(Форма) Тогда
		Возврат;
	Иначе	
		
		НеобходимоОбновитьданные = Форма.ИсточникДанныхИспользуется(ИмяИсточникаДанных)
			И НЕ Форма.ИсточникДанныхПолучен(ИмяФлагаИсточникаДанных);
		
		Если НЕ НеобходимоОбновитьданные Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоSQLServer(Форма) Тогда
			
			ТекстЗапроса = Форма["SQLServer_" + КлючЗапроса];
			
		ИначеЕсли ЭтоPostgreSQL(Форма) Тогда
			
			ТекстЗапроса = Форма["PostgreSQL_" + КлючЗапроса];
			
		КонецЕсли;
		
		СоединениеБД = СоздатьСоединениеСБазой(
			Объект.ТипСУБД, 
			Объект.Сервер, 
			Объект.ИмяБазыДанных, 
			Объект.ИмяПользователя, 
			Объект.Пароль, 
			Объект.АутентификацияNTLM);
		
		Если НЕ СоединениеБД = Неопределено Тогда
			
			Если КлючЗапроса = "ИсторияРаботыПользователей" Тогда
				// Подмена условия запроса
				ЗначенияОтбораПользователей = Форма.ЗначенияОтбораПользователей();
				Если ЗначенияОтбораПользователей.Использование Тогда
					Если ЗначенияОтбораПользователей.МассивПользователей.Количество() = 0 Тогда
						ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "@_UserID", "1 = 0");	
					Иначе
						ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "@_UserID", " _UserID IN " + ЗначенияОтбораПользователей.ТекстУсловия);
					КонецЕсли;
				Иначе
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "@_UserID", "1 = 1");
				КонецЕсли;
			КонецЕсли;
			
			КомандаБД = Новый COMОбъект("ADODB.Command"); 
			КомандаБД.ActiveConnection = СоединениеБД; 
			КомандаБД.CommandText = ТекстЗапроса;
			КомандаБД.CommandTimeout = Объект.ТаймаутПодключенияСекунд;
			
			РезультатБД = КомандаБД.Execute();
			
			КоллекцияПолученныхДанных = Новый Массив;
			
			Пока НЕ РезультатБД.Eof() Цикл
				
				СтруктураДанных = Новый Структура(СписокИменПолейДанных);

				ИндексПоля = 0;
				Для Каждого КлючСтруктуры Из СтруктураДанных Цикл
					
					ЗначениеСтруктуры = РезультатБД.Fields(ИндексПоля).Value;
					
					СтруктураДанных[КлючСтруктуры.Ключ] = ЗначениеСтруктуры;
					
					ИндексПоля = ИндексПоля + 1;
					
				КонецЦикла;
				
				КоллекцияПолученныхДанных.Добавить(СтруктураДанных);																
				
				РезультатБД.MoveNext(); 
				
			КонецЦикла;
			
			Форма.ОбновитьИнформациюИсточникаДанныхНаСервере(ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, КоллекцияПолученныхДанных);
			КоллекцияПолученныхДанных = Неопределено
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюИсточникаДанныхНаСервере(ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, Знач ДополнительнаяИнформация) Экспорт
	
	ОбъектОбработки = РеквизитФормыВЗначение("Отчет");
	ОбъектОбработки.ОбновитьИнформациюИсточникаДанных(ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, ДополнительнаяИнформация);
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Отчет");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьСоединениеСБазой(Знач ТипСУБД, Знач ИмяСервера, Знач ИмяБД, Знач Пользователь, Знач Пароль, Знач АутентификацияNTLM = Ложь)
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	
	Если ТипСУБД = "SQLServer" Тогда
		
		Если АутентификацияNTLM Тогда
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Integrated Security=SSPI;"
				+ "Persist Security Info=False;"
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		Иначе	
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Password=" + Пароль + ";"
				+ "Persist Security Info=True;User ID=" + Пользователь + ";" 
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		КонецЕсли;
		
	ИначеЕсли ТипСУБД = "PostgreSQL" Тогда
		
		СтрокаСоединения = "Driver={PostgreSQL Unicode};Pwd=" + Пароль + ";"
			+ "Uid=" + Пользователь + ";"
			+ "Database=" + ИмяБД + ";"
			+ "Server=" + ИмяСервера;
		
	КонецЕсли;
	
	Попытка
		
	    Соединение.Open(СтрокаСоединения);
		
		Возврат Соединение;
		
	Исключение
		
		СообщениеОбОшибке = ТипСУБД 
			+ ": Ошибка установки соединения: " 
			+ Символы.ПС 
			+ ОписаниеОшибки();
		
		СообщитьПользователю(СообщениеОбОшибке);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФайловаяБаза(Форма)
	
	Возврат (Форма.Отчет.ТипСУБД = Форма.Отчет.СписокДоступныхСУБД.Получить(0).Значение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоSQLServer(Форма)
	
	Возврат (Форма.Отчет.ТипСУБД = Форма.Отчет.СписокДоступныхСУБД.Получить(1).Значение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоPostgreSQL(Форма)
	
	Возврат (Форма.Отчет.ТипСУБД = Форма.Отчет.СписокДоступныхСУБД.Получить(2).Значение);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса(ИмяЗапроса, ОбъектНаСервере = Неопределено)
	
	Если ОбъектНаСервере = Неопределено Тогда
		ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ОбъектНаСервере
		.ПолучитьМакет(ИмяЗапроса)
		.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ЗначениеОбработкиРасшифровки(Знач Расшифровка)
	
	ЗначениеРасшифровки = Неопределено;
	
	ДанныеРасшифровкиИзХранилища = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Если НЕ ДанныеРасшифровкиИзХранилища = Неопределено Тогда
		
		ЭлементыРасшифровки = ДанныеРасшифровкиИзХранилища.Элементы;
		ПоляРасшифровки = ЭлементыРасшифровки.Получить(Расшифровка).ПолучитьПоля();
		Если ПоляРасшифровки.Количество() = 1 Тогда
			
			ЭлементПоляРасшифровки = ПоляРасшифровки.Получить(0);
			Если ЭлементПоляРасшифровки.Поле = "История.НавигационнаяСсылка" Тогда
				ЗначениеРасшифровки = ЭлементПоляРасшифровки.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеРасшифровки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = _СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = _СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = _СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция _СтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина) Экспорт
	
	РезультатирующийМассив = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если ВключатьПустые = Ложь
			И НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатирующийМассив.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат РезультатирующийМассив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоиска = "СНачала", Знач НачальнаяПозиция = 1
	, Знач НомерВхождения = 1) Экспорт
	
	ДлинаСтроки = СтрДлина(Строка);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	Если НачальнаяПозиция = 0
		Или НомерВхождения = 0
		Или ДлинаСтроки < НачальнаяПозиция	
		Или (НаправлениеПоиска <> "СНачала" И НаправлениеПоиска <> "СКонца") Тогда
		
		Возврат 0;	
	КонецЕсли; 
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Строка = СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		ОставшаясяЧастьСтроки = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		ОставшаясяЧастьСтроки = Прав(Строка, ДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(ОставшаясяЧастьСтроки, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерТекущегоВхождения = 0;
	Пока НомерТекущегоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(ОставшаясяЧастьСтроки, СтрокаПоиска);
		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки + СтрДлина(Лев(ОставшаясяЧастьСтроки, ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		ОставшаясяЧастьСтроки = Прав(ОставшаясяЧастьСтроки, СтрДлина(ОставшаясяЧастьСтроки) - (ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		НомерТекущегоВхождения = НомерТекущегоВхождения + 1;
		
	КонецЦикла;	
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Возврат ДлинаСтроки - ДлинаПройденнойЧастиСтроки + ДлинаСтрокиПоиска;
	Иначе	
		Возврат ДлинаПройденнойЧастиСтроки + 1 - ДлинаСтрокиПоиска;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЗадомНаперед(Знач Строка) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТипСУБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти
