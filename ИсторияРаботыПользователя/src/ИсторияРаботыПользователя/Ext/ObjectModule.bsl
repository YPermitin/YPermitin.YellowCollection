
#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "История работы пользователя");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0.0");
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	РегистрационныеДанные.Вставить("Информация", 
		"Отчет ""История работы пользователя"" предназначен 
		|для просмотра истории действий пользователей в пользовательском режиме
		|(доступен расширенный функционал для клиент-серверной базы).");
		
	МассивНазначенийОбработки = НазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	ТаблицаКомандОбработки = ТаблицаКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция НазначениеОбработки() Экспорт 
	
	МассивНазначенийОбработки = Новый Массив;
	 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

Функция ТаблицаКомандОбработки() Экспорт 
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево"));
	
	ДобавитьКоманду(тзКоманд, 
		"ИсторияРаботыПользователя", 
		"История работы пользователя", 
		Ложь, 
		"ОткрытиеФормы", 
		"",
		Ложь);
	
	Возврат тзКоманд;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КоллекцияПараметров = Настройки.ПараметрыДанных.Элементы;
	
	ПараметрИдентификаторТекущегоПользователяБазы = КоллекцияПараметров.Найти("ИдентификаторТекущегоПользователяБазы");
	Если НЕ ПараметрИдентификаторТекущегоПользователяБазы = Неопределено Тогда
		ПараметрИдентификаторТекущегоПользователяБазы.Значение = ИдентификаторТекущегоПользователяИнформационнойБазы();
	КонецЕсли;
	
	Если ЭтоФайловаяБаза() Тогда
		ТекстСообщения = "Для файлового режима работы доступно формирование истории работы"
			+ " только для текущего пользователя.";
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнитьТаблицуПользователейИнформационнойБазы();
	ЗаполнитьТаблицуИсторииРаботыПользователей();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");		
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ДанныеИсторииРаботыПользователей = ДанныеИсторииРаботыПользователей(); 
	ТаблицаПользователейИнформационнойБазы = ДанныеИсторииРаботыПользователей.ТаблицаПользователейИнформационнойБазы;
	ТаблицаИсторииРаботыПользователей = ДанныеИсторииРаботыПользователей.ТаблицаИсторииРаботыПользователей;
	
	НаборВнешнихИсточниковДанных = Новый Структура;
	НаборВнешнихИсточниковДанных.Вставить("ИсторияРаботыПользователей", ТаблицаИсторииРаботыПользователей); 
	НаборВнешнихИсточниковДанных.Вставить("ПользователиИнформационнойБазы", ТаблицаПользователейИнформационнойБазы);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборВнешнихИсточниковДанных , ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
			
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КоличествоГруппировок = ДокументРезультат.КоличествоУровнейГруппировокСтрок();
	Пока КоличествоГруппировок >= 0 Цикл
		
		ДокументРезультат.ПоказатьУровеньГруппировокСтрок(КоличествоГруппировок);
		
		КоличествоГруппировок = КоличествоГруппировок - 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИсточникДанныхИспользуется(ИмяИсточника) Экспорт
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	НаборДанных = МакетКомпоновки.НаборыДанных.Найти(ИмяИсточника);
	
	Возврат НаборДанных <> Неопределено;
	
КонецФункции

Функция ИсточникДанныхПолучен(Знач СостоянияИсточниковДанныхОтчета = Неопределено, ИмяИсточникаДанных) Экспорт
	
	Если СостоянияИсточниковДанныхОтчета = Неопределено Тогда
		
		ТекущиеДанныеИсторииРаботыПользователей = ДанныеИсторииРаботыПользователей();
		
		СостоянияИсточниковДанныхОтчета = ТекущиеДанныеИсторииРаботыПользователей.СостоянияИсточниковДанныхОтчета;
		
	КонецЕсли;
	
	ИсточникПолучен = СостоянияИсточниковДанныхОтчета.Получить(ИмяИсточникаДанных);
	
	Если ИсточникПолучен = Истина Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьИнформациюИсточникаДанных(ИмяИсточникаДанных, ИмяФлагаИсточникаДанных, Знач ДополнительнаяИнформация) Экспорт
	
	Если ИмяИсточникаДанных = "ТаблицаИсторииРаботыПользователей" Тогда
		ЗаполнитьТаблицуИсторииРаботыПользователей(ДополнительнаяИнформация);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеИсторииРаботыПользователей() Экспорт
	
	ТекущиеДанныеОтчета = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(ЭтотОбъект.АдресХранилищаТекущиеДанныеОтчета) Тогда
		ТекущиеДанныеОтчета = ПолучитьИзВременногоХранилища(ЭтотОбъект.АдресХранилищаТекущиеДанныеОтчета);	
	КонецЕсли;
	
	Если ТекущиеДанныеОтчета = Неопределено Тогда
		
		ТекущиеДанныеОтчета = Новый Структура;
		
		ТекущиеДанныеОтчета.Вставить("СостоянияИсточниковДанныхОтчета", Новый Соответствие);
		
		ТаблицаПользователейИнформационнойБазы = Новый ТаблицаЗначений;
		ТаблицаПользователейИнформационнойБазы.Колонки.Добавить("Идентификатор");
		ТаблицаПользователейИнформационнойБазы.Колонки.Добавить("Имя");
		ТаблицаПользователейИнформационнойБазы.Колонки.Добавить("ПолноеИмя");
		ТекущиеДанныеОтчета.Вставить("ТаблицаПользователейИнформационнойБазы", ТаблицаПользователейИнформационнойБазы);
		
		ТаблицаИсторииРаботыПользователей = Новый ТаблицаЗначений;
		ТаблицаИсторииРаботыПользователей.Колонки.Добавить("ИдентификаторПользователя");
		ТаблицаИсторииРаботыПользователей.Колонки.Добавить("Дата");
		ТаблицаИсторииРаботыПользователей.Колонки.Добавить("НавигационнаяСсылка");
		ТаблицаИсторииРаботыПользователей.Колонки.Добавить("СсылкаНаДанные");
		ТаблицаИсторииРаботыПользователей.Колонки.Добавить("КоличествоСобытий");		
		ТекущиеДанныеОтчета.Вставить("ТаблицаИсторииРаботыПользователей", ТаблицаИсторииРаботыПользователей);
				
	КонецЕсли;
	
	Возврат ТекущиеДанныеОтчета;
	
КонецФункции

Процедура ЗаполнитьТаблицуПользователейИнформационнойБазы()
	
	ТекущиеДанныеИсторииРаботы = ДанныеИсторииРаботыПользователей();
	
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеИсторииРаботы.СостоянияИсточниковДанныхОтчета;
	
	ТаблицаРезультат = ТекущиеДанныеИсторииРаботы.ТаблицаПользователейИнформационнойБазы;
	ТаблицаРезультатПолучена = ИсточникДанныхПолучен(СостоянияИсточниковДанныхОтчета, "ТаблицаПользователейИнформационнойБазы");
	
	Если ТаблицаРезультатПолучена Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоллекцияПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ЭлементПользователь Из КоллекцияПользователей Цикл
				
		СтрокаПользователь = ТаблицаРезультат.Добавить();
		СтрокаПользователь.Идентификатор = ЭлементПользователь.УникальныйИдентификатор;
		СтрокаПользователь.Имя = ЭлементПользователь.Имя;
		СтрокаПользователь.ПолноеИмя = ЭлементПользователь.ПолноеИмя;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ТаблицаПользователейИнформационнойБазы", Истина);
	
	СохранитьДанныеИсторииРаботыПользователей(ТекущиеДанныеИсторииРаботы);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуИсторииРаботыПользователей(ТаблицаИсторииРаботыПользователей = Неопределено)
	
	ТекущиеДанныеИсторииРаботы = ДанныеИсторииРаботыПользователей();
	
	СостоянияИсточниковДанныхОтчета = ТекущиеДанныеИсторииРаботы.СостоянияИсточниковДанныхОтчета;
	
	ТаблицаРезультат = ТекущиеДанныеИсторииРаботы.ТаблицаИсторииРаботыПользователей;
	ТаблицаРезультатПолучена = ИсточникДанныхПолучен(СостоянияИсточниковДанныхОтчета, "ТаблицаИсторииРаботыПользователей");
	
	Если ТаблицаРезультатПолучена Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФормируетсяТолькоПоТекущемуПользователю = Ложь;
	ИдентификаторТекущегоПользователя = Неопределено;
	ПолучитьДанныеСредствамиПлатформы = Ложь;
	Если ЭтоФайловаяБаза() Тогда
		ПолучитьДанныеСредствамиПлатформы = Истина;
	ИначеЕсли ТаблицаРезультат.Количество() = 0
		И ТаблицаИсторииРаботыПользователей = Неопределено Тогда
		ПолучитьДанныеСредствамиПлатформы = Истина;
	ИначеЕсли (ТипЗнч(ТаблицаИсторииРаботыПользователей) = Тип("Массив") 
		И ТаблицаИсторииРаботыПользователей.Количество() = 0) Тогда
		ПолучитьДанныеСредствамиПлатформы = Истина;	
	КонецЕсли;
	
	Если ПолучитьДанныеСредствамиПлатформы Тогда
		// Используем стандартные средства чтении истории данных
		КоллекцияДействийПользователя = ИсторияРаботыПользователя.Получить();
		ФормируетсяТолькоПоТекущемуПользователю = Истина;
		ИдентификаторТекущегоПользователя = ИдентификаторТекущегоПользователяИнформационнойБазы();
	ИначеЕсли НЕ ТаблицаИсторииРаботыПользователей = Неопределено Тогда
		Если НЕ ТаблицаИсторииРаботыПользователей = Неопределено
			И ТипЗнч(ТаблицаРезультат) = Тип("ТаблицаЗначений") Тогда
			ТаблицаРезультат.Очистить();	
		КонецЕсли;
		
		КоллекцияДействийПользователя = Новый Массив;	
		Для Каждого ЭлементДопДанных Из ТаблицаИсторииРаботыПользователей Цикл
			
			Попытка
				ЗначениеДаты = Дата(ЭлементДопДанных["Дата"]);
				Если Год(ЗначениеДаты) >= 4000 Тогда
					ЗначениеДаты = ЗначениеДаты - (Дата(2001,1,1) - Дата(1,1,1));
				КонецЕсли;
			Исключение
				ЗначениеДаты = Дата(1,1,1);
			КонецПопытки;
			
			ЗначениеИдентификатораПользователя = ПреобразоватьСлужебныйИдентификатор(
				Прав(ЭлементДопДанных["ИдентификаторПользователя"], 32));
			
			КоллекцияДействийПользователя.Добавить(
				Новый Структура("Дата, НавигационнаяСсылка, ИдентификаторПользователя", 
					ЗначениеДаты,
					ЭлементДопДанных["НавигационнаяСсылка"],
					ЗначениеИдентификатораПользователя));	
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДействия Из КоллекцияДействийПользователя Цикл
		
		СтрокаДействие = ТаблицаРезультат.Добавить();
		Если ФормируетсяТолькоПоТекущемуПользователю Тогда
			СтрокаДействие.ИдентификаторПользователя = ИдентификаторТекущегоПользователя;
		Иначе
			СтрокаДействие.ИдентификаторПользователя = ЭлементДействия.ИдентификаторПользователя;
		КонецЕсли;
		СтрокаДействие.Дата = ЭлементДействия.Дата;
		СтрокаДействие.НавигационнаяСсылка = ЭлементДействия.НавигационнаяСсылка;
		ЧастиНавигационнойСсылки = РазложитьСтрокуВМассивПодстрок(СтрокаДействие.НавигационнаяСсылка, "/");
		КоличествоЧастейНавигационнойСсылки = ЧастиНавигационнойСсылки.Количество();
		
		ОбъектМетаданных = Неопределено;
		СодержаниеНавигационнойСсылки = Неопределено;
		Если КоличествоЧастейНавигационнойСсылки > 1 Тогда
			ИндексПоследнегоЭлемента = КоличествоЧастейНавигационнойСсылки - 1;
			СодержаниеНавигационнойСсылки = ЧастиНавигационнойСсылки[ИндексПоследнегоЭлемента];
			
			// Обработка ссылочного значения навигационной ссылки
			ЗначащиеЧастиСсылки = РазложитьСтрокуВМассивПодстрок(СодержаниеНавигационнойСсылки, "?ref=");
			Если ЗначащиеЧастиСсылки.Количество() = 2 Тогда
			
				ИмяМетаданныхНавигационнойСсылки = ЗначащиеЧастиСсылки[0];
				ИдентификаторНавигационнойСсылки = ЗначащиеЧастиСсылки[1];
				УникальныйИдентификаторСсылка = ПреобразоватьСлужебныйИдентификатор(ИдентификаторНавигационнойСсылки);
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяМетаданныхНавигационнойСсылки);
				
				Если ЭтоСсылочныйТипПолномуИмени(ИмяМетаданныхНавигационнойСсылки)
					И НЕ ОбъектМетаданных = Неопределено Тогда					
				    МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ИмяМетаданныхНавигационнойСсылки);
					МенеджерОбъекта = МенеджерОбъекта[ОбъектМетаданных.Имя];
					Если НЕ МенеджерОбъекта = Неопределено Тогда
						СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(УникальныйИдентификаторСсылка);	
						СтрокаДействие.СсылкаНаДанные = СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;			
		КонецЕсли;
				
		СтрокаДействие.КоличествоСобытий = 1;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Кэширование для таблицы истории работы пользователей НЕ ИСПОЛЬЗУЕТСЯ
	УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, "ТаблицаИсторииРаботыПользователей", Ложь);
	
	СохранитьДанныеИсторииРаботыПользователей(ТекущиеДанныеИсторииРаботы);
	
КонецПроцедуры

Функция ИдентификаторТекущегоПользователяИнформационнойБазы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользовательБазы = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИдентификаторТекущегоПользователяБазы = ТекущийПользовательБазы.УникальныйИдентификатор;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИдентификаторТекущегоПользователяБазы;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	строкаКоманды = ТаблицаКоманд.Добавить();
	строкаКоманды.Идентификатор = Идентификатор;
	строкаКоманды.Представление = Представление;
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	строкаКоманды.Использование = Использование;
	строкаКоманды.Модификатор = Модификатор;
	строкаКоманды.Скрыть = Скрыть;
	
КонецПроцедуры

Функция ПреобразоватьСлужебныйИдентификатор(Знач ИсходныйИдентификатор)
	
	УникальныйИдентификаторСтрокой = Сред(ИсходныйИдентификатор, 25, 8) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 21, 4) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 17, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 1, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 5, 12);	
		
	Если ЭтоУникальныйИдентификатор(УникальныйИдентификаторСтрокой) Тогда
		Возврат Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ЭтоУникальныйИдентификатор(Знач УникальныйИдентификаторСтрокой)
	
	РезультатПроверки = Неопределено;
	
	Попытка
		ПроверочныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
		РезультатПроверки = Истина;
	Исключение
		РезультатПроверки = Ложь;
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЭтоСсылочныйТипПолномуИмени(ПолноеИмя) Экспорт
	
	Перем КлассОМ;
	
	ЧастиИмени = _СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
	КонецЕсли;
	
	ЭтоСсылочныйТип = Ложь;	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		ЭтоСсылочныйТип = Истина;		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		ЭтоСсылочныйТип = Истина;		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		ЭтоСсылочныйТип = Истина;
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		ЭтоСсылочныйТип = Истина;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		ЭтоСсылочныйТип = Истина;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		ЭтоСсылочныйТип = Истина;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		ЭтоСсылочныйТип = Истина;
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		ЭтоСсылочныйТип = Истина;
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		ЭтоСсылочныйТип = Истина;
	КонецЕсли;
	
	Возврат ЭтоСсылочныйТип;
	
КонецФункции

Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = _СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ   = ЧастиИмени[1];
	Иначе 
		Менеджер = Неопределено;
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		
		Если      ЧастиИмени.Количество() = 2 Тогда
			Менеджер = РегистрыРасчета;
			
		ИначеЕсли ЧастиИмени.Количество() = 4 Тогда
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда 
				Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
				ИмяОм = ИмяПодчиненногоОМ;
				
			Иначе 
				Менеджер = Неопределено;
			КонецЕсли;
			
		Иначе
			Менеджер = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
		
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

Функция ТипСУБДПоУмолчанию()
	
	Если ЭтоФайловаяБаза() Тогда
		
		Возврат СписокДоступныхСУБД.Получить(0);
		
	Иначе
		
		Возврат СписокДоступныхСУБД.Получить(1); 
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСписокДоступныхСУБД()
	
	СписокДоступныхСУБД = Новый СписокЗначений;
	
	СписокДоступныхСУБД.Добавить("Файловая", "Файловая");
	СписокДоступныхСУБД.Добавить("SQLServer", "SQLServer");
	СписокДоступныхСУБД.Добавить("PostgreSQL", "PostgreSQL");
		
КонецПроцедуры

Функция ЭтоФайловаяБаза()
	
	СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции

Функция _СтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина) Экспорт
	
	РезультатирующийМассив = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если ВключатьПустые = Ложь
			И НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатирующийМассив.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат РезультатирующийМассив;
	
КонецФункции

Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоиска = "СНачала", Знач НачальнаяПозиция = 1
	, Знач НомерВхождения = 1) Экспорт
	
	ДлинаСтроки = СтрДлина(Строка);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	Если НачальнаяПозиция = 0
		Или НомерВхождения = 0
		Или ДлинаСтроки < НачальнаяПозиция	
		Или (НаправлениеПоиска <> "СНачала" И НаправлениеПоиска <> "СКонца") Тогда
		
		Возврат 0;	
	КонецЕсли; 
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Строка = СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		ОставшаясяЧастьСтроки = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		ОставшаясяЧастьСтроки = Прав(Строка, ДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(ОставшаясяЧастьСтроки, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерТекущегоВхождения = 0;
	Пока НомерТекущегоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(ОставшаясяЧастьСтроки, СтрокаПоиска);
		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки + СтрДлина(Лев(ОставшаясяЧастьСтроки, ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		ОставшаясяЧастьСтроки = Прав(ОставшаясяЧастьСтроки, СтрДлина(ОставшаясяЧастьСтроки) - (ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		НомерТекущегоВхождения = НомерТекущегоВхождения + 1;
		
	КонецЦикла;	
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Возврат ДлинаСтроки - ДлинаПройденнойЧастиСтроки + ДлинаСтрокиПоиска;
	Иначе	
		Возврат ДлинаПройденнойЧастиСтроки + 1 - ДлинаСтрокиПоиска;
	КонецЕсли;
	
КонецФункции

Функция СтрокаЗадомНаперед(Знач Строка) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = _СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = _СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = _СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСсылка(ПроверяемыйТип)
	
	Возврат ПроверяемыйТип <> Тип("Неопределено") 
		И ОписаниеТипаВсеСсылки().СодержитТип(ПроверяемыйТип);
	
КонецФункции

Функция ОписаниеТипаВсеСсылки()
	
	Возврат Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
		Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
			Справочники.ТипВсеСсылки(),
			Документы.ТипВсеСсылки().Типы()),
			ПланыОбмена.ТипВсеСсылки().Типы()),
			Перечисления.ТипВсеСсылки().Типы()),
			ПланыВидовХарактеристик.ТипВсеСсылки().Типы()),
			ПланыСчетов.ТипВсеСсылки().Типы()),
			ПланыВидовРасчета.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()),
			Задачи.ТипВсеСсылки().Типы());
	
КонецФункции

Процедура УстановитьСостояниеИсточникаДанных(СостоянияИсточниковДанныхОтчета, ИмяИсточника, ФлагПолучен)
	
	СостоянияИсточниковДанныхОтчета.Вставить(ИмяИсточника, ФлагПолучен);
	
КонецПроцедуры

Процедура СохранитьДанныеИсторииРаботыПользователей(ДанныеДляСохранения)
	
	АдресХранилищаТекущиеДанныеОтчета = ПоместитьВоВременноеХранилище(ДанныеДляСохранения, ИдентификаторОтчета);
	
КонецПроцедуры

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура Инициализация()
	
	ИдентификаторОтчета = Новый УникальныйИдентификатор;

	ЗаполнитьСписокДоступныхСУБД();
	Если НЕ ЗначениеЗаполнено(ТипСУБД) Тогда
		ТипСУБД = ТипСУБДПоУмолчанию();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТаймаутПодключенияСекунд) Тогда
		ТаймаутПодключенияСекунд = 180;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализация();

#КонецОбласти