
#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Пользователи информационной базы (БСП)");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0.0");
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	РегистрационныеДанные.Вставить("Информация", 
		"Отчет для получения пользователей информационной базы и данных справочника ""Пользователи"", 
		|а также дополнительной информации по ним.");
		
	МассивНазначенийОбработки = НазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	ТаблицаКомандОбработки = ТаблицаКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция НазначениеОбработки() Экспорт 
	
	МассивНазначенийОбработки = Новый Массив;
	 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

Функция ТаблицаКомандОбработки() Экспорт 
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево"));
	
	ДобавитьКоманду(тзКоманд, 
		"ПользователиИнформационнойБазыБСП", 
		"Пользователи информационной базы (БСП)", 
		Ложь, 
		"ОткрытиеФормы", 
		"",
		Ложь);
	
	Возврат тзКоманд;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	ТаблицыДляОтчета = СформироватьТаблицыПользователейИнформационнойБазы();	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПользователиИнформационнойБазы", ТаблицыДляОтчета.ТаблицаПользователей); 
	СтруктураДанных.Вставить("РолиПользователейИнформационнойБазы", ТаблицыДляОтчета.ТаблицаРоли); 
	СтруктураДанных.Вставить("РазделениеДанныхПользователейИнформационнойБазы", ТаблицыДляОтчета.ТаблицаРазделенияДанных);
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");  
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();  
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;  
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки); 
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, СтруктураДанных,ДанныеРасшифровки); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	
	ПроцессорВывода.НачатьВывод(); 
	ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий(); 
	Пока ЭлементРезультатКомпоновки <> Неопределено Цикл 
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатКомпоновки); 
		ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий(); 
	КонецЦикла; 
	ПроцессорВывода.ЗакончитьВывод(); 	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	строкаКоманды = ТаблицаКоманд.Добавить();
	строкаКоманды.Идентификатор = Идентификатор;
	строкаКоманды.Представление = Представление;
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	строкаКоманды.Использование = Использование;
	строкаКоманды.Модификатор = Модификатор;
	строкаКоманды.Скрыть = Скрыть;
	
КонецПроцедуры

Функция СформироватьТаблицыПользователейИнформационнойБазы()
	
	ТаблицыПользователей = Новый Структура;
	ТаблицыПользователей.Вставить("ТаблицаПользователей", Неопределено);
	ТаблицыПользователей.Вставить("ТаблицаРоли", Неопределено);
	ТаблицыПользователей.Вставить("ТаблицаРазделенияДанных", Неопределено);
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрока255 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255));
	ТипСтрока1000 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000));
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	#Область ПользователиИнформационнойБазы
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("АутентификацияOpenID", ТипБулево);
	ТаблицаПользователей.Колонки.Добавить("АутентификацияОС", ТипБулево);
	ТаблицаПользователей.Колонки.Добавить("АутентификацияСтандартная", ТипБулево);
	ТаблицаПользователей.Колонки.Добавить("ЗапрещеноИзменятьПароль", ТипБулево);
	ТаблицаПользователей.Колонки.Добавить("Имя", ТипСтрока255);
	ТаблицаПользователей.Колонки.Добавить("ОсновнойИнтерфейс", ТипСтрока255);
	ТаблицаПользователей.Колонки.Добавить("ПарольУстановлен", ТипБулево);
	ТаблицаПользователей.Колонки.Добавить("ПоказыватьВСпискеВыбора", ТипБулево);
	ТаблицаПользователей.Колонки.Добавить("ПолноеИмя", ТипСтрока255);
	ТаблицаПользователей.Колонки.Добавить("ПользовательОС", ТипСтрока255);
	ТаблицаПользователей.Колонки.Добавить("РежимЗапуска", ТипСтрока255);
	ТаблицаПользователей.Колонки.Добавить("УникальныйИдентификатор", ТипСтрока255);
	ТаблицаПользователей.Колонки.Добавить("Язык", ТипСтрока255);
	ТаблицаПользователей.Колонки.Добавить("ПредупреждатьОбОпасныхДействиях", ТипБулево);
	ТаблицаПользователей.Колонки.Добавить("СохраняемоеЗначениеПароля", ТипСтрока1000); 
	ТаблицаПользователей.Колонки.Добавить("ХешПароляSHA1", ТипСтрока1000); 
	
	// TODO: Добавить поддержку для просмотра информации о двухфакторной аутентификации
	//НастройкиВторогоФактораАутентификации - Массив
	//НастройкиВторогоФактораАутентификации.ИмяШаблонаНастройки = Строка
	//НастройкиВторогоФактораАутентификации.Параметры - Соответствие
		
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		ПользовательЗапись = ТаблицаПользователей.Добавить();
		
		Для Каждого Колонка Из ТаблицаПользователей.Колонки Цикл			
			
			Если НЕ ПеременнаяСодержитСвойство(ПользовательИБ, Колонка.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Колонка.Имя = "ПредупреждатьОбОпасныхДействиях" Тогда
				ЗначениеПоля = Ложь;
				Если ПеременнаяСодержитСвойство(ПользовательИБ, "ЗащитаОтОпасныхДействий") Тогда
					НастройкиЗащитыОтОпасныхДействий = ПользовательИБ["ЗащитаОтОпасныхДействий"];
					Если ПеременнаяСодержитСвойство(НастройкиЗащитыОтОпасныхДействий, Колонка.Имя) Тогда
						ЗначениеПоля = НастройкиЗащитыОтОпасныхДействий[Колонка.Имя];	
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗначениеПоля = ПользовательИБ[Колонка.Имя];
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеПоля) = Тип("Булево") Тогда
				ПользовательЗапись[Колонка.Имя]	= ЗначениеПоля;
			Иначе
				Если Колонка.Имя = "ПользовательОС" Тогда
					ПользовательЗапись[Колонка.Имя]	= СокрЛП(ВРег(Строка(ЗначениеПоля)));	
				Иначе
					ПользовательЗапись[Колонка.Имя]	= СокрЛП(Строка(ЗначениеПоля));
				КонецЕсли;
			КонецЕсли;
			
			Если Колонка.Имя = "СохраняемоеЗначениеПароля"
				И ЗначениеЗаполнено(ЗначениеПоля) Тогда
				СохраненныйХешПароля = ЗначениеПоля;
				ХешSHA1 = СтрЗаменить(Base64Значение(Лев(СохраненныйХешПароля, Найти(СохраненныйХешПароля, ",")- 1)), " ", "");
				ПользовательЗапись.ХешПароляSHA1 = ХешSHA1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицыПользователей.Вставить("ТаблицаПользователей", ТаблицаПользователей);
	
	#КонецОбласти
	
	#Область РолиПольователейИнформационнойБазы
	
	ТаблицаРоли = Новый ТаблицаЗначений;
	ТаблицаРоли.Колонки.Добавить("Имя", ТипСтрока255);
	ТаблицаРоли.Колонки.Добавить("Синоним", ТипСтрока255);
	ТаблицаРоли.Колонки.Добавить("УникальныйИдентификатор", ТипСтрока255);
	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл		
		ИдентификаторПользователя = Строка(ПользовательИБ.УникальныйИдентификатор);		
		Для Каждого РольПользователя Из ПользовательИБ.Роли Цикл
			
			ЗаписьРоль = ТаблицаРоли.Добавить();
			ЗаписьРоль.УникальныйИдентификатор = ИдентификаторПользователя;
			ЗаписьРоль.Имя = РольПользователя.Имя;
			ЗаписьРоль.Синоним = РольПользователя.Синоним;
		
		КонецЦикла;		
	КонецЦикла;
	
	ТаблицыПользователей.ТаблицаРоли = ТаблицаРоли;
	
	#КонецОбласти
	
	#Область РазделениеДанныхПользователейИнформационнойБазы
	
	ТаблицаРазделениеДанных = Новый ТаблицаЗначений;
	ТаблицаРазделениеДанных.Колонки.Добавить("ИмяОбщегоРеквизита", ТипСтрока255);
	ТаблицаРазделениеДанных.Колонки.Добавить("ЗначениеРазделителя", ТипСтрока1000);
	ТаблицаРазделениеДанных.Колонки.Добавить("УникальныйИдентификатор", ТипСтрока255);
	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл		
		ИдентификаторПользователя = Строка(ПользовательИБ.УникальныйИдентификатор);		
		Для Каждого ЗаписьРазделенияДанных Из ПользовательИБ.РазделениеДанных Цикл
			
			ЗаписьРоль = ТаблицаРазделениеДанных.Добавить();
			ЗаписьРоль.УникальныйИдентификатор = ИдентификаторПользователя;
			ЗаписьРоль.ИмяОбщегоРеквизита = ЗаписьРазделенияДанных.Ключ;
			ЗаписьРоль.ЗначениеРазделителя = ЗаписьРазделенияДанных.Значение;
		
		КонецЦикла;		
	КонецЦикла;
	
	ТаблицыПользователей.ТаблицаРазделенияДанных = ТаблицаРазделениеДанных;
	
	#КонецОбласти
	
	Возврат ТаблицыПользователей;
	
КонецФункции

Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)

	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);

	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);

	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
