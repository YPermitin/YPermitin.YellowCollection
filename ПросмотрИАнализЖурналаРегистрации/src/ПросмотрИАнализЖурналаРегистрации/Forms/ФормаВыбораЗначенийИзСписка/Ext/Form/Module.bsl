
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВыборКонкретныхЭлементов") Тогда
		ВыборКонкретныхЭлементов = Параметры.ВыборКонкретныхЭлементов;
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступныеЗначенияОтбора") Тогда
		
		Если ТипЗнч(Параметры.ДоступныеЗначенияОтбора) = Тип("СписокЗначений") Тогда	
			
			Если Параметры.Свойство("ВыборИзДереваЗначений")
				И Параметры.ВыборИзДереваЗначений = Истина Тогда
				
				Элементы.СписокСвернутьВсе.Видимость = Истина;
				Элементы.СписокРазвернутьВсе.Видимость = Истина;
				
				Если Параметры.Свойство("ВыбранныеЗначенияОтбора")
					И ТипЗнч(Параметры.ВыбранныеЗначенияОтбора) = Тип("СписокЗначений") Тогда
					ВыбранныеЗначения = Параметры.ВыбранныеЗначенияОтбора;
				Иначе
					ВыбранныеЗначения = Новый СписокЗначений;
				КонецЕсли;
				ВсеВыбраны = (ВыбранныеЗначения.Количество() = 0);
				
				ОбъектДерева = РеквизитФормыВЗначение("Список");				
				Для Каждого Эл Из Параметры.ДоступныеЗначенияОтбора Цикл
					РазделенноеЗначение = РазложитьСтрокуВМассивПодстрок(Эл.Значение);
					РазделенноеПредставление = РазложитьСтрокуВМассивПодстрок(Эл.Представление);					
					ДобавитьРазделВДерево(ОбъектДерева.Строки, РазделенноеЗначение, РазделенноеПредставление, 0, ВсеВыбраны);								
				КонецЦикла;
				Если ОбъектДерева.Строки.Количество() > 0
					И ВыбранныеЗначения.Количество() > 0 Тогда
					Для Каждого Эл Из ВыбранныеЗначения Цикл
						РазделенноеЗначение = РазложитьСтрокуВМассивПодстрок(Эл.Значение);
						РазделенноеПредставление = РазложитьСтрокуВМассивПодстрок(Эл.Представление);
						ДобавитьРазделВДерево(ОбъектДерева.Строки, РазделенноеЗначение, РазделенноеПредставление, 0, Истина);
					КонецЦикла;
				КонецЕсли;				
				ЗначениеВРеквизитФормы(ОбъектДерева, "Список");				
			Иначе
				Элементы.СписокСвернутьВсе.Видимость = Ложь;
				Элементы.СписокРазвернутьВсе.Видимость = Ложь;
				
				Если Параметры.Свойство("ВыбранныеЗначенияОтбора")
					И ТипЗнч(Параметры.ВыбранныеЗначенияОтбора) = Тип("СписокЗначений") Тогда
					СписокВыбранныхЗначений = Параметры.ВыбранныеЗначенияОтбора;
				Иначе
					СписокВыбранныхЗначений = Новый СписокЗначений;
				КонецЕсли;
				ВсеВыбраны = Ложь;
				Если СписокВыбранныхЗначений.Количество() = 0 Тогда
					ВсеВыбраны = Истина;
				КонецЕсли;
				
				ЭлементыДерева = Список.ПолучитьЭлементы();
				
				Для Каждого Эл Из Параметры.ДоступныеЗначенияОтбора Цикл
					
					НовЗначеиеСписка = ЭлементыДерева.Добавить();
					НовЗначеиеСписка.Пометка = (ВсеВыбраны ИЛИ (СписокВыбранныхЗначений.НайтиПоЗначению(Эл.Значение) <> Неопределено));
					НовЗначеиеСписка.Значение = Эл.Значение;
					НовЗначеиеСписка.Представление = Эл.Представление;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ВыборСделан Тогда
		ОповеститьОВыборе(Список);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	УстановитьПометку(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВсе(Команда)
	
	УстановитьПометку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ВыборСделан = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСистемноеСобытие = ЭтоСистемноеСобытие(ТекДанные.Значение);
	Если НЕ ЭтоСистемноеСобытие = Истина Тогда
		РодительСобытия = ТекДанные.ПолучитьРодителя();
		Если НЕ РодительСобытия = Неопределено Тогда
			ЭтоСистемноеСобытие = ЭтоСистемноеСобытие(РодительСобытия.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВыборКонкретныхЭлементов
		ИЛИ ЭтоСистемноеСобытие Тогда
		УстановитьПометку(ТекДанные.Пометка, ТекДанные.ПолучитьЭлементы());
		УстановитьПометкуВышестоящих(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуВышестоящих(ТекущаяСтрока) Экспорт
	
	ПометкаТекущейСтроки = ТекущаяСтрока.Пометка;
	
	РодительТекущейСтроки = ТекущаяСтрока.ПолучитьРодителя();
	Если РодительТекущейСтроки <> Неопределено Тогда
		
		ПометкаДляВышестоящихЭлементов = Ложь;
		ВсеПодчиненныеСтроки = РодительТекущейСтроки.ПолучитьЭлементы();
		Для Каждого Эл Из ВсеПодчиненныеСтроки Цикл
			ПометкаДляВышестоящихЭлементов = ПометкаДляВышестоящихЭлементов ИЛИ Эл.Пометка;
		КонецЦикла;
		РодительТекущейСтроки.Пометка = ПометкаДляВышестоящихЭлементов;
		
		УстановитьПометкуВышестоящих(РодительТекущейСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	ЭлементыДерева = Список.ПолучитьЭлементы();
	Для Каждого Эл Из ЭлементыДерева Цикл
		ОбработатьСтрокуДерева(Эл.ПолучитьИдентификатор(), Ложь);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	ЭлементыДерева = Список.ПолучитьЭлементы();
	Для Каждого Эл Из ЭлементыДерева Цикл
		ОбработатьСтрокуДерева(Эл.ПолучитьИдентификатор(), Истина);	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

&НаКлиенте
Процедура УстановитьПометку(Значение, КоллекцияЭлементовДерева = Неопределено)
	
	Если КоллекцияЭлементовДерева = Неопределено Тогда
		КоллекцияЭлементовДерева = Список.ПолучитьЭлементы();	
	КонецЕсли;
	
	Для Каждого Эл Из КоллекцияЭлементовДерева Цикл
		
		Эл.Пометка = Значение;
		
		ПодчиненныеЭлементыДерева = Эл.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыДерева.Количество() > 0 Тогда
			УстановитьПометку(Значение, ПодчиненныеЭлементыДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРазделВДерево(СтрокиДерева, МассивЗначений, МассивПредставлений, Уровень, ЗначениеПометки = Ложь)
	
	Если (МассивЗначений.Количество() - 1) >= Уровень
		И (МассивПредставлений.Количество() - 1) >= Уровень Тогда
		
		// Первый уровень
		РезультатПоискаСтрок = СтрокиДерева.НайтиСтроки(Новый Структура("Значение", МассивЗначений.Получить(Уровень)));
		Если РезультатПоискаСтрок.Количество() = 0 Тогда
			НовСтрока = СтрокиДерева.Добавить();			
			НовСтрока.Значение = МассивЗначений.Получить(Уровень);
			НовСтрока.Представление = МассивПредставлений.Получить(Уровень);
			
			Если ВыборКонкретныхЭлементов Тогда
				ПолноеЗначениеСобытия = ПолучитьПолноеЗначениеСоытия(МассивЗначений, Уровень);
				Если НЕ ЭтоСистемноеСобытие(ПолноеЗначениеСобытия)
					И НЕ ВыбранныеЗначения.НайтиПоЗначению(ПолноеЗначениеСобытия) = Неопределено Тогда
					НовСтрока.Пометка = Истина;
				Иначе
					НовСтрока.Пометка = ЗначениеПометки;	
				КонецЕсли;
			Иначе
				НовСтрока.Пометка = ЗначениеПометки;
			КонецЕсли;
			
			ОбрабатываемаяСтрока = НовСтрока;
		Иначе
			ОбрабатываемаяСтрока = РезультатПоискаСтрок.Получить(0);
			Если ВыборКонкретныхЭлементов Тогда
				ПолноеЗначениеСобытия = ПолучитьПолноеЗначениеСоытия(МассивЗначений, Уровень);
				Если НЕ ЭтоСистемноеСобытие(ПолноеЗначениеСобытия) Тогда
					Если НЕ ВыбранныеЗначения.НайтиПоЗначению(ПолноеЗначениеСобытия) = Неопределено Тогда
						ОбрабатываемаяСтрока.Пометка = Истина;
					КонецЕсли;
				Иначе
					ОбрабатываемаяСтрока.Пометка = ЗначениеПометки;
				КонецЕсли;
			Иначе
				ОбрабатываемаяСтрока.Пометка = ЗначениеПометки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьРазделВДерево(ОбрабатываемаяСтрока.Строки, МассивЗначений, МассивПредставлений, (Уровень + 1), ЗначениеПометки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуДерева(ИдентификаторСтроки, Развернуть = Истина) Экспорт
	
	Если Развернуть Тогда
		Элементы.Список.Развернуть(ИдентификаторСтроки);	
	Иначе
		Элементы.Список.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	
	ТекущаяСтрокаДерева = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
	ЭлементыДерева = ТекущаяСтрокаДерева.ПолучитьЭлементы();

	Для Каждого Эл Из ЭлементыДерева Цикл
		ОбработатьСтрокуДерева(Эл.ПолучитьИдентификатор(), Развернуть);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПолноеЗначениеСоытия(МассивЗначений, КонечныйУровень)
	
	УровеньТекущий = 0;
	ПолноеЗначениеСобытия = "";
	Пока УровеньТекущий <= КонечныйУровень Цикл
		ПолноеЗначениеСобытия = ПолноеЗначениеСобытия
		+ МассивЗначений.Получить(УровеньТекущий)
		+ ?(УровеньТекущий = КонечныйУровень, "", ".");
		УровеньТекущий = УровеньТекущий + 1;
	КонецЦикла;
	
	Возврат ПолноеЗначениеСобытия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСистемноеСобытие(ПолноеИмяСобытия)
	
	Возврат (Найти(ПолноеИмяСобытия, "$_") > 0);	
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//	разделитель. Разделитель может иметь любую длину. 
//	Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//	считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр 
//	игнорируются. 
//	Например, 
//	РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//	три из которых - пустые строки, а 
//	РазложитьСтрокуВМассивПодстрок(" ку му", " ") возвратит массив значений из двух элементов 
// 
//	Параметры: 
//	Стр - строка, которую необходимо разложить на подстроки. 
//	Параметр передается по значению. 
//	Разделитель - строка-разделитель, по умолчанию - запятая. 
// 
// 
//	Возвращаемое значение: 
//	массив значений, элементы которого - подстроки 
// 
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".") Экспорт 
	
	МассивСтрок = Новый Массив(); 
	Если Разделитель = " " Тогда 
		Стр = СокрЛП(Стр); 
		Пока Истина Цикл 
			Поз = Найти(Стр,Разделитель); 
			Если Поз=0 Тогда 
				МассивСтрок.Добавить(Стр); 
				Возврат МассивСтрок; 
			КонецЕсли; 
			МассивСтрок.Добавить(Лев(Стр,Поз-1)); 
			Стр = СокрЛ(Сред(Стр,Поз)); 
		КонецЦикла; 
	Иначе 
		ДлинаРазделителя = СтрДлина(Разделитель); 
		Пока Истина Цикл 
			Поз = Найти(Стр,Разделитель); 
			Если Поз=0 Тогда 
				МассивСтрок.Добавить(Стр); 
				Возврат МассивСтрок; 
			КонецЕсли; 
			МассивСтрок.Добавить(Лев(Стр,Поз-1)); 
			Стр = Сред(Стр,Поз+ДлинаРазделителя); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецФункции // глРазложить

#КонецОбласти
