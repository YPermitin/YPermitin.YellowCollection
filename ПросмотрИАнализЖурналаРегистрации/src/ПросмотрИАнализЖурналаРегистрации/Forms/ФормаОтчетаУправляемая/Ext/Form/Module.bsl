
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПрава = Истина;
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		Сообщить("Отсутствуют административные права!", СтатусСообщения.Важное);
		ЕстьПрава = Ложь;
	КонецЕсли;
	Если НЕ ПравоДоступа("ЖурналРегистрации", Метаданные) Тогда
		Сообщить("Недостаточно прав для работы с журналом регистрации!", СтатусСообщения.Важное);
		ЕстьПрава = Ложь;
	КонецЕсли;
	Если НЕ ЕстьПрава Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Важность Цикл
		ВажностьПредставление.Добавить(Эл.Ключ, Эл.Значение, Истина);
	КонецЦикла;
	Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.СтатусТранзакции Цикл
		СтатусТранзакцииПредставление.Добавить(Эл.Ключ, Эл.Значение, Истина);
	КонецЦикла;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");
	Элементы.ГруппаКомандыСправкиИОбратнойСвязи1.Видимость = ОбъектНаСервере.ОтображатьИнформациюАвтора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступныеЗначенияОтборовНаКлиенте();
	ПрочитатьЗначенияФильтровИзПараметровКомпоновщика();	
	
	ПриИзмененииФильтровЖурналаРегистрации(Элементы.Пользователи);
	
	ОбновитьЭлементИсточникаДанныхЖурналаРегистрации();
	
	ПодключитьОбработчикОжидания("СинхронизацияДоступныхЗначенийОтборовПользовательскихНастроек", 1, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки <> Неопределено Тогда
		
		ВыбраннаяВажность =  Настройки.Получить("Отчет.Важность");
		Если ВыбраннаяВажность <> Неопределено Тогда
			КоличествоВыбранных = 0;
			Для Каждого Эл Из ВажностьПредставление Цикл
				Если НЕ ВыбраннаяВажность.НайтиПоЗначению(Эл.Значение) = Неопределено Тогда
					Эл.Пометка = Истина;
					КоличествоВыбранных = КоличествоВыбранных + 1;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоВыбранных = 0 Тогда
				Для Каждого Эл Из ВажностьПредставление Цикл
					Эл.Пометка = Истина;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ВыбранныйСтатусТранзакции =  Настройки.Получить("Отчет.СтатусТранзакции");
		Если ВыбранныйСтатусТранзакции <> Неопределено Тогда
			КоличествоВыбранных = 0;
			Для Каждого Эл Из СтатусТранзакцииПредставление Цикл
				Если НЕ ВыбранныйСтатусТранзакции.НайтиПоЗначению(Эл.Значение) = Неопределено Тогда
					Эл.Пометка = Истина;
					КоличествоВыбранных = КоличествоВыбранных + 1;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоВыбранных = 0 Тогда
				Для Каждого Эл Из СтатусТранзакцииПредставление Цикл
					Эл.Пометка = Истина;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ВыбранныеСеансы =  Настройки.Получить("Отчет.Сеансы");
		Если ВыбранныеСеансы <> Неопределено Тогда
			Отчет.Сеансы.Очистить();
			Для Каждого Эл Из ВыбранныеСеансы Цикл
				СеансыПредставление.Добавить(Эл.Значение, Эл.Представление);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Состояние("Сохранение настроек", "Выполняется сохранение текущий настроек отчета...", , БиблиотекаКартинок.НастроитьСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = ПутьМетаданныхОтчета + ".Форма.ФормаНастроекУправляемая" Тогда
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ВыбранноеЗначение.Вариант);	
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыбранноеЗначение.ПользовательскиеНастройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ВыбранноеЗначение.ФиксированныеНастройки);
		ПрочитатьЗначенияФильтровИзПараметровКомпоновщика(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = ПутьМетаданныхОтчета + ".Форма.ФормаВыбораФайловНаСервере" Тогда
		
		Отчет.ПутьКФайлуЖурналаРегистрации = ВыбранноеЗначение.Путь + ВыбранноеЗначение.Имя;
		
		ПриИзмененииФильтровЖурналаРегистрации(Элементы.ПутьКФайлуЖурналаРегистрации, Истина);				
		
		ОбновитьЭлементИсточникаДанныхЖурналаРегистрации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = Отчет.НачалоПериода;
	Диалог.Период.ДатаОкончания = Отчет.КонецПериода;
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДопПараметры) Экспорт

	Если НЕ Период = Неопределено Тогда
		Отчет.НачалоПериода = Период.ДатаНачала;	
		Отчет.КонецПериода = Период.ДатаОкончания;
		ПриИзмененииФильтровЖурналаРегистрации(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда, РежимФормированияОтчета = Неопределено, СледующаяСтраница = Неопределено, ПоказатьПредупреждениеОбОтсутствииОграниченийПолучаемыхДанных = Истина)
	
	Если СледующаяСтраница = Неопределено Тогда
		СледующаяСтраница = Элементы.ПросмотрИАнализДанных;
	КонецЕсли;
	
	Если РежимФормированияОтчета = Неопределено Тогда
		Если Отчет.КэшироватьДанные И Отчет.КэшЖурналаРегистрации.Количество() > 0 Тогда
			Отчет.РежимФормированияОтчета = "ТолькоФормированиеОтчета";
		Иначе
			Отчет.РежимФормированияОтчета = "ЖурналРегистрацииИОтчет";	
		КонецЕсли;
	КонецЕсли;
	
	Если Отчет.МаксимальноеКоличествоЗаписей = 0
		И ПоказатьПредупреждениеОбОтсутствииОграниченийПолучаемыхДанных = Истина
		И НЕ Отчет.РежимФормированияОтчета = "ТолькоФормированиеОтчета" Тогда

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("РежимФормированияОтчета", РежимФормированияОтчета);
		ДопПараметры.Вставить("Команда", Команда);
		ДопПараметры.Вставить("СледующаяСтраница", СледующаяСтраница);
		ОповещениеПредупреждениеОбОтсутствииОграниченийПолучаемыхДанных 
			= Новый ОписаниеОповещения("ПредупреждениеОбОтсутствииОграниченийПолучаемыхДанныхЗавершение", ЭтаФорма, ДопПараметры);
			
		ПоказатьВопрос(ОповещениеПредупреждениеОбОтсутствииОграниченийПолучаемыхДанных,
			"Количество получаемых записей не ограничено!
			|Это может привести к значительному увеличению 
			|времени формирования отчета!
			|
			|Продолжить?",
			РежимДиалогаВопрос.ДаНет,,,
			"Внимание!");
						
		Возврат;
			
	КонецЕсли;
		
	ЗаписатьЗначенияФильтровВПараметрыКомпоновщика();
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	
	ЭтаФорма.Заголовок = "[" + Отчет.ВремяВыполненияПоследнейОперации + " cек.]";
	Если Отчет.РежимФормированияОтчета = "ТолькоЖурналРегистацииОтчет" Тогда 
		Элементы.Результат.ОтображениеСостояния.Видимость = Истина;
		Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		Элементы.Результат.ОтображениеСостояния.Текст = 
			"Данные для формирования отчета получены и готовы к обработке.
			|Нажмите ""Сформировать"" для получения отчета.";
	КонецЕсли;
	
	Если НЕ Элементы.ОсновнаяПанель.ТекущаяСтраница = СледующаяСтраница Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = СледующаяСтраница;
		ОсновнаяПанельПриСменеСтраницы(Команда, Элементы.ОсновнаяПанель.ТекущаяСтраница); 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОбОтсутствииОграниченийПолучаемыхДанныхЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Сформировать(ДопПараметры.Команда, ДопПараметры.РежимФормированияОтчета, ДопПараметры.СледующаяСтраница, Ложь);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКФильтрам(Команда)

	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ФильтрыЖурналаРегистрации;
	ОсновнаяПанельПриСменеСтраницы(Команда, Элементы.ОсновнаяПанель.ТекущаяСтраница); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЖурналаРегистрацииИСформироватьОтчет(Команда)
	
	Состояние("Выполняется получение данных журнала регистрации
			  |и формирование выбранного варианта отчета.
			  |Пожалуйста, подождите...", 
		БиблиотекаКартинок.ЖурналРегистрации);
		
	Отчет.РежимФормированияОтчета = "ЖурналРегистрацииИОтчет";
	Сформировать(Команда, Отчет.РежимФормированияОтчета, Элементы.ПросмотрИАнализДанных);
			
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеБезФормированияОтчета(Команда)
	
	Состояние("Получение данных...",, 
		"
		|Выполняется получение данных журнала регистрации
		|Пожалуйста, подождите...", 
		БиблиотекаКартинок.ЖурналРегистрации);
		
	Отчет.РежимФормированияОтчета = "ТолькоЖурналРегистацииОтчет";
	Сформировать(Команда, Отчет.РежимФормированияОтчета, Элементы.ПросмотрИАнализДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКОтчету(Команда)
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПросмотрИАнализДанных;
	ОсновнаяПанельПриСменеСтраницы(Команда, Элементы.ОсновнаяПанель.ТекущаяСтраница); 

КонецПроцедуры

&НаКлиенте
Процедура ПользовательскиеНастройкиОтчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Вариант", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", Отчет.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
	ПараметрыФормы.Вставить("КлючВарианта", ЭтаФорма.КлючТекущегоВарианта);
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", ЭтаФорма.КлючТекущихПользовательскихНастроек);
	ПараметрыФормы.Вставить("Отбор", Новый Структура());
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта", ЭтаФорма.ПредставлениеТекущегоВарианта);
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", ЭтаФорма.ПредставлениеТекущихПользовательскихНастроек);
	ПараметрыФормы.Вставить("Расшифровка", ЭтаФорма.КлючТекущегоВарианта);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Ложь);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ОткрытьФорму(ПутьМетаданныхОтчета+".Форма.ФормаНастроекУправляемая", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СинхронизацияДоступныхЗначенийОтборовПользовательскихНастроек() Экспорт
	
	Если ПользовательскиеНастройкиБылиОбновленыНаСервере Тогда
		ОбновитьДоступныеЗначенияОтборовНаКлиенте();
		ПрочитатьЗначенияФильтровИзПараметровКомпоновщика();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	ОбновитьДоступныеЗначенияОтборовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ОбновитьДоступныеЗначенияОтборовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
		
	ПрочитатьЗначенияФильтровИзПараметровКомпоновщика(Настройки.Элементы);
	
	ОбновитьДоступныеЗначенияОтборовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ОбновитьДоступныеЗначенияОтборовНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанныеРасшифровки = ПолучитьЗначениеРасшифровкиНаСервере(ТекОбласть.Расшифровка);
	Если НЕ ПолученныеДанныеРасшифровки.ПолеРасшифровки = Неопределено
		И НЕ ПолученныеДанныеРасшифровки.ЗначениеРасшифровки = Неопределено Тогда
		Если ПолученныеДанныеРасшифровки.ЭтоСсылка Тогда
			ПоказатьЗначение(Неопределено, ПолученныеДанныеРасшифровки.ЗначениеРасшифровки);
		Иначе
			ПоказатьПредупреждение(, ПолученныеДанныеРасшифровки.ЗначениеРасшифровки,, "Расшифровка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРасшифровкиНаСервере(ИндексРашсифровки)
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ПолеРасшифровки", Неопределено);
	СтруктураРезультат.Вставить("ЗначениеРасшифровки", Неопределено);	
	СтруктураРезультат.Вставить("ЭтоСсылка", Ложь);	
	
	Если НЕ ИндексРашсифровки = Неопределено Тогда
		ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
		ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы.Получить(ИндексРашсифровки);
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляРашсифровки = ЭлементРасшифровки.ПолучитьПоля();
			Если ПоляРашсифровки.Количество() = 1 Тогда
				ПолеРасшифровки = ПоляРашсифровки.Получить(0);
				СтруктураРезультат.ПолеРасшифровки = ПолеРасшифровки.Поле;
				Если ТипЗнч(ПолеРасшифровки.Значение) = Тип("Строка")
					ИЛИ ТипЗнч(ПолеРасшифровки.Значение) = Тип("Дата") 
					ИЛИ ТипЗнч(ПолеРасшифровки.Значение) = Тип("Булево")
					ИЛИ ТипЗнч(ПолеРасшифровки.Значение) = Тип("Число")
					ИЛИ ТипЗнч(ПолеРасшифровки.Значение) = Тип("УникальныйИдентификатор") Тогда
					СтруктураРезультат.ЗначениеРасшифровки = ПолеРасшифровки.Значение;
				ИначеЕсли ТипЗнч(ПолеРасшифровки.Значение) = Тип("Неопределено") Тогда
					СтруктураРезультат.ПолеРасшифровки = Неопределено;		
					СтруктураРезультат.ЗначениеРасшифровки = Неопределено;
				ИначеЕсли ТипЗнч(ПолеРасшифровки.Значение) = Тип("УровеньЖурналаРегистрации") Тогда		
					СтруктураРезультат.ЗначениеРасшифровки = Строка(ПолеРасшифровки.Значение);
				ИначеЕсли ЭтоСсылка(ТипЗнч(ПолеРасшифровки.Значение)) Тогда
					СтруктураРезультат.ЗначениеРасшифровки = ПолеРасшифровки.Значение;
					СтруктураРезультат.ЭтоСсылка = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			// Действие не определено	
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиТекущейСтраницы()
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ФильтрыЖурналаРегистрации Тогда
		Элементы.ПолучитьДанныеЖурналаРегистрации.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПросмотрИАнализДанных Тогда
		Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
		ОбновитьДоступныеЗначенияОтборовНаКлиенте();
	КонецЕсли;	
	Элементы.ВернутьсяКОтчету.Видимость = (Отчет.КэшЖурналаРегистрации.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьНастройкиТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалаВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	Если Элемент.Имя = "КолонкиЖурналаРегистрации" Тогда
		
		ЗначенияВыбора = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.КолонкиЖурналаРегистрации Цикл
			ЗначенияВыбора.Добавить(Эл.Значение, Эл.Значение);
		КонецЦикла;
		ПараметрыФормы.Вставить("ДоступныеЗначенияОтбора", ЗначенияВыбора);
		ПараметрыФормы.Вставить("ВыбранныеЗначенияОтбора", Отчет.КолонкиЖурналаРегистрации);
		ПараметрыФормы.Вставить("ВыборИзДереваЗначений", Истина);
		ПараметрыФормы.Вставить("СтроковойРазделительКатегорий", ".");
		ИмяФормыВыбора = "ФормаВыбораЗначенийИзСписка";

	ИначеЕсли Элемент.Имя = "События" Тогда
		
		ЗначенияВыбора = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Событие Цикл
			ЗначенияВыбора.Добавить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
		ЗначенияВыбора.СортироватьПоПредставлению();
		ПараметрыФормы.Вставить("ДоступныеЗначенияОтбора", ЗначенияВыбора);
		ПараметрыФормы.Вставить("ВыбранныеЗначенияОтбора", Отчет.События);
		ПараметрыФормы.Вставить("ВыборИзДереваЗначений", Истина);
		ПараметрыФормы.Вставить("СтроковойРазделительКатегорий", ".");
		ПараметрыФормы.Вставить("ВыборКонкретныхЭлементов", Истина);
		ИмяФормыВыбора = "ФормаВыбораЗначенийИзСписка";
		
	ИначеЕсли Элемент.Имя = "РабочиеСерверы" Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияВыбора = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.РабочийСервер Цикл
			ЗначенияВыбора.Добавить(Эл, Эл);
		КонецЦикла;
		ЗначенияВыбора.СортироватьПоПредставлению();
		ПараметрыФормы.Вставить("ДоступныеЗначенияОтбора", ЗначенияВыбора);
		ПараметрыФормы.Вставить("ВыбранныеЗначенияОтбора", Отчет.РабочиеСерверы);
		ПараметрыФормы.Вставить("СтроковойРазделительКатегорий", ".");
		ИмяФормыВыбора = "ФормаВыбораЗначенийИзСписка";
		
	ИначеЕсли Элемент.Имя = "ОсновныеIPПорты" Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияВыбора = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.ОсновнойIPПорт Цикл
			ЗначенияВыбора.Добавить(Эл, Эл);
		КонецЦикла;
		ЗначенияВыбора.СортироватьПоПредставлению();
		ПараметрыФормы.Вставить("ДоступныеЗначенияОтбора", ЗначенияВыбора);
		ПараметрыФормы.Вставить("ВыбранныеЗначенияОтбора", Отчет.ОсновныеIPПорты);
		ПараметрыФормы.Вставить("СтроковойРазделительКатегорий", ".");
		ИмяФормыВыбора = "ФормаВыбораЗначенийИзСписка";
		
	ИначеЕсли Элемент.Имя = "ВспомогательныеIPПорты" Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияВыбора = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.ВспомогательныйIPПорт Цикл
			ЗначенияВыбора.Добавить(Эл, Эл);
		КонецЦикла;
		ЗначенияВыбора.СортироватьПоПредставлению();
		ПараметрыФормы.Вставить("ДоступныеЗначенияОтбора", ЗначенияВыбора);
		ПараметрыФормы.Вставить("ВыбранныеЗначенияОтбора", Отчет.ВспомогательныеIPПорты);
		ПараметрыФормы.Вставить("СтроковойРазделительКатегорий", ".");		
		ИмяФормыВыбора = "ФормаВыбораЗначенийИзСписка";
		
	ИначеЕсли Элемент.Имя = "Компьютеры" Тогда
		
		КоллекцияДоступныхЗначений = Новый СписокЗначений;
		КоллекцияДоступныхЗначенийМассив = Отчет.КэшДоступныхЗначенийОтборов.Компьютер;
		КоллекцияВыбранныхЗначений = Отчет.Компьютеры;		
		Для Каждого Эл ИЗ КоллекцияДоступныхЗначенийМассив Цикл
			КоллекцияДоступныхЗначений.Добавить(Эл, Эл);	
		КонецЦикла;
		КоллекцияДоступныхЗначений.СортироватьПоПредставлению();		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВсеЗначения", КоллекцияДоступныхЗначений);
		ПараметрыФормы.Вставить("МоиЗначения", КоллекцияВыбранныхЗначений);
		ИмяФормыВыбора = "ФормаВыбораЗначенийОтбора";
		
	ИначеЕсли Элемент.Имя = "Метаданные" Тогда
		
		НачальноеЗначениеВыбора = Неопределено;
		ФильтрПоСсылочнымМетаданным = Новый СписокЗначений;
		ФильтрПоОбъектамМетаданных = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Метаданные Цикл
			ФильтрПоОбъектамМетаданных.Добавить(Эл.Ключ, Эл.Значение);
			ФильтрПоСсылочнымМетаданным.Добавить(Эл.Ключ);
			Если НачальноеЗначениеВыбора = Неопределено Тогда
				НачальноеЗначениеВыбора = Эл.Ключ;	
			КонецЕсли;
			ИмяМетаданныхВерхнегоУровня = ПолучитьКорневоеИмяМетаданных(Эл.Ключ, Ложь);
			Если ФильтрПоСсылочнымМетаданным.НайтиПоЗначению(ИмяМетаданныхВерхнегоУровня) = Неопределено Тогда
				ФильтрПоСсылочнымМетаданным.Добавить(ИмяМетаданныхВерхнегоУровня);
			КонецЕсли;
		КонецЦикла;
		
		УникальныйИдентификаторИсточник = ЭтаФорма.УникальныйИдентификатор;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыборЕдинственного", Ложь);
		ПараметрыФормы.Вставить("ВыборИзДереваЗначений", Истина);
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", НачальноеЗначениеВыбора);
		ПараметрыФормы.Вставить("КоллекцииВыбираемыхОбъектовМетаданных", ФильтрПоСсылочнымМетаданным);
		ПараметрыФормы.Вставить("УникальныйИдентификаторИсточник", УникальныйИдентификаторИсточник);
		ПараметрыФормы.Вставить("ФильтрПоОбъектамМетаданных", ФильтрПоОбъектамМетаданных);
		ПараметрыФормы.Вставить("ВыбранныеОбъектыМетаданных", Отчет.ФильтрМетаданные);
		ПараметрыФормы.Вставить("ТолькоВыбираемыеОбъектыМетаданных", Истина);
		ИмяФормыВыбора = "ВыборОбъектовМетаданных";
		
	ИначеЕсли Элемент.Имя = "Комментарий" Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("КомментарийНачалоВыбораЗавершение", ЭтаФорма);
		РедактируемыйКомментарий = Элементы.Комментарий.ТекстРедактирования;
		ПоказатьВводСтроки(ОповещениеОЗавершении, РедактируемыйКомментарий, "Отбор по комментарию", , Истина);
		ИмяФормыВыбора = Неопределено;
		
	ИначеЕсли Элемент.Имя = "Пользователи" Тогда
		
		КоллекцияДоступныхЗначений = Новый СписокЗначений;
		КоллекцияДоступныхЗначенийСоответствие = Отчет.КэшДоступныхЗначенийОтборов.Пользователь;
		КоллекцияВыбранныхЗначений = Отчет.Пользователи;
		
		Для Каждого Эл ИЗ КоллекцияДоступныхЗначенийСоответствие Цикл
			КоллекцияДоступныхЗначений.Добавить(Строка(Эл.Ключ), Эл.Значение);	
		КонецЦикла;
		КоллекцияДоступныхЗначений.СортироватьПоПредставлению();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВсеЗначения", КоллекцияДоступныхЗначений);
		ПараметрыФормы.Вставить("МоиЗначения", КоллекцияВыбранныхЗначений);
		ИмяФормыВыбора = "ФормаВыбораЗначенийОтбора";
		
	ИначеЕсли Элемент.Имя = "Приложения" Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияВыбора = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.ИмяПриложения Цикл
			ЗначенияВыбора.Добавить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
		ЗначенияВыбора.СортироватьПоПредставлению();
		ПараметрыФормы.Вставить("ДоступныеЗначенияОтбора", ЗначенияВыбора);
		ПараметрыФормы.Вставить("ВыбранныеЗначенияОтбора", Отчет.Приложения);
		ИмяФормыВыбора = "ФормаВыбораЗначенийИзСписка";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФормыВыбора) Тогда
		ОткрытьФорму(ПутьМетаданныхОтчета + ".Форма." + ИмяФормыВыбора, ПараметрыФормы, Элемент, УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Имя = "Приложения" Тогда
		Отчет.Приложения.Очистить();
		КоличествоВыбранныхЭлементов = 0;
		ВыбранныеЗначения = ВыбранноеЗначение.ПолучитьЭлементы();
		Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
			Если Эл.Пометка Тогда
				КоличествоВыбранныхЭлементов = КоличествоВыбранныхЭлементов + 1;	
			КонецЕсли;
		КонецЦикла;
		
		ВсеВыбраны = (КоличествоВыбранныхЭлементов = Отчет.КэшДоступныхЗначенийОтборов.ИмяПриложения.Количество());
		Если НЕ ВсеВыбраны Тогда
			Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
				Если Эл.Пометка Тогда
					Отчет.Приложения.Добавить(Эл.Значение, Эл.Представление);	
				КонецЕсли;
			КонецЦикла;
		Иначе
			Отчет.Приложения.Очистить();	
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "КолонкиЖурналаРегистрации" Тогда
		Отчет.КолонкиЖурналаРегистрации.Очистить();
		КоличествоВыбранныхЭлементов = 0;
		ВыбранныеЗначения = ВыбранноеЗначение.ПолучитьЭлементы();
		Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
			Если Эл.Пометка Тогда
				КоличествоВыбранныхЭлементов = КоличествоВыбранныхЭлементов + 1;	
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
			Если Эл.Пометка Тогда
				Отчет.КолонкиЖурналаРегистрации.Добавить(Эл.Значение, Эл.Представление);	
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Элемент.Имя = "События" Тогда
		Отчет.События.Очистить();
		Для Каждого Эл Из ВыбранноеЗначение.ПолучитьЭлементы() Цикл
			ПодчиненныеЭлементыДерева = Эл.ПолучитьЭлементы();
			Если Эл.Пометка Тогда
				Если НЕ (ЭтоСистемноеСобытие(Эл.Значение)
					И РазложитьСтрокуВМассивПодстрок(Эл.Значение, ".").Количество() <= 1)
					ИЛИ ПодчиненныеЭлементыДерева.Количество() = 0 Тогда
					Отчет.События.Добавить(Эл.Значение, Эл.Представление);
				КонецЕсли;				
			КонецЕсли;			
			ДобавитьФильтрЖурналаРегистрацииИзСтрокиДерева(ПодчиненныеЭлементыДерева, Отчет.События, Строка(Эл.Значение), Строка(Эл.Представление));		
		КонецЦикла;
		Если Отчет.События.Количество() = Отчет.КэшДоступныхЗначенийОтборов.Событие.Количество() Тогда
			Отчет.События.Очистить();
		КонецЕсли;
		ОбновитьПредставлениеСобытийОтбора();
	ИначеЕсли Элемент.Имя = "РабочиеСерверы" Тогда
		Отчет.РабочиеСерверы.Очистить();
		КоличествоВыбранныхЭлементов = 0;
		ВыбранныеЗначения = ВыбранноеЗначение.ПолучитьЭлементы();
		Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
			Если Эл.Пометка Тогда
				КоличествоВыбранныхЭлементов = КоличествоВыбранныхЭлементов + 1;	
			КонецЕсли;
		КонецЦикла;
		
		ВсеВыбраны = (КоличествоВыбранныхЭлементов = Отчет.КэшДоступныхЗначенийОтборов.РабочийСервер.Количество());
		Если НЕ ВсеВыбраны Тогда
			Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
				Если Эл.Пометка Тогда
					Отчет.РабочиеСерверы.Добавить(Эл.Значение, Эл.Представление);	
				КонецЕсли;
			КонецЦикла;
		Иначе
			Отчет.РабочиеСерверы.Очистить();	
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "ОсновныеIPПорты" Тогда
		Отчет.РабочиеСерверы.Очистить();
		КоличествоВыбранныхЭлементов = 0;
		ВыбранныеЗначения = ВыбранноеЗначение.ПолучитьЭлементы();
		Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
			Если Эл.Пометка Тогда
				КоличествоВыбранныхЭлементов = КоличествоВыбранныхЭлементов + 1;	
			КонецЕсли;
		КонецЦикла;
		
		ВсеВыбраны = (КоличествоВыбранныхЭлементов = Отчет.КэшДоступныхЗначенийОтборов.ОсновнойIPПорт.Количество());
		Если НЕ ВсеВыбраны Тогда
			Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
				Если Эл.Пометка Тогда
					Отчет.ОсновныеIPПорты.Добавить(Эл.Значение, Эл.Представление);	
				КонецЕсли;
			КонецЦикла;
		Иначе
			Отчет.ОсновныеIPПорты.Очистить();	
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "ВспомогательныеIPПорты" Тогда
		Отчет.ВспомогательныеIPПорты.Очистить();
		КоличествоВыбранныхЭлементов = 0;
		ВыбранныеЗначения = ВыбранноеЗначение.ПолучитьЭлементы();
		Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
			Если Эл.Пометка Тогда
				КоличествоВыбранныхЭлементов = КоличествоВыбранныхЭлементов + 1;	
			КонецЕсли;
		КонецЦикла;
		
		ВсеВыбраны = (КоличествоВыбранныхЭлементов = Отчет.КэшДоступныхЗначенийОтборов.ВспомогательныйIPПорт.Количество());
		Если НЕ ВсеВыбраны Тогда
			Для Каждого Эл ИЗ ВыбранныеЗначения Цикл
				Если Эл.Пометка Тогда
					Отчет.ВспомогательныеIPПорты.Добавить(Эл.Значение, Эл.Представление);	
				КонецЕсли;
			КонецЦикла;
		Иначе
			Отчет.ВспомогательныеIPПорты.Очистить();	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФильтровЖурналаРегистрации(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораПодбораНаСервере(Элемент.Имя, ВыбранноеЗначение);
	
	ПриИзмененииФильтровЖурналаРегистрации(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодбораНаСервере(ИмяЭлемента, ВыбранноеЗначение)
	
	Если ИмяЭлемента = "Пользователи" Тогда
		Отчет.Пользователи.Очистить();
		Для Каждого Эл ИЗ ВыбранноеЗначение Цикл
			Отчет.Пользователи.Добавить(Эл.Значение, ПолучитьПредставлениеЗначенияПоФильтру(Эл.Значение, Эл.Представление, ИмяЭлемента));	
		КонецЦикла;
	ИначеЕсли ИмяЭлемента = "Компьютеры" Тогда
		Отчет.Компьютеры.Очистить();
		Для Каждого Эл ИЗ ВыбранноеЗначение Цикл
			Отчет.Компьютеры.Добавить(Эл.Значение, ПолучитьПредставлениеЗначенияПоФильтру(Эл.Значение, Эл.Представление, ИмяЭлемента));	
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбораЗавершение(ЗначениеСтрока, ДопПараметры) Экспорт
	
	Если ЗначениеСтрока <> Неопределено Тогда
		Отчет.Комментарий = ЗначениеСтрока;
		ПриИзмененииФильтровЖурналаРегистрации(Элементы.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСобытийОтбора()
	
	СобытияПредставление.Очистить();
	Для Каждого Эл Из Отчет.События Цикл
		СобытияПредставление.Добавить(Эл.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияОчистка(Элемент, СтандартнаяОбработка)
	
	Отчет.События.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбратнаяСвязь(Команда)
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ОбратнаяСвязьПродолжение", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеЗавершения, "http://develplatform.ru/About-us/Contact-us?messageSubject=1С:Просмотр%20и%20анализ%20журнала%20регистрации%20[Отчет]");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбратнаяСвязьПродолжение(КодВозврата, ДопПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФильтровЖурналаРегистрации(Элемент, ОбновитьКэшДоступныхЗначенийНаСервере = Ложь)
	
	Если НЕ ТипЗнч(Элемент) = Тип("ПолеФормы")
		И НЕ ТипЗнч(Элемент) = Тип("ТаблицаФормы")
		И НЕ (ТипЗнч(Элемент) = Тип("ДекорацияФормы") И Элемент.Имя = "ПутьКФайлуЖурналаРегистрации") Тогда
		Возврат;
	КонецЕсли;
	
	#Область ОбновлениеКэшаДоступныхЗначенийНаСервере
	Если ОбновитьКэшДоступныхЗначенийНаСервере = Истина Тогда
		ИнициализацияДоступныхЗначенийОтборовЖурналаРегистрацииНаСервере();
	КонецЕсли;
	#КонецОбласти
	
	#Область ИзменениеСвязанныхДанных
	ЗаполнитьСвязанныеДанныеФильтровЖурналаРегистрации(Элемент.Имя);
	#КонецОбласти
	
	#Область СинхронизацияНастроекФильтровИНастроекСКД
	ЗаписатьЗначенияФильтровВПараметрыКомпоновщика();	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеДанныеФильтровЖурналаРегистрации(ИмяЭлемента = Неопределено)

	ОбработатьВсеДанные = (ИмяЭлемента = Неопределено);
	Если ОбработатьВсеДанные ИЛИ ИмяЭлемента = "Важность" Тогда
		
		Отчет.Важность.Очистить();
		КоличествоВыбранных = 0;
		Для Каждого Эл Из ВажностьПредставление Цикл
			Если Эл.Пометка Тогда
				Отчет.Важность.Добавить(Эл.Значение, Эл.Представление);
				КоличествоВыбранных = КоличествоВыбранных + 1;
			КонецЕсли;
		КонецЦикла;
		Если Отчет.КэшДоступныхЗначенийОтборов.Важность.Количество() = КоличествоВыбранных Тогда
			Отчет.Важность.Очистить();	
		КонецЕсли;
		
	КонецЕсли;
	Если ОбработатьВсеДанные ИЛИ ИмяЭлемента = "СтатусТранзакции" Тогда
		
		Отчет.СтатусТранзакции.Очистить();
		КоличествоВыбранных = 0;
		Для Каждого Эл Из СтатусТранзакцииПредставление Цикл
			Если Эл.Пометка Тогда
				Отчет.СтатусТранзакции.Добавить(Эл.Значение, Эл.Представление);
				КоличествоВыбранных = КоличествоВыбранных + 1;
			КонецЕсли;
		КонецЦикла;
		Если Отчет.КэшДоступныхЗначенийОтборов.СтатусТранзакции.Количество() = КоличествоВыбранных Тогда
			Отчет.СтатусТранзакции.Очистить();	
		КонецЕсли;
		
	КонецЕсли;
	Если ОбработатьВсеДанные ИЛИ ИмяЭлемента = "Сеансы" Тогда
		
		Отчет.Сеансы.Очистить();
		КоличествоВыбранных = 0;
		Для Каждого Эл Из СеансыПредставление Цикл
			Отчет.Сеансы.Добавить(Эл.Значение, Эл.Представление);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиПредставленийДанныхФильтровЖурналаРегистрации()

	СеансыПредставление.Очистить();
	Для Каждого Эл Из Отчет.Сеансы Цикл
		СеансыПредставление.Добавить(Эл.Значение, Эл.Значение, Истина);
	КонецЦикла;
	
	ВажностьКоличествоВыбранных = 0;
	Для Каждого Эл Из Отчет.Важность Цикл
		ВажностьКоличествоВыбранных = ВажностьКоличествоВыбранных + 1;	
	КонецЦикла; 	
	ВажностьВсеВыбраны = (Отчет.КэшДоступныхЗначенийОтборов.Важность.Количество() = ВажностьКоличествоВыбранных) 
		ИЛИ ВажностьКоличествоВыбранных = 0;
	Для Каждого Эл Из ВажностьПредставление Цикл
		Если ВажностьВсеВыбраны Тогда
			Эл.Пометка = Истина;
		Иначе
			НайденныйЭлемент = Отчет.Важность.НайтиПоЗначению(Эл.Значение);
			Если НайденныйЭлемент <> Неопределено Тогда
				Эл.Пометка = Истина;
			Иначе
				Эл.Пометка = Ложь;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтатусТранзакцииКоличествоВыбранных = 0;
	Для Каждого Эл Из Отчет.СтатусТранзакции Цикл
		СтатусТранзакцииКоличествоВыбранных = СтатусТранзакцииКоличествоВыбранных + 1;	
	КонецЦикла; 	
	СтатусТранзакцииВсеВыбраны = (Отчет.КэшДоступныхЗначенийОтборов.СтатусТранзакции.Количество() = СтатусТранзакцииКоличествоВыбранных) 
		ИЛИ СтатусТранзакцииКоличествоВыбранных = 0;
	Для Каждого Эл Из СтатусТранзакцииПредставление Цикл
		Если СтатусТранзакцииВсеВыбраны Тогда
			Эл.Пометка = Истина;
		Иначе
			НайденныйЭлемент = Отчет.СтатусТранзакции.НайтиПоЗначению(Эл.Значение);
			Если НайденныйЭлемент <> Неопределено Тогда
				Эл.Пометка = Истина;
			Иначе
				Эл.Пометка = Ложь;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Отчет.КолонкиЖурналаРегистрации.Количество() = 0 Тогда
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.КолонкиЖурналаРегистрации Цикл
			Отчет.КолонкиЖурналаРегистрации.Добавить(Эл.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура УстановитьУровеньГруппировок(Команда)
	
	ИмяКоманды = Команда.Имя;
	УровеньГруппировкиСтрока = СтрЗаменить(ИмяКоманды, "УровеньГруппировок_", "");
	Уровень = Неопределено;
	Попытка
		Уровень = Число(УровеньГруппировкиСтрока) - 1;
	Исключение
	КонецПопытки;
	
	Если НЕ Уровень = Неопределено Тогда
		
		У = Результат.КоличествоУровнейГруппировокСтрок() - 1;
		Пока У > Уровень Цикл
			Результат.ПоказатьУровеньГруппировокСтрок(У);
			У = У - 1;
		КонецЦикла;
		Результат.ПоказатьУровеньГруппировокСтрок(Уровень);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЖурналаРегистрацииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", "ВыборФайла");
	ПараметрыФормы.Вставить("ДоступныеРасширения", "*.lgf;*.lgd");
	ПараметрыФормы.Вставить("Заголовок", "Выбор файла журнала регистрации на сервере");
	Если ЗначениеЗаполнено(Отчет.ПутьКФайлуЖурналаРегистрации) Тогда
		ФайлЖурналаРегистрации = Новый Файл(Отчет.ПутьКФайлуЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекущийКаталог", ФайлЖурналаРегистрации.Путь);
	КонецЕсли;		
	ОткрытьФорму(ПутьМетаданныхОтчета + ".Форма.ФормаВыбораФайловНаСервере", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьИсточникЖурналаРегистрации(Команда)
	
	Отчет.ПутьКФайлуЖурналаРегистрации = Неопределено;
	
	ПриИзмененииФильтровЖурналаРегистрации(Элементы.ПутьКФайлуЖурналаРегистрации, Истина);
	
	ОбновитьЭлементИсточникаДанныхЖурналаРегистрации();			
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

&НаСервере
Процедура ОбновитьЭлементИсточникаДанныхЖурналаРегистрации()
	
	ЭлементФормыИсточника = Элементы.ПутьКФайлуЖурналаРегистрации;
	ПутьКФайлуЖурналаРегистрации = Отчет.ПутьКФайлуЖурналаРегистрации;
	
	Если ЗначениеЗаполнено(ПутьКФайлуЖурналаРегистрации) Тогда
		ФайлЖурналарегистрации = Новый Файл(ПутьКФайлуЖурналаРегистрации);
		Элементы.НастройкаЖурналаРегистрацииКартинка.Картинка = БиблиотекаКартинок.ОткрытьФайл;
		ЭлементФормыИсточника.Заголовок = "Файл """+ФайлЖурналарегистрации.Имя+"""";
		ЭлементФормыИсточника.РасширеннаяПодсказка.Заголовок = "Используется журнал регистрации из внешнего файла """+Отчет.ПутьКФайлуЖурналаРегистрации+"""";
	Иначе	
		Элементы.НастройкаЖурналаРегистрацииКартинка.Картинка = БиблиотекаКартинок.ЖурналРегистрации;
		ЭлементФормыИсточника.Заголовок = "Журнал этой инф. базы";
		ЭлементФормыИсточника.РасширеннаяПодсказка.Заголовок = "Используется журнал регистрации текущей информационной базы";
	КонецЕсли;
		
	ОбновитьДоступныеЗначенияОтборовНаСервере();
	
КонецПроцедуры

// Функция - Проверка является ли событие журнала регистрации системным
//	Если в имени присутствует зарезервированная последовательность
//	символов "$_", то событие считается системным.
//	Например, "_$Data$_.New" считается системным событием.
//
// Параметры:
//  ПолноеИмяСобытия - строка - имя события журнала регистрации
// 
// Возвращаемое значение:
//   - 
//
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСистемноеСобытие(ПолноеИмяСобытия)
	
	Возврат (Найти(ПолноеИмяСобытия, "$_") > 0);	
	
КонецФункции

// Процедура - Обновляет доступные значения отборов журнала регистрации 
//
&НаСервере
Процедура ОбновитьДоступныеЗначенияОтборовНаСервере() 
	
	ОбъектОтчета = РеквизитФормыВЗначение("Отчет");
	ПутьМетаданныхОтчета = ОбъектОтчета.Метаданные().ПолноеИмя();
	Если ЗначениеЗаполнено(ОбъектОтчета.ПутьКФайлуЖурналаРегистрации) Тогда
		ОбъектОтчета.Инициализация();
	КонецЕсли;
	ОбъектОтчета.ОбновитьДоступныеЗначенияОтборов();
	ЗначениеВРеквизитФормы(ОбъектОтчета, "Отчет");
	
	ПользовательскиеНастройкиБылиОбновленыНаСервере = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеЗначенияОтборовНаКлиенте() 
	
	МассивОбрабатываемыхВидовНастроек = Новый Массив;
	МассивОбрабатываемыхВидовНастроек.Добавить("Настройки");
		
	Для Каждого ВидНастройки Из МассивОбрабатываемыхВидовНастроек Цикл
		
		ТекущиеНастройкиСКД = Отчет.КомпоновщикНастроек[ВидНастройки];
		ТекущиеНастройкиОтборов = ТекущиеНастройкиСКД.Отбор;
		ТекущиеДоступныеПоляОтборов = ТекущиеНастройкиОтборов.ДоступныеПоляОтбора.Элементы;
		
		// Имя приложения
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("ИмяПриложения");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.ИмяПриложения Цикл
			СписокОтбор.Добавить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;
		
		// Уровень журнала регистрации
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("Уровень");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Уровень Цикл
			СписокОтбор.Добавить(Эл.Значение, Эл.Представление);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;
		
		// Имя пользователя
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("ИмяПользователя");
		СписокИменПриложенийОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Пользователь Цикл
			СписокИменПриложенийОтбор.Добавить(Эл.Значение, Эл.Значение);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокИменПриложенийОтбор;
		
		// Пользователь
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("Пользователь");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Пользователь Цикл
			СписокОтбор.Добавить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;
		
		// Компьютер
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("Компьютер");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Компьютер Цикл
			СписокОтбор.Добавить(Эл, Эл);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;
		
		// Событие
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("Событие");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Событие Цикл
			СписокОтбор.Добавить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;
		
		// Метаданные
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("Метаданные");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.Метаданные Цикл
			СписокОтбор.Добавить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;
		
		// Статус транзакции
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("СтатусТранзакции");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.СтатусТранзакции Цикл
			СписокОтбор.Добавить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;

		// Рабочий сервер
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("РабочийСервер");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.РабочийСервер Цикл
			СписокОтбор.Добавить(Эл, Эл);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;

		// Рабочий сервер
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("РабочийСервер");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.РабочийСервер Цикл
			СписокОтбор.Добавить(Эл, Эл);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;

		// Основной IP-порт
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("ОсновнойIPПорт");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.ОсновнойIPПорт Цикл
			СписокОтбор.Добавить(Эл, Эл);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;
		
		// Вспомогательный IP-порт
		ПолеОтбора = ТекущиеДоступныеПоляОтборов.Найти("ВспомогательныйIPПорт");
		СписокОтбор = Новый СписокЗначений;
		Для Каждого Эл Из Отчет.КэшДоступныхЗначенийОтборов.ВспомогательныйIPПорт Цикл
			СписокОтбор.Добавить(Эл, Эл);
		КонецЦикла;
		ПолеОтбора.ДоступныеЗначения = СписокОтбор;

	КонецЦикла;
	
КонецПроцедуры

// Процедура - Сохраняет значения фильтров журнала регистрации в пользовательские настройки
//
&НаКлиенте
Процедура ЗаписатьЗначенияФильтровВПараметрыКомпоновщика()
	
	Для Каждого Эл Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Эл) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка(Эл.Параметр) = "ФильтрНачалоПериода" Тогда
			Эл.Значение = Отчет.НачалоПериода;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрКонецПериода" Тогда
			Эл.Значение = Отчет.КонецПериода;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрМаксимальноеКоличествоЗаписей" Тогда
			Эл.Значение = Отчет.МаксимальноеКоличествоЗаписей;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрКомментарий" Тогда
			Эл.Значение = Отчет.Комментарий;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрПредставлениеДанных" Тогда
			Эл.Значение = Отчет.ПредставлениеДанных;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрТранзакция" Тогда
			Эл.Значение = Отчет.Транзакция;	
		КонецЕсли;   
		Если Строка(Эл.Параметр) = "ФильтрДанные" Тогда
			Эл.Значение = Отчет.Данные;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ПутьКФайлуЖурналаРегистрации" Тогда
			Эл.Значение = Отчет.ПутьКФайлуЖурналаРегистрации;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрКолонкиЖурналаРегистрации"
			ИЛИ Строка(Эл.Параметр) = "ФильтрВажность"
			ИЛИ Строка(Эл.Параметр) = "ФильтрПользователи"
			ИЛИ Строка(Эл.Параметр) = "ФильтрСобытия"
			ИЛИ Строка(Эл.Параметр) = "ФильтрКомпьютеры"
			ИЛИ Строка(Эл.Параметр) = "ФильтрПриложения" 
			ИЛИ Строка(Эл.Параметр) = "ФильтрМетаданные"
			ИЛИ Строка(Эл.Параметр) = "ФильтрСтатусТранзакции"
			ИЛИ Строка(Эл.Параметр) = "ФильтрСеансы"
			ИЛИ Строка(Эл.Параметр) = "ФильтрРабочиеСерверы"
			ИЛИ Строка(Эл.Параметр) = "ФильтрОсновныеIPПорты" Тогда
			Если Эл.Значение = Неопределено Тогда
				Эл.Значение = Новый СписокЗначений;
			ИначеЕсли ТипЗнч(Эл.Значение) = Тип("Строка")
				ИЛИ ТипЗнч(Эл.Значение) = Тип("Число") Тогда
				ЗначениеСписком = Новый СписокЗначений;
				ЗначениеСписком.Добавить(Эл.Значение);
				Эл.Значение = ЗначениеСписком;
			КонецЕсли;
			ИмяПараметраСтрокой = Строка(Эл.Параметр);
			ИмяРеквизитаЗначенийФильтра = ПолучитьИмяРеквизитаФильтра(Отчет, ИмяПараметраСтрокой); 
			Эл.Значение.Очистить();
			Для Каждого ЗначФильтра ИЗ Отчет[ИмяРеквизитаЗначенийФильтра] Цикл
				Эл.Значение.Добавить(ЗначФильтра.Значение, ЗначФильтра.Представление);	
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Считывает значения фильтров журнала регистрации из пользовательских настроек
//
// Параметры:
//  КоллекцияПользовательскихНастроек	 - ПользовательскиеНастройкиКомпоновкиДанных - Пользовательские настройки
//		из которых нужно прочитать значения фильтров журнала регистрации.
//		
//		В простом случае туда нужно передать коллекцию пользовательских настроек из отчета 
//		"Отчет.КомпоновщикНастроек.ПользовательскиеНастройки"
//
&НаСервере
Процедура ПрочитатьЗначенияФильтровИзПараметровКомпоновщика(Знач КоллекцияПользовательскихНастроек = Неопределено)
	
	Если ТипЗнч(КоллекцияПользовательскихНастроек) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		КоллекцияНастроек = КоллекцияПользовательскихНастроек.Элементы;
	Иначе
		КоллекцияНастроек = КоллекцияПользовательскихНастроек;
	КонецЕсли;
	Если КоллекцияНастроек = Неопределено Тогда
		КоллекцияНастроек = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	КонецЕсли;
	
	Для Каждого Эл Из КоллекцияНастроек Цикл
		
		Если ТипЗнч(Эл) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка(Эл.Параметр) = "ФильтрНачалоПериода" Тогда
			Если ТипЗнч(Эл.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				Отчет.НачалоПериода = Эл.Значение.Дата;	
			Иначе
				Отчет.НачалоПериода = Эл.Значение;	
			КонецЕсли;
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрКонецПериода" Тогда
			Если ТипЗнч(Эл.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				Отчет.КонецПериода = Эл.Значение.Дата;	
			Иначе
				Отчет.КонецПериода = Эл.Значение;	
			КонецЕсли;
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрМаксимальноеКоличествоЗаписей" Тогда
			Отчет.МаксимальноеКоличествоЗаписей = Эл.Значение;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрКомментарий" Тогда
			Отчет.Комментарий = Эл.Значение;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрПредставлениеДанных" Тогда
			Отчет.ПредставлениеДанных = Эл.Значение;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрТранзакция" Тогда
			Отчет.Транзакция = Эл.Значение;	
		КонецЕсли; 
		Если Строка(Эл.Параметр) = "ФильтрДанные" Тогда
			Отчет.Данные = Эл.Значение;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ПутьКФайлуЖурналаРегистрации" Тогда
			Отчет.ПутьКФайлуЖурналаРегистрации = Эл.Значение;	
		КонецЕсли;
		Если Строка(Эл.Параметр) = "ФильтрКолонкиЖурналаРегистрации"
			ИЛИ Строка(Эл.Параметр) = "ФильтрВажность"
			ИЛИ Строка(Эл.Параметр) = "ФильтрПользователи"
			ИЛИ Строка(Эл.Параметр) = "ФильтрСобытия"
			ИЛИ Строка(Эл.Параметр) = "ФильтрКомпьютеры"
			ИЛИ Строка(Эл.Параметр) = "ФильтрПриложения" 
			ИЛИ Строка(Эл.Параметр) = "ФильтрМетаданные"
			ИЛИ Строка(Эл.Параметр) = "ФильтрСтатусТранзакции"
			ИЛИ Строка(Эл.Параметр) = "ФильтрСеансы"
			ИЛИ Строка(Эл.Параметр) = "ФильтрРабочиеСерверы"
			ИЛИ Строка(Эл.Параметр) = "ФильтрОсновныеIPПорты"
			ИЛИ Строка(Эл.Параметр) = "ФильтрВспомогательныеIPПорты" Тогда
			Если Эл.Значение = Неопределено Тогда
				Эл.Значение = Новый СписокЗначений;
			ИначеЕсли ТипЗнч(Эл.Значение) = Тип("Строка")
				ИЛИ ТипЗнч(Эл.Значение) = Тип("Число") Тогда
				ЗначениеСписком = Новый СписокЗначений;
				ЗначениеСписком.Добавить(Эл.Значение);
				Эл.Значение = ЗначениеСписком;
			КонецЕсли;
			ИмяПараметраСтрокой = Строка(Эл.Параметр);
			ИмяРеквизитаЗначенийФильтра = ПолучитьИмяРеквизитаФильтра(Отчет, ИмяПараметраСтрокой); 
			Отчет[ИмяРеквизитаЗначенийФильтра].Очистить();
			Для Каждого ЗначФильтра ИЗ Эл.Значение Цикл
				Если ЭтоДоступноеЗначениеФильтра(ИмяРеквизитаЗначенийФильтра, ЗначФильтра.Значение) Тогда
					Отчет[ИмяРеквизитаЗначенийФильтра].Добавить(ЗначФильтра.Значение, ПолучитьПредставлениеЗначенияПоФильтру(ЗначФильтра.Значение, ЗначФильтра.Представление, ИмяРеквизитаЗначенийФильтра));	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСпискиПредставленийДанныхФильтровЖурналаРегистрации();
	ОбновитьПредставлениеСобытийОтбора();
	ОбновитьЭлементИсточникаДанныхЖурналаРегистрации();
	ПользовательскиеНастройкиБылиОбновленыНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ЭтоДоступноеЗначениеФильтра(Знач ИмяФильтра, Знач ЗначениеФильтра) 

	//ЗначениеФильтра = ПолучитьПредставлениеЗначенияПоФильтру(ЗначениеФильтра, "", ИмяФильтра);
	ИмяФильтра = ПолучитьИмяСвойстваСДоступнымиЗначениямиФильтра(ИмяФильтра);
	Если Отчет.КэшДоступныхЗначенийОтборов.Свойство(ИмяФильтра) Тогда
		КоллекцияДоступныхЗначений = Отчет.КэшДоступныхЗначенийОтборов[ИмяФильтра];
	Иначе
		КоллекцияДоступныхЗначений = Неопределено;
	КонецЕсли;
	
	ЗначениеДоступноДляВыбора = Истина; // По умолчанию считаем значение доступным
	
	Если ТипЗнч(КоллекцияДоступныхЗначений) = Тип("Массив") Тогда
		ЗначениеДоступноДляВыбора = 
			КоллекцияДоступныхЗначений.Найти(ЗначениеФильтра) <> Неопределено;
	ИначеЕсли ТипЗнч(КоллекцияДоступныхЗначений) = Тип("СписокЗначений") Тогда
		ЗначениеДоступноДляВыбора = 
			КоллекцияДоступныхЗначений.НайтиПоЗначению(ЗначениеФильтра) <> Неопределено;
	ИначеЕсли ТипЗнч(КоллекцияДоступныхЗначений) = Тип("Соответствие") Тогда
		МассивДоступныхЗначений = Новый Массив;
		Для Каждого Эл Из КоллекцияДоступныхЗначений Цикл
			МассивДоступныхЗначений.Добавить(Эл.Ключ);
		КонецЦикла;
		ЗначениеДоступноДляВыбора =
			МассивДоступныхЗначений.Найти(ЗначениеФильтра) <> Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеДоступноДляВыбора;
	
КонецФункции

&НаСервере
Процедура ИнициализацияДоступныхЗначенийОтборовЖурналаРегистрацииНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Отчет");
	ОбъектНаСервере.ИнициализацияДоступныхЗначенийОтборовЖурналаРегистрации();
	ЗначениеВРеквизитФормы(ОбъектНаСервере, "Отчет");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяСвойстваСДоступнымиЗначениямиФильтра(ИмяФильтраИсходное)
	
	ИмяСвойстваДоступныхЗначений = ИмяФильтраИсходное;
	
	Если ИмяФильтраИсходное = "События" Тогда
		ИмяСвойстваДоступныхЗначений = "Событие";
	ИначеЕсли ИмяФильтраИсходное = "Пользователи" Тогда
		ИмяСвойстваДоступныхЗначений = "Пользователь";
	ИначеЕсли ИмяФильтраИсходное = "Компьютеры" Тогда
		ИмяСвойстваДоступныхЗначений = "Компьютер";
	ИначеЕсли ИмяФильтраИсходное = "ВспомогательныеIPПорты" Тогда
		ИмяСвойстваДоступныхЗначений = "ВспомогательныйIPПорт";
	ИначеЕсли ИмяФильтраИсходное = "Приложения" Тогда
		ИмяСвойстваДоступныхЗначений = "ИмяПриложения";
	ИначеЕсли ИмяФильтраИсходное = "РабочиеСерверы" Тогда
		ИмяСвойстваДоступныхЗначений = "РабочийСервер";
	ИначеЕсли ИмяФильтраИсходное = "ОсновныеIPПорты" Тогда
		ИмяСвойстваДоступныхЗначений = "ОсновнойIPПорт";
	ИначеЕсли ИмяФильтраИсходное = "ФильтрМетаданные" Тогда
		ИмяСвойстваДоступныхЗначений = "Метаданные";
	КонецЕсли;

	Возврат ИмяСвойстваДоступныхЗначений;
	
КонецФункции

// Функция - Получить представление значения фильтра журнала регистрации по колонке
//
// Параметры:
//  Значение		 - Строка - Значение фильтра журнала регистрации
//  Представление	 - Строка - Представление для значения фильтра журнала регистрации
//		Если передается, то функция возвращает его. 
//  ИмяКолонки		 - Строка - Имя колонки журнала регистрации
//		Например: "Сеансы", "СтатусТранзакции" или "События"
// 
// Возвращаемое значение:
//   - Строка - Представление значения фильта журнала регистрации
//
&НаСервере
Функция ПолучитьПредставлениеЗначенияПоФильтру(Значение, Представление, ИмяКолонки) 
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Возврат Представление;
	КонецЕсли;
	
	Если ИмяКолонки = "Сеансы" Тогда
		Возврат Строка(Значение);
	ИначеЕсли ИмяКолонки = "Приложения" Тогда
		Если Значение = "Designer" Тогда
			Возврат "Конфигуратор";
		ИначеЕсли Значение = "BackgroundJob" Тогда
			Возврат "Фоновое задание";
		ИначеЕсли Значение = "1CV8C" Тогда
			Возврат "Тонкий клиент";
		ИначеЕсли Значение = "1CV8" Тогда
			Возврат "Толстый клиент";
		Иначе
			Возврат Значение;
		КонецЕсли;                               
	ИначеЕсли ИмяКолонки = "СтатусТранзакции" Тогда
		Если Значение = "НетТранзакции" Тогда
			Возврат "Нет транзакции";
		ИначеЕсли Значение = "Зафиксирована" Тогда
			Возврат "Зафиксирована";
		ИначеЕсли Значение = "НеЗавершена" Тогда
			Возврат "Не завершена";
		ИначеЕсли Значение = "Отменена" Тогда
			Возврат "Отменена";
		Иначе
			Возврат Значение;
		КонецЕсли;
	ИначеЕсли ИмяКолонки = "События" Тогда
		#Область ПредставленияСобытий
		Если Значение = "_$Access$_.Access" Тогда 
			Возврат "Доступ. Доступ";
		ИначеЕсли Значение = "_$Access$_.AccessDenied" Тогда 
			Возврат "Доступ. Отказ в доступе";
		ИначеЕсли Значение = "_$Data$_.Delete" Тогда  
			Возврат "Данные. Удаление";
		ИначеЕсли Значение = "_$Data$_.New" Тогда  
			Возврат "Данные. Добавление";
		ИначеЕсли Значение = "_$Data$_.Post" Тогда   
			Возврат "Данные. Проведение";
		ИначеЕсли Значение = "_$Data$_.TotalsMaxPeriodUpdate" Тогда   
			Возврат "Данные. Изменение максимального периода рассчитанных итогов";
		ИначеЕсли Значение = "_$Data$_.TotalsMinPeriodUpdate" Тогда   
			Возврат "Данные. Изменение минимального периода рассчитанных итогов";
		ИначеЕсли Значение = "_$Data$_.Unpost" Тогда   
			Возврат "Данные. Отмена проведения";
		ИначеЕсли Значение = "_$Data$_.Update" Тогда   
			Возврат "Данные. Изменение";
		ИначеЕсли Значение = "_$Data$_.SetStandardODataInterfaceContent" Тогда   
			Возврат "Данные. Изменение состава стандартного интерфейса OData";
		ИначеЕсли Значение = "_$InfoBase$_.ConfigExtensionUpdate" Тогда   
			Возврат "Информационная база. Изменение конфигурации";
		ИначеЕсли Значение = "_$InfoBase$_.ConfigUpdate" Тогда   
			Возврат "Информационная база. Изменение конфигурации базы данных";
		ИначеЕсли Значение = "_$InfoBase$_.DBConfigBackgroundUpdateStart" Тогда   
			Возврат "Информационная база. Запуск фонового обновления";
		ИначеЕсли Значение = "_$InfoBase$_.DBConfigBackgroundUpdateFinish" Тогда   
			Возврат "Информационная база. Завершение фонового обновления";
		ИначеЕсли Значение = "_$InfoBase$_.DBConfigBackgroundUpdateCancel" Тогда   
			Возврат "Информационная база. Отмена фонового обновления";
		ИначеЕсли Значение = "_$InfoBase$_.DBConfigBackgroundUpdateSuspend" Тогда   
			Возврат "Информационная база. Приостановка (пауза) процесса фонового обновления";
		ИначеЕсли Значение = "_$InfoBase$_.DBConfigBackgroundUpdateResume" Тогда   
			Возврат "Информационная база. Продолжение (после приостановки) процесса фонового обновления";
		ИначеЕсли Значение = "_$InfoBase$_.DBConfigUpdate" Тогда   
			Возврат "Информационная база. Изменение";
		ИначеЕсли Значение = "_$InfoBase$_.DBConfigExtensionUpdate" Тогда   
			Возврат "Информационная база. Изменение расширения конфигурации базы данных";
		ИначеЕсли Значение = "_$InfoBase$_.EventLogSettingsUpdate" Тогда   
			Возврат "Доступ. Доступ";
		ИначеЕсли Значение = "_$Access$_.Access" Тогда   
			Возврат "Информационная база. Изменение параметров журнала регистрации";
		ИначеЕсли Значение = "_$InfoBase$_.InfoBaseAdmParamsUpdate" Тогда   
			Возврат "Информационная база. Изменение параметров информационной базы";
		ИначеЕсли Значение = "_$InfoBase$_.MasterNodeUpdate" Тогда   
			Возврат "Информационная база. Изменение главного узла";
		ИначеЕсли Значение = "_$InfoBase$_.RegionalSettingsUpdate" Тогда   
			Возврат "Информационная база. Изменение региональных установок";
		ИначеЕсли Значение = "_$InfoBase$_.EraseData" Тогда   
			Возврат "Информационная база. Удаление данных информационной баз";
		ИначеЕсли Значение = "_$InfoBase$_.TARImportant" Тогда   
			Возврат "Информационная база. Удаление данных информационной баз";
		ИначеЕсли Значение = "_$InfoBase$_.TARImportant" Тогда   
			Возврат "Тестирование и исправление. Ошибка";
		ИначеЕсли Значение = "_$InfoBase$_.TARInfo" Тогда   
			Возврат "Тестирование и исправление. Сообщение";			
		ИначеЕсли Значение = "_$InfoBase$_.TARMess" Тогда   
			Возврат "Тестирование и исправление. Предупреждение";
		ИначеЕсли Значение = "_$Job$_.Cancel" Тогда   
			Возврат "Фоновое задание. Отмена";
		ИначеЕсли Значение = "_$Job$_.Fail" Тогда   
			Возврат "Фоновое задание. Ошибка выполнения";
		ИначеЕсли Значение = "_$Job$_.Terminate" Тогда   
			Возврат "Фоновое задание. Принудительное завершение";
		ИначеЕсли Значение = "_$Job$_.Start" Тогда   
			Возврат "Фоновое задание. Запуск";
		ИначеЕсли Значение = "_$Job$_.Succeed" Тогда   
			Возврат "Фоновое задание. Успешное завершение";
		ИначеЕсли Значение = "_$PerformError$_" Тогда   
			Возврат "Ошибка выполнения";
		ИначеЕсли Значение = "_$Session$_.Authentication" Тогда   
			Возврат "Сеанс. Аутентификация";
		ИначеЕсли Значение = "_$Session$_.AuthenticationError" Тогда   
			Возврат "Сеанс. Ошибка аутентификации";
		ИначеЕсли Значение = "_$Session$_.ConfigExtensionApplyError" Тогда   
			Возврат "Сеанс. Ошибка применения расширения конфигурации"; 			
		ИначеЕсли Значение = "_$Session$_.Finish" Тогда   
			Возврат "Сеанс. Завершение";
		ИначеЕсли Значение = "_$Session$_.Start" Тогда   
			Возврат "Сеанс. Начало";
		ИначеЕсли Значение = "_$Transaction$_.Begin" Тогда   
			Возврат "Транзакция. Начало";
		ИначеЕсли Значение = "_$Transaction$_.Commit" Тогда   
			Возврат "Транзакция. Фиксация";
		ИначеЕсли Значение = "_$Transaction$_.Rollback" Тогда   
			Возврат "Транзакция. Отмена";
		ИначеЕсли Значение = "_$User$_.Delete" Тогда    
			Возврат "Пользователи. Удаление";
		ИначеЕсли Значение = "_$User$_.New" Тогда   
			Возврат "Пользователи. Добавление";
		ИначеЕсли Значение = "_$User$_.Update" Тогда   
			Возврат "Пользователи. Изменение";
		ИначеЕсли Значение = "_$OpenIDProvider$_.PositiveAssertion" Тогда   
			Возврат "Провайдер OpenID. Подтверждено";
		ИначеЕсли Значение = "_$OpenIDProvider$_.NegativeAssertion" Тогда   
			Возврат "Провайдер OpenID. Отклонено";
		Иначе
			Возврат Значение;
		КонецЕсли;
		#КонецОбласти
	ИначеЕсли ИмяКолонки = "Пользователи" Тогда
		Если ТипЗнч(Отчет.КэшДоступныхЗначенийОтборов.Пользователь) = Тип("Соответствие") Тогда
			Попытка
				ИдентификаторПользователя = Новый УникальныйИдентификатор(Значение);
			Исключение
				ИдентификаторПользователя = "";
			КонецПопытки;
			ПредставлениеПользователя = Отчет.КэшДоступныхЗначенийОтборов.Пользователь.Получить(ИдентификаторПользователя);
			Если ЗначениеЗаполнено(ПредставлениеПользователя) Тогда
				Возврат ПредставлениеПользователя;
			Иначе
				Возврат " ";
			КонецЕсли;
		Иначе
			Возврат Строка(Значение);
		КонецЕсли;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Функция - Получает имя реквизита отчета, в котором хранятся значения фильтра
//
// Параметры:
//  Отчет				 - ОтчетОбъект - Объект отчета, для которого получаем имя реквизита фильтра
//  ИмяПараметраСтрокой	 - Строка - Имя фильтра в отчете
// 
// Возвращаемое значение:
//   - Строка - имя реквизита, в котором хранятся значения фильтра
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаФильтра(Отчет, ИмяПараметраСтрокой)
	
	ИмяРеквизитаЗначенийФильтра = ИмяПараметраСтрокой;
	
	Если НЕ ПеременнаяСодержитСвойство(Отчет, ИмяПараметраСтрокой) Тогда
		ИмяРеквизитаЗначенийФильтра = Прав(ИмяПараметраСтрокой, СтрДлина(ИмяПараметраСтрокой) - 6);
	КонецЕсли;
	
	Возврат ИмяРеквизитаЗначенийФильтра;
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//	разделитель. Разделитель может иметь любую длину. 
//	Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//	считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр 
//	игнорируются. 
//	Например, 
//	РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//	три из которых - пустые строки, а 
//	РазложитьСтрокуВМассивПодстрок(" ку му", " ") возвратит массив значений из двух элементов 
// 
//	Параметры: 
//	Стр - строка, которую необходимо разложить на подстроки. 
//	Параметр передается по значению. 
//	Разделитель - строка-разделитель, по умолчанию - запятая. 
// 
// 
//	Возвращаемое значение: 
//	массив значений, элементы которого - подстроки 
// 
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".") Экспорт 
	
	МассивСтрок = Новый Массив(); 
	Если Разделитель = " " Тогда 
		Стр = СокрЛП(Стр); 
		Пока Истина Цикл 
			Поз = Найти(Стр,Разделитель); 
			Если Поз=0 Тогда 
				МассивСтрок.Добавить(Стр); 
				Возврат МассивСтрок; 
			КонецЕсли; 
			МассивСтрок.Добавить(Лев(Стр,Поз-1)); 
			Стр = СокрЛ(Сред(Стр,Поз)); 
		КонецЦикла; 
	Иначе 
		ДлинаРазделителя = СтрДлина(Разделитель); 
		Пока Истина Цикл 
			Поз = Найти(Стр,Разделитель); 
			Если Поз=0 Тогда 
				МассивСтрок.Добавить(Стр); 
				Возврат МассивСтрок; 
			КонецЕсли; 
			МассивСтрок.Добавить(Лев(Стр,Поз-1)); 
			Стр = Сред(Стр,Поз+ДлинаРазделителя); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецФункции // глРазложить

// Функция - Преобразует имя метаданных к можественному или одиночному виду
//	Например "Справочник.Номенклатура" в "Справочники.Номенклатура" и наоборот
//
// Параметры:
//  ИмяМетаданныхИсходное	 - Строка - Имя метаданных для преобразования
//  МножественноеНаОдиночное - Булево - Принцип преобразования, из множественно в одиночное или наоборот
//		Если ИСТИНА, то "Справочники.Номенклатура" в "Справочник.Номенклатура"
//		Если ЛОЖЬ, то "Справочник.Номенклатура" в "Справочники.Номенклатура"
// 
// Возвращаемое значение:
//   - Строка - преобразованное имя метаданных
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКорневоеИмяМетаданных(Знач ИмяМетаданныхИсходное, МножественноеНаОдиночное = Истина)
		
	СоответствиеЗамены = Новый Соответствие;
	СоответствиеЗамены.Вставить("Подсистема", "Подсистемы");
	СоответствиеЗамены.Вставить("ОбщийМодуль", "ОбщиеМодули");
	СоответствиеЗамены.Вставить("ПараметрСеанса", "ПараметрыСеанса");
	СоответствиеЗамены.Вставить("Роль", "Роли");
	СоответствиеЗамены.Вставить("ПланОбмена", "ПланыОбмена");
	СоответствиеЗамены.Вставить("КритерийОтбора", "КритерииОтбора");
	СоответствиеЗамены.Вставить("ПодпискаНаСобытие", "ПодпискиНаСобытия");
	СоответствиеЗамены.Вставить("РегламентнеЗадание", "РегламентныеЗадания");
	СоответствиеЗамены.Вставить("ФункциональнаяОпция", "ФункциональныеОпции");
	СоответствиеЗамены.Вставить("ПараметрФункциональнойОпции", "ПараметрыФункциональныхОпций");
	СоответствиеЗамены.Вставить("ХранилищеНастроек", "ХранилищаНастроек");
	СоответствиеЗамены.Вставить("ОбщаяФорма", "ОбщиеФормы");
	СоответствиеЗамены.Вставить("ОбщаяКоманда", "ОбщиеКоманды");
	СоответствиеЗамены.Вставить("ГруппаКоманд", "ГруппыКоманд");
	СоответствиеЗамены.Вставить("Интерфейс", "Интерфейсы");
	СоответствиеЗамены.Вставить("ОбщийМакет", "ОбщиеМакеты");
	СоответствиеЗамены.Вставить("ОбщаяКартинка", "ОбщиеКартинки");
	СоответствиеЗамены.Вставить("ПакетXDTO", "ПакетыXDTO");
	СоответствиеЗамены.Вставить("WebСервис", "WebСервисы");
	СоответствиеЗамены.Вставить("WSСсылка", "WSСсылки");
	СоответствиеЗамены.Вставить("Стиль", "Стили");
	СоответствиеЗамены.Вставить("Язык", "Языки");	
	СоответствиеЗамены.Вставить("Константа", "Константы");
	СоответствиеЗамены.Вставить("Справочник", "Справочники");
	СоответствиеЗамены.Вставить("Документ", "Документы");
	СоответствиеЗамены.Вставить("ЖурналДокументов", "ЖурналыДокументов");
	СоответствиеЗамены.Вставить("Перечисление", "Перечисления");
	СоответствиеЗамены.Вставить("Отчет", "Отчеты");
	СоответствиеЗамены.Вставить("Обработка", "Обработки");
	СоответствиеЗамены.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	СоответствиеЗамены.Вставить("ПланСчетов", "ПланыСчетов");
	СоответствиеЗамены.Вставить("ПланВидовРасчета", "ПланыВидовРасчета");
	СоответствиеЗамены.Вставить("РегистрСведений", "РегистрыСведений");
	СоответствиеЗамены.Вставить("РегистрНакопления", "РегистрыНакопления");
	СоответствиеЗамены.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии");
	СоответствиеЗамены.Вставить("РегистрРасчета", "РегистрыРасчета");
	СоответствиеЗамены.Вставить("БизнесПроцесс", "БизнесПроцессы");
	СоответствиеЗамены.Вставить("Задача", "Задачи"); 		
	
	Для Каждого Эл Из СоответствиеЗамены Цикл
		Если МножественноеНаОдиночное Тогда
			Если Найти(ИмяМетаданныхИсходное, Эл.Значение) > 0 Тогда
				ИмяМетаданныхИсходное = СтрЗаменить(ИмяМетаданныхИсходное, Эл.Значение, Эл.Ключ);
				Прервать;
			КонецЕсли;
		Иначе
			Если Найти(ИмяМетаданныхИсходное, Эл.Ключ) > 0 Тогда
				ИмяМетаданныхИсходное = СтрЗаменить(ИмяМетаданныхИсходное, Эл.Ключ, Эл.Значение);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧастиИмениМетаданных = РазложитьСтрокуВМассивПодстрок(ИмяМетаданныхИсходное);
	Если ЧастиИмениМетаданных.Количество() > 0 Тогда
		Возврат ЧастиИмениМетаданных.Получить(0);
	Иначе
		Возврат ИмяМетаданныхИсходное;
	КонецЕсли;

КонецФункции

// Процедура - Добавляет фильтр журнала регистрации из строки дерева
//
// Параметры:
//  ПодчиненныеЭлементыДерева	 - КоллекцияСтрокДереваЗначений - Коллекция строк дерева значения для обработки
//  СписокОтборов				 - СписокЗначений - Коллекция отборов, которые будут дополняться фильтрами из дерева
//  ТекущееЗначениеСтрока		 - Строка - Текущее значение отбора журнала регистрации
//  ТекущееПредставлениеСтрока	 - Строка - Текущее представление отбора журнала регистрации
//
&НаКлиенте
Процедура ДобавитьФильтрЖурналаРегистрацииИзСтрокиДерева(ПодчиненныеЭлементыДерева, СписокОтборов, Знач ТекущееЗначениеСтрока, Знач ТекущееПредставлениеСтрока)	
	
	Для Каждого Эл Из ПодчиненныеЭлементыДерева Цикл
		ТекущееЗначениеСтрокаДерева = ТекущееЗначениеСтрока + "." + Эл.Значение;
		ТекущееПредставлениеСтрокаДерева = ТекущееПредставлениеСтрока + "." + Эл.Представление;
		ПодчиненныеЭлементыСтрокиДерева = Эл.ПолучитьЭлементы();
		Если Эл.Пометка Тогда
			Отчет.События.Добавить(ТекущееЗначениеСтрокаДерева, ТекущееПредставлениеСтрокаДерева);
		КонецЕсли;
		ДобавитьФильтрЖурналаРегистрацииИзСтрокиДерева(ПодчиненныеЭлементыСтрокиДерева, Отчет.События, ТекущееЗначениеСтрокаДерева, ТекущееПредставлениеСтрокаДерева);		
	КонецЦикла;
	
КонецПроцедуры

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Возвращаемое значение:
//  Булево.
//
&НаСервере
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

// Универсальная функция для проверки наличия 
// свойств у значения любого типа данных
// Переменные:
// 1. Переменная - переменная любого типа, 
// для которой необходимо проверить наличие свойства
// 2. ИмяСвойства - переменная типа "Строка", 
// содержащая искомое свойства
// 
&НаКлиентеНаСервереБезКонтекста
Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)
	// Инициализируем структуру для теста 
	// с ключом (значение переменной "ИмяСвойства") 
	// и значением произвольного GUID'а
	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);
	// Заполняем созданную структуру из переданного 
	// значения переменной
	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);
	// Если значение для свойства структуры осталось 
	// NULL, то искомое свойство не найдено, 
	// и наоборот.
	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

#КонецОбласти
