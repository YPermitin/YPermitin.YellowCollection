#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сведения о внешней обработке
// 
// Возвращаемое значение:
//   - Структура - Информация о внешнем отчете и обработке
//
Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", НСтр("ru='Мастер создания копии информационной базы для отчетности'"));
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0.0");
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", 
		НСтр("ru='Обработка для помощи в создании служебной базы данных для рапоты
			|с репликами в режиме ""Только для чтения"".'"));
		
	МассивНазначенийОбработки = НазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	ТаблицаКомандОбработки = ТаблицаКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

Процедура ЗаполнитьНастройкиОбъектовБазыПоУмолчанию() Экспорт
	
	// 1. Получаем необходимые данные
	// Получаем структуру базы данных средствами платформы
	СтруктураБазыДанных1С = ПолучитьСтруктуруХраненияБазыДанных(Неопределено, Истина);
	// Получаем список таблиц исходной базы данных
	СтруктураИсходнойБазыДанныхSQL = СтруктураХраненияИсходнойБазыДанныхSQL();
	СтруктураАдаптированнойБазыДанныхSQL = СтруктураХраненияИсходнойБазыДанныхSQL();
	
	// 2. Заполняем таблицы настроек по умолчанию
	ЗаполнитьНастройкиОбъектовБазыДанных(СтруктураБазыДанных1С, СтруктураИсходнойБазыДанныхSQL);
		
	// 3. Формируем скрипт создания базы данных, если ее не существует
	СформироватьСкриптСозданияБазыДанных();
	
	// 4. Формируем скрипт удаления существующих объектов адаптированной базы данных
	СформироватьСкриптУдаленияВсехОбъектовПредыдущейВерсии();
	
	// 5. Формируем скрипты переноса таблиц и их данных и триггеров проверки действий
	СформироватьСкриптПереносаТаблицИДанных();
	
	// 6. Формируем скрипт создания представлений и триггеров проверки действий
	СформироватьСкриптСозданияПредставлений();
	
КонецПроцедуры

Процедура СформироватьСкриптСозданияБазыДанных() Экспорт
	
	ШаблонЗапроса = ПолучитьМакет("ШаблонСкриптаСозданияБазыДанных").ПолучитьТекст();
	СкриптСозданияБазыДанных = СтрЗаменить(ШаблонЗапроса, "{ИмяБазыДанных}", ИмяБазыАдаптированнойДляИспользования);
	
КонецПроцедуры

Процедура СформироватьСкриптУдаленияВсехОбъектовПредыдущейВерсии() Экспорт
		
	ШаблонЗапроса = ПолучитьМакет("ШаблонСкриптаУдалениеВсехОбъектовПредыдущейВерсии")
		.ПолучитьТекст();
		
	СкриптУдаленияВсехОбъектовПредыдущейВерсии = ШаблонЗапроса;
	
КонецПроцедуры

Процедура СформироватьСкриптПереносаТаблицИДанных() Экспорт
	
	СкриптПереносаТаблицИДанных = "";
	
	Для Каждого ЭлементБазы Из НастройкиОбработкиТаблиц Цикл
		
		Если НЕ ЭлементБазы.СоздатьТаблицу Тогда
			Продолжить;
		КонецЕсли;
		
		КомандыSQL = КомандаСозданияТаблицыИИндексовБазыДанныхSQL(ЭлементБазы.ИмяТаблицыБазыДанных);
		ПолноеПредставлениеМетаданных = СформироватьПолноеПредставлениеМетаданных(ЭлементБазы);
		
		СкриптПереносаТаблицИДанных = СкриптПереносаТаблицИДанных + "
		|-- Объект: " + ПолноеПредставлениеМетаданных + "
		|-- Начало
		|
		|" + СокрЛП(КомандыSQL) + "
		|GO -- >>";
		
		СкриптПереносаТаблицИДанных = СкриптПереносаТаблицИДанных + "
		|
		|-- Конец
		|-- Объект: " + ПолноеПредставлениеМетаданных + "
		|";
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСкриптСозданияПредставлений() Экспорт
	
	ТаблицаКомандSQL = КомандыСозданияПредставленийБазыДанныхSQL();
	СкриптСозданияПредставлений = "";
	
	Для Каждого ЭлементБазы Из НастройкиОбработкиТаблиц Цикл
		
		Если НЕ ЭлементБазы.СоздатьПредставление Тогда
			Продолжить;
		КонецЕсли;
		
		ПоискКомандыSQL = ТаблицаКомандSQL.НайтиСтроки(
			Новый Структура("ИмяТаблицы", ЭлементБазы.ИмяТаблицыБазыДанных));
		Если ПоискКомандыSQL.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КомандаSQL = ПоискКомандыSQL.Получить(0);
		ПолноеПредставлениеМетаданных = СформироватьПолноеПредставлениеМетаданных(ЭлементБазы);
		
		СкриптСозданияПредставлений = СкриптСозданияПредставлений + "
		|-- Объект: " + ПолноеПредставлениеМетаданных + "
		|-- Начало
		|
		|" + СокрЛП(КомандаSQL.КомандаУдалитьПредставление) + "
		|GO -- >>
		|
		|" + СокрЛП(КомандаSQL.КомандаСоздатьПредставление) + "
		|GO -- >>
		|";		
		
		Если ЭлементБазы.СоздатьЗащитуВставкиНовыхЗначений Тогда						
			СкриптЗащиты = КомандаSQL.КомандаСоздатьТриггерЗащитыДобавленияЗначений;
			Если ЭлементБазы.ПоказыватьОшибкуПриВставкеНовыхЗначений Тогда
				СкриптЗащиты = СтрЗаменить(СкриптЗащиты, 
					"{ДействиеПриДобавлении}", 
					"RAISERROR('Объект не доступен для добавления записей: " + ПолноеПредставлениеМетаданных + "', 16, 1 )");
			Иначе
				СкриптЗащиты = СтрЗаменить(СкриптЗащиты, "{ДействиеПриДобавлении}", "");
			КонецЕсли;
			
			СкриптСозданияПредставлений = СкриптСозданияПредставлений + "
			|" + СокрЛП(СкриптЗащиты) + "
			|GO -- >>";			
		КонецЕсли;
		
		Если ЭлементБазы.СоздатьЗащитуОбновленияЗначений Тогда						
			СкриптЗащиты = КомандаSQL.КомандаСоздатьТриггерЗащитыОбновленияЗначений;
			Если ЭлементБазы.ПоказыватьОшибкуПриОбновленииЗначений Тогда
				СкриптЗащиты = СтрЗаменить(СкриптЗащиты, 
					"{ДействиеПриОбновлении}", 
					"RAISERROR('Объект не доступен для обновления записей: " + ПолноеПредставлениеМетаданных + "', 16, 1 )");
			Иначе
				СкриптЗащиты = СтрЗаменить(СкриптЗащиты, "{ДействиеПриОбновлении}", "");
			КонецЕсли;
			
			СкриптСозданияПредставлений = СкриптСозданияПредставлений + "
			|" + СокрЛП(СкриптЗащиты) + "
			|GO -- >>";			
		КонецЕсли;
		
		Если ЭлементБазы.СоздатьЗащитуУдаленияЗначений Тогда						
			СкриптЗащиты = КомандаSQL.КомандаСоздатьТриггерЗащитыУдаленияЗначений;
			Если ЭлементБазы.ПоказыватьОшибкуПриУдаленииЗначений Тогда
				СкриптЗащиты = СтрЗаменить(СкриптЗащиты, 
					"{ДействиеПриУдалении}", 
					"RAISERROR('Объект не доступен для удаления записей: " + ПолноеПредставлениеМетаданных + "', 16, 1 )");
			Иначе
				СкриптЗащиты = СтрЗаменить(СкриптЗащиты, "{ДействиеПриУдалении}", "");
			КонецЕсли;
			
			СкриптСозданияПредставлений = СкриптСозданияПредставлений + "
			|" + СокрЛП(СкриптЗащиты) + "
			|GO -- >>";			
		КонецЕсли;
		
		СкриптСозданияПредставлений = СкриптСозданияПредставлений + "
		|
		|-- Конец
		|-- Объект: " + ПолноеПредставлениеМетаданных + "
		|";
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПолноеПредставлениеМетаданных(Знач ЭлементБазы)
	
	ПолноеПредставлениеМетаданных = "";
	
	Если ЗначениеЗаполнено(ЭлементБазы.ИмяМетаданных)
		И ЗначениеЗаполнено(ЭлементБазы.НазначениеМетаданных) Тогда
		ПолноеПредставлениеМетаданных = ЭлементБазы.ИмяМетаданных + "("
		+ ЭлементБазы.НазначениеМетаданных
		+ ")";
	ИначеЕсли ЗначениеЗаполнено(ЭлементБазы.ИмяМетаданных) Тогда
		ПолноеПредставлениеМетаданных = ЭлементБазы.ИмяМетаданных;
	ИначеЕсли ЗначениеЗаполнено(ЭлементБазы.НазначениеМетаданных) Тогда
		ПолноеПредставлениеМетаданных = ЭлементБазы.НазначениеМетаданных;
	КонецЕсли;
	ПолноеПредставлениеМетаданных = ПолноеПредставлениеМетаданных + " Таблица: " + ЭлементБазы.ИмяТаблицыБазыДанных;
	ПолноеПредставлениеМетаданных = СокрЛП(ПолноеПредставлениеМетаданных);
	Возврат ПолноеПредставлениеМетаданных;

КонецФункции

Процедура ЗаполнитьНастройкиОбъектовБазыДанных(СтруктураБазыДанных1С, СтруктураБазыДанныхSQL)
	
	МакетПредопределенныхНастроек = ПолучитьМакет("ПредопределенныеНастройкиОбъектовБазыДанных");
	ТаблицаПредопределенныхНастроек = КонвертироватьМакетВТаблицуЗначений(МакетПредопределенныхНастроек, 1, Истина);	
	ТаблицаПредопределенныхНастроек.Индексы.Добавить("ИмяТаблицыБазыДанных");
	НастройкиОбработкиТаблиц.Очистить();
	
	Для Каждого ЭлементБазыДанных Из СтруктураБазыДанныхSQL Цикл
		
		ИмяМетаданных = Неопределено;
		НазначениеМетаданных = Неопределено;
		
		СтруктураПоискаТаблицы = Новый Структура("ИмяТаблицыХранения", ЭлементБазыДанных.ИмяТаблицы);
		РезультатПоискаТаблицы = СтруктураБазыДанных1С.НайтиСтроки(СтруктураПоискаТаблицы);	
		Если РезультатПоискаТаблицы.Количество() > 0 Тогда
			ДанныеТаблицы1С = РезультатПоискаТаблицы.Получить(0);
			ИмяМетаданных = ДанныеТаблицы1С.Метаданные;
			НазначениеМетаданных = ДанныеТаблицы1С.Назначение;
		КонецЕсли;
		
		ЗаписьНастройки = НастройкиОбработкиТаблиц.Добавить();
		
		// Основная информация об объекте
		ЗаписьНастройки.ИмяТаблицыБазыДанных = ВРег(ЭлементБазыДанных.ИмяТаблицы);
		ЗаписьНастройки.ИмяМетаданных = ИмяМетаданных;
		ЗаписьНастройки.НазначениеМетаданных = НазначениеМетаданных;
		
		// Вид объекта
		ЗаписьНастройки.СоздатьТаблицу = Ложь;
		ЗаписьНастройки.СоздатьПредставление = Истина;
		
		// Защита изменения данных
		ЗаписьНастройки.СоздатьЗащитуВставкиНовыхЗначений = Истина;
		ЗаписьНастройки.СоздатьЗащитуОбновленияЗначений = Истина;
		ЗаписьНастройки.СоздатьЗащитуУдаленияЗначений = Истина;
		
		// Настройки исключений
		ЗаписьНастройки.ПоказыватьОшибкуПриВставкеНовыхЗначений = ЭтоОбъектныйТип(ЗаписьНастройки.ИмяМетаданных);
		ЗаписьНастройки.ПоказыватьОшибкуПриОбновленииЗначений = Ложь;
		ЗаписьНастройки.ПоказыватьОшибкуПриУдаленииЗначений = Ложь;		
		
		// Дополнительно
		ЗаписьНастройки.ПерезаполнятьТаблицуПриОбновлении = ЗаписьНастройки.СоздатьТаблицу;
		
		РезультатПоискаПредопределенныхНастроек = ТаблицаПредопределенныхНастроек.НайтиСтроки(
			Новый Структура("ИмяТаблицыБазыДанных", ЗаписьНастройки.ИмяТаблицыБазыДанных));
		Если РезультатПоискаПредопределенныхНастроек.Количество() > 0 Тогда
			ПредопределеннаяНастройка = РезультатПоискаПредопределенныхНастроек.Получить(0);			
			// Вид объекта
			ЗаписьНастройки.СоздатьТаблицу = ПреобразоватьКБулево(ПредопределеннаяНастройка.СоздатьТаблицу);
			ЗаписьНастройки.СоздатьПредставление = ПреобразоватьКБулево(ПредопределеннаяНастройка.СоздатьПредставление);
			// Защита изменения данных
			ЗаписьНастройки.СоздатьЗащитуВставкиНовыхЗначений = ПреобразоватьКБулево(ПредопределеннаяНастройка.СоздатьЗащитуВставкиНовыхЗначений);
			ЗаписьНастройки.СоздатьЗащитуОбновленияЗначений = ПреобразоватьКБулево(ПредопределеннаяНастройка.СоздатьЗащитуОбновленияЗначений);
			ЗаписьНастройки.СоздатьЗащитуУдаленияЗначений = ПреобразоватьКБулево(ПредопределеннаяНастройка.СоздатьЗащитуУдаленияЗначений);
			// Настройки исключений
			ЗаписьНастройки.ПоказыватьОшибкуПриВставкеНовыхЗначений = ПреобразоватьКБулево(ПредопределеннаяНастройка.ПоказыватьОшибкуПриВставкеНовыхЗначений);
			ЗаписьНастройки.ПоказыватьОшибкуПриОбновленииЗначений = ПреобразоватьКБулево(ПредопределеннаяНастройка.ПоказыватьОшибкуПриОбновленииЗначений);
			ЗаписьНастройки.ПоказыватьОшибкуПриУдаленииЗначений = ПреобразоватьКБулево(ПредопределеннаяНастройка.ПоказыватьОшибкуПриУдаленииЗначений);
			// Дополнительно
			ЗаписьНастройки.ПерезаполнятьТаблицуПриОбновлении = ПреобразоватьКБулево(ПредопределеннаяНастройка.ПерезаполнятьТаблицуПриОбновлении);
			ЗаписьНастройки.ПредопределеннаяНастройка = Истина;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоОбъектныйТип(ИмяМетаданных)
	
	Возврат Найти(ИмяМетаданных, "Справочник.") > 0
		ИЛИ Найти(ИмяМетаданных, "Документ.") > 0
		ИЛИ Найти(ИмяМетаданных, "ПланВидовХарактеристик.") > 0
		ИЛИ Найти(ИмяМетаданных, "ПланСчетов.") > 0
		ИЛИ Найти(ИмяМетаданных, "ПланВидовРасчета.") > 0
		ИЛИ Найти(ИмяМетаданных, "Задача.") > 0
		ИЛИ Найти(ИмяМетаданных, "БизнесПроцесс.") > 0;
	
КонецФункции

Функция КонвертироватьМакетВТаблицуЗначений(ИсходныйДокумент, КолонкаИндекса = 1, ПреобразоватьСтрокиВВерхнийРегистр = Ложь)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	НомерКолонки = 0;
	Пока Истина Цикл
		НомерКолонки = НомерКолонки + 1;
		ИмяКолонки = ИсходныйДокумент.Область(1, НомерКолонки).Текст;
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;        
		ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	СчетчикКолонок = НомерКолонки - 1;	
	НомерСтроки = 1; 
	ФлагПрерывания = Ложь;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		Для НомерКолонки = 1 ПО СчетчикКолонок Цикл
			ТекстКолонки = ИсходныйДокумент.Область(НомерСтроки, НомерКолонки).Текст;
			Если ПустаяСтрока(ТекстКолонки) Тогда
				Если НомерКолонки = КолонкаИндекса Тогда
					Флагпрерывания = Истина;
					ТаблицаДанных.Удалить(НоваяСтрока);
				КонецЕсли;
			Иначе
				НоваяСтрока[НомерКолонки - 1] = ТекстКолонки;
				Если ПреобразоватьСтрокиВВерхнийРегистр Тогда
					НоваяСтрока[НомерКолонки - 1] = ВРег(НоваяСтрока[НомерКолонки - 1]);
				КонецЕсли;
			КонецЕсли;
			
			Если Флагпрерывания Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Флагпрерывания Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПреобразоватьКБулево(Знач ИсходноеЗначение)
	
	Если ТипЗнч(ИсходноеЗначение) = Тип("Строка") Тогда
	
		ИсходноеЗначение = ВРег(ИсходноеЗначение);
		
		Если ИсходноеЗначение = "ИСТИНА" Тогда
			
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Булево") Тогда
		
		Возврат ИсходноеЗначение;
		
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Число") Тогда 
		
		Возврат (ИсходноеЗначение > 0);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура Инициализация()
	
	ИдентификаторОбработки = Новый УникальныйИдентификатор;
	ТаймаутПодключенияСекунд = 180;
	УдалятьУстаревшиеОбъекты = Истина;
	ТипСУБД = "SQLServer";
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

Функция НазначениеОбработки() 
	
	МассивНазначенийОбработки = Новый Массив;
	 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

Функция ТаблицаКомандОбработки() 
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево"));
	
	ДобавитьКоманду(тзКоманд, 
		НСтр("ru='МастерСозданияКопииИнформационнойБазыДляОтчетности'"), 
		НСтр("ru='Мастер создания копии информационной базы для отчетности'"), 
		Ложь, 
		"ОткрытиеФормы", 
		"", 
		Ложь);
	
	Возврат тзКоманд;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	строкаКоманды = ТаблицаКоманд.Добавить();
	строкаКоманды.Идентификатор = Идентификатор;
	строкаКоманды.Представление = Представление;
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	строкаКоманды.Использование = Использование;
	строкаКоманды.Модификатор = Модификатор;
	строкаКоманды.Скрыть = Скрыть;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботыADO

Функция КомандаСозданияТаблицыИИндексовБазыДанныхSQL(ИмяТаблицыБазыДанных)
	
	СкриптСозданияТаблицыИИндексов = ПолучитьМакет("ШаблонСкриптаГенерацииСкриптовСозданияТаблицИИндексов")
		.ПолучитьТекст();
	СкриптСозданияТаблицыИИндексов = СтрЗаменить(СкриптСозданияТаблицыИИндексов, "{ИмяТаблицыБазыДанных}", ИмяТаблицыБазыДанных);
	СкриптСозданияТаблицыИИндексов = СтрЗаменить(СкриптСозданияТаблицыИИндексов, "{ИмяИсходнойБазыДанных}", ИмяБазыКопииТолькоДляЧтения);
	СкриптСозданияТаблицыИИндексов = СтрЗаменить(СкриптСозданияТаблицыИИндексов, "{ИмяАдаптированнойБазыДанных}", ИмяБазыАдаптированнойДляИспользования);
	СкриптSQL = "";
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИмяБазыКопииТолькоДляЧтения, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);

	КомандаБД = Новый COMОбъект("ADODB.Command"); 
	КомандаБД.ActiveConnection = СоединениеБД;
	КомандаБД.CommandText = СкриптСозданияТаблицыИИндексов;
	КомандаБД.CommandTimeout = ТаймаутПодключенияСекунд;
	
	РезультатБД = КомандаБД.Execute();
	Пока НЕ РезультатБД.Eof() Цикл
		
		СкриптСозданияОбъекта = РезультатБД.Fields(0).Value;
		СкриптПереносаДанных = РезультатБД.Fields(1).Value;
		
		СкриптSQL = СкриптСозданияОбъекта + "
		|
		|" + СкриптПереносаДанных + "
		|";
		
		РезультатБД.MoveNext();
		
	КонецЦикла;
		
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат СкриптSQL;
	
КонецФункции

Функция КомандыСозданияПредставленийБазыДанныхSQL()
	
	ПредставленияБазыДанных = Новый ТаблицаЗначений;
	ПредставленияБазыДанных.Колонки.Добавить("ИмяТаблицы");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаУдалитьПредставление");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаСоздатьПредставление");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаСоздатьТриггерЗащитыДобавленияЗначений");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаУдалитьТриггерЗащитыДобавленияЗначений");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаСоздатьТриггерЗащитыОбновленияЗначений");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаУдалитьТриггерЗащитыОбновленияЗначений");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаСоздатьТриггерЗащитыУдаленияЗначений");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаУдалитьТриггерЗащитыУдаленияЗначений");
	ПредставленияБазыДанных.Индексы.Добавить("ИмяТаблицы");
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИмяБазыКопииТолькоДляЧтения, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);
		
	ЗапросКомандыСозданияПредставлений = ПолучитьМакет("ШаблонСкриптаСписокКомандДляСозданияПредставлений")
		.ПолучитьТекст();
	ЗапросКомандыСозданияПредставлений = СтрЗаменить(
		ЗапросКомандыСозданияПредставлений, 
		"{ИмяИсходнойБазы}", 
		ИмяБазыКопииТолькоДляЧтения);
	
	ТекстОтбораПоТаблицам = "";
	Для Каждого ЭлементБазы Из НастройкиОбработкиТаблиц Цикл
		Если НЕ ЭлементБазы.СоздатьПредставление Тогда
			ТекстОтбораПоТаблицам = ТекстОтбораПоТаблицам
				+ ?(ЗначениеЗаполнено(ТекстОтбораПоТаблицам), ",","")
				+ "'" 
				+ ЭлементБазы.ИмяТаблицыБазыДанных
				+ "'";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстОтбораПоТаблицам) Тогда
		Возврат ПредставленияБазыДанных;
	КонецЕсли;
	
	ЗапросКомандыСозданияПредставлений = СтрЗаменить(
		ЗапросКомандыСозданияПредставлений, 
		"{СписокТаблицДляПереносаКакЕсть}", 
		ТекстОтбораПоТаблицам);
	
	КомандаБД = Новый COMОбъект("ADODB.Command"); 
	КомандаБД.ActiveConnection = СоединениеБД;
	КомандаБД.CommandText = ЗапросКомандыСозданияПредставлений;
	КомандаБД.CommandTimeout = ТаймаутПодключенияСекунд;
	
	РезультатБД = КомандаБД.Execute();
	Пока НЕ РезультатБД.Eof() Цикл
		
		ИмяТаблицы = РезультатБД.Fields(0).Value;
		КомандаУдалитьПредставление = РезультатБД.Fields(1).Value;
		КомандаСоздатьПредставление = РезультатБД.Fields(2).Value;
		КомандаСоздатьТриггерЗащитыДобавленияЗначений = РезультатБД.Fields(3).Value;
		КомандаУдалитьТриггерЗащитыДобавленияЗначений = РезультатБД.Fields(4).Value;		
		КомандаСоздатьТриггерЗащитыОбновленияЗначений = РезультатБД.Fields(5).Value;
		КомандаУдалитьТриггерЗащитыОбновленияЗначений = РезультатБД.Fields(6).Value;
		КомандаСоздатьТриггерЗащитыУдаленияЗначений = РезультатБД.Fields(7).Value;
		КомандаУдалитьТриггерЗащитыУдаленияЗначений = РезультатБД.Fields(8).Value;
		
		ЗаписьТаблица = ПредставленияБазыДанных.Добавить();
		ЗаписьТаблица.ИмяТаблицы = ИмяТаблицы;
		ЗаписьТаблица.КомандаУдалитьПредставление = КомандаУдалитьПредставление;
		ЗаписьТаблица.КомандаСоздатьПредставление = КомандаСоздатьПредставление;
		ЗаписьТаблица.КомандаСоздатьТриггерЗащитыДобавленияЗначений = КомандаСоздатьТриггерЗащитыДобавленияЗначений;
		ЗаписьТаблица.КомандаУдалитьТриггерЗащитыДобавленияЗначений = КомандаУдалитьТриггерЗащитыДобавленияЗначений;
		ЗаписьТаблица.КомандаСоздатьТриггерЗащитыОбновленияЗначений = КомандаСоздатьТриггерЗащитыОбновленияЗначений;
		ЗаписьТаблица.КомандаУдалитьТриггерЗащитыОбновленияЗначений = КомандаУдалитьТриггерЗащитыОбновленияЗначений;
		ЗаписьТаблица.КомандаСоздатьТриггерЗащитыУдаленияЗначений = КомандаСоздатьТриггерЗащитыУдаленияЗначений;
		ЗаписьТаблица.КомандаУдалитьТриггерЗащитыУдаленияЗначений = КомандаУдалитьТриггерЗащитыУдаленияЗначений;
		
		РезультатБД.MoveNext();
		
	КонецЦикла;
		
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат ПредставленияБазыДанных;
	
КонецФункции

Функция СтруктураХраненияИсходнойБазыДанныхSQL()
	
	ТаблицыБазыДанных = Новый ТаблицаЗначений;
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицы");
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицыВРЕГ");
	ТаблицыБазыДанных.Индексы.Добавить("ИмяТаблицыВРЕГ");
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИмяБазыКопииТолькоДляЧтения, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);
		
	ЗапросСпискаТаблиц = ПолучитьМакет("ЗапросСпискаТаблиц").ПолучитьТекст();
	КомандаБД = Новый COMОбъект("ADODB.Command"); 
	КомандаБД.ActiveConnection = СоединениеБД;
	КомандаБД.CommandText = ЗапросСпискаТаблиц;
	КомандаБД.CommandTimeout = ТаймаутПодключенияСекунд;
	
	РезультатБД = КомандаБД.Execute();
	Пока НЕ РезультатБД.Eof() Цикл
		
		ИмяТаблицы = РезультатБД.Fields(0).Value;
		ИмяТаблицыВРЕГ = РезультатБД.Fields(1).Value;
		
		ЗаписьТаблица = ТаблицыБазыДанных.Добавить();
		ЗаписьТаблица.ИмяТаблицы = ИмяТаблицы;
		ЗаписьТаблица.ИмяТаблицыВРЕГ = ИмяТаблицыВРЕГ;
		
		РезультатБД.MoveNext();
		
	КонецЦикла;
		
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат ТаблицыБазыДанных;
	
КонецФункции

Функция СтруктураХраненияАдаптированнойБазыДанныхSQL()
	
	ТаблицыБазыДанных = Новый ТаблицаЗначений;
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицы");
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицыВРЕГ");
	ТаблицыБазыДанных.Индексы.Добавить("ИмяТаблицыВРЕГ");
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИмяБазыАдаптированнойДляИспользования, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);
		
	Если СоединениеБД = Неопределено Тогда
		Возврат ТаблицыБазыДанных;
	КонецЕсли;
		
	ЗапросСпискаТаблиц = ПолучитьМакет("ЗапросСпискаТаблиц").ПолучитьТекст();
	КомандаБД = Новый COMОбъект("ADODB.Command"); 
	КомандаБД.ActiveConnection = СоединениеБД;
	КомандаБД.CommandText = ЗапросСпискаТаблиц;
	КомандаБД.CommandTimeout = ТаймаутПодключенияСекунд;
	
	РезультатБД = КомандаБД.Execute();
	Пока НЕ РезультатБД.Eof() Цикл
		
		ИмяТаблицы = РезультатБД.Fields(0).Value;
		ИмяТаблицыВРЕГ = РезультатБД.Fields(1).Value;
		
		ЗаписьТаблица = ТаблицыБазыДанных.Добавить();
		ЗаписьТаблица.ИмяТаблицы = ИмяТаблицы;
		ЗаписьТаблица.ИмяТаблицыВРЕГ = ИмяТаблицыВРЕГ;
		
		РезультатБД.MoveNext();
		
	КонецЦикла;
		
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат ТаблицыБазыДанных;
	
КонецФункции

Функция ПроверитьПодключениеКИсходнойКопииБазыДанных() Экспорт
	
	Возврат ПроверитьПодключениеКБазеДанных(ИмяБазыКопииТолькоДляЧтения);
	
КонецФункции

Функция ПроверитьПодключениеКАдаптированнойБазеДанных() Экспорт
	
	Возврат ПроверитьПодключениеКБазеДанных(ИмяБазыАдаптированнойДляИспользования);
	
КонецФункции

Функция ПроверитьПодключениеКБазеДанных(ИмяБазыДанных) Экспорт
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИмяБазыДанных, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);	
		
	Если СоединениеБД = Неопределено Тогда		
		Возврат Ложь;		
	Иначе
		ЗакрытьСоединениеADO(СоединениеБД);
		Возврат Истина;		
	КонецЕсли;
	
КонецФункции

Функция СоздатьСоединениеСБазой(Знач ТипСУБД, Знач ИмяСервера, Знач ИмяБД, Знач Пользователь, Знач Пароль, Знач АутентификацияNTLM = Ложь)
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	
	Если ТипСУБД = "SQLServer" Тогда
		
		Если АутентификацияNTLM Тогда
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Integrated Security=SSPI;"
				+ "Persist Security Info=False;"
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		Иначе	
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Password=" + Пароль + ";"
				+ "Persist Security Info=True;User ID=" + Пользователь + ";" 
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		КонецЕсли;
		
	ИначеЕсли ТипСУБД = "PostgreSQL" Тогда
		
		СтрокаСоединения = "Driver={PostgreSQL Unicode};Pwd=" + Пароль + ";"
			+ "Uid=" + Пользователь + ";"
			+ "Database=" + ИмяБД + ";"
			+ "Server=" + ИмяСервера;
		
	КонецЕсли;
	
	Попытка
		
	    Соединение.Open(СтрокаСоединения);
		
		Возврат Соединение;
		
	Исключение
		
		СообщениеОбОшибке = ТипСУБД 
			+ ": Ошибка установки соединения: " 
			+ Символы.ПС 
			+ ОписаниеОшибки();
		
		СообщитьПользователю(СообщениеОбОшибке);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ЗакрытьСоединениеADO(Соединение)
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение.Close();
	Исключение
		// Действий не требуется	
	КонецПопытки;
	
	Соединение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализация();

#КонецОбласти

#КонецЕсли