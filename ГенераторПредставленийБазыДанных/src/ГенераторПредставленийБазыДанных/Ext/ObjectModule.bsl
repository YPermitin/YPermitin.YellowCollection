#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сведения о внешней обработке
// 
// Возвращаемое значение:
//   - Структура - Информация о внешнем отчете и обработке
//
Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", НСтр("ru='Мастер создания копии информационной базы для отчетности'"));
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0.0");
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", 
		НСтр("ru='Обработка для помощи в создании служебной базы данных для рапоты
			|с репликами в режиме ""Только для чтения"".'"));
		
	МассивНазначенийОбработки = НазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	ТаблицаКомандОбработки = ТаблицаКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

Процедура ЗаполнитьНастройкиОбъектовБазыПоУмолчанию() Экспорт
	
	// 1. Получаем необходимые данные
	// Получаем структуру базы данных средствами платформы
	СтруктураБазыДанных1С = ПолучитьСтруктуруХраненияБазыДанных(Неопределено, Истина);
	// Получаем список таблиц исходной базы данных
	СтруктураИсходнойБазыДанныхSQL = СтруктураХраненияИсходнойБазыДанныхSQL();
	СтруктураАдаптированнойБазыДанныхSQL = СтруктураХраненияИсходнойБазыДанныхSQL();
	
	// 2. Заполняем таблицы настроек по умолчанию
	ЗаполнитьНастройкиОбъектовБазыДанных(СтруктураБазыДанных1С, СтруктураИсходнойБазыДанныхSQL);
		
	// 3. Формируем скрипт создания базы данных, если ее не существует
	СформироватьСкриптСозданияБазыДанных();
	
	// 4. Формируем скрипт удаления существующих объектов адаптированной базы данных
	СформироватьСкриптУдаленияВсехОбъектовПредыдущейВерсии();
		
	// 5. Формируем скрипт создания представлений и триггеров проверки действий
	СформироватьСкриптСозданияПредставлений(СтруктураБазыДанных1С);
	
	// 6. Формируем скрипты создания служебных объектов
	СформироватьСкриптСозданияСлужебныхОбъектов();
	
КонецПроцедуры

Процедура СформироватьСкриптСозданияБазыДанных() Экспорт
	
	ШаблонЗапроса = ПолучитьМакет("ШаблонСкриптаСозданияБазыДанных").ПолучитьТекст();
	СкриптСозданияБазыДанных = СтрЗаменить(ШаблонЗапроса, "{ИмяБазыДанных}", ИмяБазыДляПредставлений);
	
КонецПроцедуры

Процедура СформироватьСкриптУдаленияВсехОбъектовПредыдущейВерсии() Экспорт
		
	ШаблонЗапроса = ПолучитьМакет("ШаблонСкриптаУдалениеВсехОбъектовПредыдущейВерсии")
		.ПолучитьТекст();
		
	СкриптУдаленияВсехОбъектовПредыдущейВерсии = ШаблонЗапроса;
	
КонецПроцедуры

Процедура СформироватьСкриптСозданияПредставлений(СтруктураБазыДанных1С = Неопределено) Экспорт
	
	Если СтруктураБазыДанных1С = Неопределено Тогда
		СтруктураБазыДанных1С = ПолучитьСтруктуруХраненияБазыДанных(Неопределено, Истина);
	КонецЕсли;
	
	ТаблицаКомандSQL = КомандыСозданияПредставленийБазыДанныхSQL();
	СкриптСозданияПредставлений = "";
	
	Для Каждого ЭлементБазы Из НастройкиОбработкиТаблиц Цикл
				
		ПоискКомандыSQL = ТаблицаКомандSQL.НайтиСтроки(
			Новый Структура("ИмяТаблицы", ЭлементБазы.ИмяТаблицыБазыДанных));
		Если ПоискКомандыSQL.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		КомандаSQL = ПоискКомандыSQL.Получить(0);
		
		ОписаниеТаблиц1С = СтруктураБазыДанных1С.НайтиСтроки(Новый Структура("ИмяТаблицыХранения", КомандаSQL.ИмяТаблицыОригинальное));
		Если ОписаниеТаблиц1С.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеТаблицы1С = ОписаниеТаблиц1С.Получить(0);
		
		ПолноеПредставлениеМетаданных = СформироватьПолноеПредставлениеМетаданных(ЭлементБазы);
		ИмяОбъектаПолное = СтрЗаменить(ЭлементБазы.ИмяМетаданных, ".", "_");
		ИмяОбъектаПолное = СократитьИмяМетаданных(ИмяОбъектаПолное);
		Если ЗначениеЗаполнено(ЭлементБазы.НазначениеМетаданных)
			И НЕ ЭлементБазы.НазначениеМетаданных = "Основная"
			И НЕ ЭлементБазы.НазначениеМетаданных = "ТабличнаяЧасть" Тогда
			ИмяОбъектаПолное = ИмяОбъектаПолное + "_" + ЭлементБазы.НазначениеМетаданных;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИмяОбъектаПолное) Тогда
			ИмяОбъектаПолное = ЭлементБазы.ИмяТаблицыБазыДанных;
		КонецЕсли;
		
		КомандаУдалитьПредставление = СтрЗаменить(КомандаSQL.КомандаУдалитьПредставление,
			"{{" + ЭлементБазы.ИмяТаблицыБазыДанных + "}}",
			ИмяОбъектаПолное);
			
		КомандаСоздатьПредставление = СтрЗаменить(КомандаSQL.КомандаСоздатьПредставление,
			"{{" + ЭлементБазы.ИмяТаблицыБазыДанных + "}}",
			ИмяОбъектаПолное);
			
		ПоляПредставления = Новый Соответствие;
		Для Каждого ЭлементПоле Из ОписаниеТаблицы1С.Поля Цикл
			
			Если ЗначениеЗаполнено(ЭлементПоле.ИмяПоля) Тогда
				ИмяПоляДляПредставления = ЭлементПоле.ИмяПоля;
			Иначе
				ПоискОсновнойТаблицы = СтруктураБазыДанных1С.НайтиСтроки(Новый Структура("Метаданные, Назначение", ОписаниеТаблицы1С.Метаданные, "Основная"));
				Если ПоискОсновнойТаблицы.Количество() = 1 Тогда
					ИсходноеОписаниеТаблицы = ПоискОсновнойТаблицы.Получить(0);
					
					ИмяПоляДляПредставления = ИмяПоляПоИнформацииОТаблице(
						ОписаниеТаблицы1С,
						ЭлементПоле,
						ИсходноеОписаниеТаблицы,
						ЭлементПоле);
				Иначе
					ИмяПоляДляПредставления = ИмяПоляПоИнформацииОТаблице(
						ОписаниеТаблицы1С,
						ЭлементПоле,
						ОписаниеТаблицы1С,
						ЭлементПоле);
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ИмяПоляДляПредставления) Тогда
				ИмяПоляДляПредставления = ЭлементПоле.ИмяПоляХранения;
			КонецЕсли;
			
			Если СтрЗаканчиваетсяНа(ЭлементПоле.ИмяПоляХранения, "TYPE") Тогда
				ИмяПоляДляПредставления = ИмяПоляДляПредставления + "Тип";
			ИначеЕсли СтрЗаканчиваетсяНа(ЭлементПоле.ИмяПоляХранения, "TRef") Тогда
				ИмяПоляДляПредставления = ИмяПоляДляПредставления + "ТипСсылки";
			ИначеЕсли СтрЗаканчиваетсяНа(ЭлементПоле.ИмяПоляХранения, "RRef") Тогда
				ИмяПоляДляПредставления = ИмяПоляДляПредставления + "Значение";
			КонецЕсли;
			
			ЭлементПоляПредставления = ПоляПредставления.Получить(ИмяПоляДляПредставления);
			Если ЭлементПоляПредставления = Неопределено Тогда
				ПоляПредставления.Вставить(ИмяПоляДляПредставления, Новый Структура("КоличествоИспользований", 0));
				ЭлементПоляПредставления = ПоляПредставления.Получить(ИмяПоляДляПредставления);
			КонецЕсли;
			ЭлементПоляПредставления.КоличествоИспользований = ЭлементПоляПредставления.КоличествоИспользований + 1;
			
			Если ЭлементПоляПредставления.КоличествоИспользований > 1 Тогда
				ИмяПоляДляПредставления = ИмяПоляДляПредставления + XMLСтрока(ЭлементПоляПредставления.КоличествоИспользований);
			КонецЕсли;
			
			// Для таблиц перечислений добавляем поле с фактическими строковыми значениями
			Если СтрНачинаетсяС(ЭлементБазы.ИмяМетаданных, "Перечисление.")
				И ВРег(ЭлементПоле.ИмяПоляХранения) = "_ENUMORDER" Тогда
				ОписаниеОбъектаПеречисления = Метаданные.НайтиПоПолномуИмени(ЭлементБазы.ИмяМетаданных);
				Если НЕ ОписаниеОбъектаПеречисления = Неопределено Тогда
					ПолеПеречисленияSQL = "CASE ";
					
					ИндексЗначенияПеречисления = 0;
					ПоляЗначенияПеречисления = ОписаниеОбъектаПеречисления.ЗначенияПеречисления;
					Если ПоляЗначенияПеречисления.Количество() = 0 Тогда
						ПолеПеречисленияSQL = ПолеПеречисленияSQL
								+ " WHEN _EnumOrder = -1 "
								+ " THEN 'Некорректно' ";
					Иначе
						Для Каждого ЭлементЗначенияПеречисления Из ПоляЗначенияПеречисления Цикл
							ПолеПеречисленияSQL = ПолеПеречисленияSQL
								+ " WHEN _EnumOrder = " + XMLСтрока(ИндексЗначенияПеречисления)
								+ " THEN '" + ЭлементЗначенияПеречисления.Имя + "' ";					
							
							ИндексЗначенияПеречисления = ИндексЗначенияПеречисления + 1;
						КонецЦикла;
					КонецЕсли;
					
					ПолеПеречисленияSQL = ПолеПеречисленияSQL + " ELSE 'Неизвестно' END AS [Наименование";
					ИмяПоляДляПредставления = ИмяПоляДляПредставления + "], " + ПолеПеречисленияSQL; 
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеПоискаДляЗамены = ЭлементБазы.ИмяТаблицыБазыДанных + ВРег(ЭлементПоле.ИмяПоляХранения);
			КомандаСоздатьПредставление = СтрЗаменить(КомандаСоздатьПредставление,
				"{{" + ЗначениеПоискаДляЗамены + "}}",
				ИмяПоляДляПредставления);
		КонецЦикла;
		
		СкриптСозданияПредставлений = СкриптСозданияПредставлений + "
		|-- Объект: " + ПолноеПредставлениеМетаданных + "
		|-- Начало
		|
		|" + СокрЛП(КомандаУдалитьПредставление) + "
		|GO -- >>
		|
		|" + СокрЛП(КомандаСоздатьПредставление) + "
		|GO -- >>
		|";
		
		СкриптСозданияПредставлений = СкриптСозданияПредставлений + "
		|
		|-- Конец
		|-- Объект: " + ПолноеПредставлениеМетаданных + "
		|";
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСкриптСозданияСлужебныхОбъектов() Экспорт
	
	ШаблонЗапроса = ПолучитьМакет("ШаблонСкриптаСозданияСлужебныхОбъектов").ПолучитьТекст();
	СкриптСозданияСлужебныхОбъектов = ШаблонЗапроса;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СократитьИмяМетаданных(ПолноеИмяМетаданных)
	
	Если _СтрНайти(ПолноеИмяМетаданных, "ПланВидовХарактеристик_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "ПланВидовХарактеристик_", "ПВХ_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "Документ_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "Документ_", "ДОК_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "Справочник_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "Справочник_", "СПР_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "Константа_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "Константа_", "КНСТ_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "Перечисление_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "Перечисление_", "ПРЧ_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "ПланСчетов_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "ПланСчетов_", "ПЛНСЧ_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "ПланВидовРасчета_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "ПланВидовРасчета_", "ПВР_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "РегистрСведений_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "РегистрСведений_", "РС_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "РегистрНакопления_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "РегистрНакопления_", "РН_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "РегистрБухгалтерии_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "РегистрБухгалтерии_", "РБ_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "РегистрРасчета_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "РегистрРасчета_", "РР_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "БизнесПроцесс_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "БизнесПроцесс_", "БП_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "Задача_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "Задача_", "ЗДЧ_");
	ИначеЕсли _СтрНайти(ПолноеИмяМетаданных, "ПланОбмена_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "ПланОбмена_", "ПЛОБМ_");	
	КонецЕсли;
	
	Если _СтрНайти(ПолноеИмяМетаданных, "_ТабличнаяЧасть_") > 0 Тогда
		ПолноеИмяМетаданных = СтрЗаменить(ПолноеИмяМетаданных, "_ТабличнаяЧасть_", "_ТЧ_");
	КонецЕсли;
	
	Возврат ПолноеИмяМетаданных;
	
КонецФункции

Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)

	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);

	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);

	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция _СтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина) Экспорт
	
	РезультатирующийМассив = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если ВключатьПустые = Ложь
			И НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатирующийМассив.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат РезультатирующийМассив;
	
КонецФункции

Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоиска = "СНачала", Знач НачальнаяПозиция = 1
	, Знач НомерВхождения = 1) Экспорт
	
	ДлинаСтроки = СтрДлина(Строка);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	Если НачальнаяПозиция = 0
		Или НомерВхождения = 0
		Или ДлинаСтроки < НачальнаяПозиция	
		Или (НаправлениеПоиска <> "СНачала" И НаправлениеПоиска <> "СКонца") Тогда
		
		Возврат 0;	
	КонецЕсли; 
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Строка = СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		ОставшаясяЧастьСтроки = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		ОставшаясяЧастьСтроки = Прав(Строка, ДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(ОставшаясяЧастьСтроки, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерТекущегоВхождения = 0;
	Пока НомерТекущегоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(ОставшаясяЧастьСтроки, СтрокаПоиска);
		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки + СтрДлина(Лев(ОставшаясяЧастьСтроки, ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		ОставшаясяЧастьСтроки = Прав(ОставшаясяЧастьСтроки, СтрДлина(ОставшаясяЧастьСтроки) - (ИндексВхождения 
			+ ДлинаСтрокиПоиска - 1));
		
		НомерТекущегоВхождения = НомерТекущегоВхождения + 1;
		
	КонецЦикла;	
	
	Если НаправлениеПоиска = "СКонца" Тогда
		Возврат ДлинаСтроки - ДлинаПройденнойЧастиСтроки + ДлинаСтрокиПоиска;
	Иначе	
		Возврат ДлинаПройденнойЧастиСтроки + 1 - ДлинаСтрокиПоиска;
	КонецЕсли;
	
КонецФункции

Функция СтрокаЗадомНаперед(Знач Строка) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = _СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = _СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = _СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяПоляПоИнформацииОТаблице(СтрокаОписаниеТаблицы, СтрокаОписаниеПоля, ИсходноеОписаниеТаблицы, ИсходноеОписаниеПоле)
	
	Если ЗначениеЗаполнено(СтрокаОписаниеПоля.ИмяПоля) Тогда
		Возврат СтрокаОписаниеПоля.ИмяПоля;
	КонецЕсли;
	
	ИмяПоля = "";
	ИмяПоляДляСравнения = ВРег(СтрокаОписаниеПоля.ИмяПоляХранения);
			
	Если ИмяПоляДляСравнения = "_ACCOUNTRREF" Тогда
		ИмяПоля = "Счет";
	ИначеЕсли ИмяПоляДляСравнения = "_PERIOD" Тогда
		ИмяПоля = "Период";
	ИначеЕсли ИмяПоляДляСравнения = "_EDHASHDT" Тогда
		ИмяПоля = "ХешДт";
	ИначеЕсли ИмяПоляДляСравнения = "_EDHASHCT" Тогда
		ИмяПоля = "ХешКт";
	ИначеЕсли ИмяПоляДляСравнения = "_KEYFIELD" Тогда
		ИмяПоля = "Ключ";
	ИначеЕсли ИмяПоляДляСравнения = "_CORRESPOND" Тогда
		ИмяПоля = "Корреспонденция";
	ИначеЕсли ИмяПоляДляСравнения = "_NUMBERPREFIX" Тогда
		ИмяПоля = "ПрефиксНомера";
	ИначеЕсли ИмяПоляДляСравнения = "_PREDEFINEDID" Тогда
		ИмяПоля = "ИдентификаторПредопределенногоЗначения";
	ИначеЕсли ИмяПоляДляСравнения = "_SPLITTER" Тогда
		ИмяПоля = "Разделитель";
	ИначеЕсли ИмяПоляДляСравнения = "_VERSION" Тогда
		ИмяПоля = "ВерсияДанных";
	ИначеЕсли Лев(ИмяПоляДляСравнения, 6) = "_VALUE"
		И Прав(ИмяПоляДляСравнения, 5) = "_TYPE"
		И СтрДлина(ИмяПоляДляСравнения) = 12 Тогда
		ИмяПоля = "Значение";
	ИначеЕсли Лев(ИмяПоляДляСравнения, 6) = "_VALUE"
		И Прав(ИмяПоляДляСравнения, 6) = "_RTREF"
		И СтрДлина(ИмяПоляДляСравнения) = 13 Тогда
		ИмяПоля = "Значение";
	ИначеЕсли Лев(ИмяПоляДляСравнения, 6) = "_VALUE"
		И Прав(ИмяПоляДляСравнения, 6) = "_RRREF"
		И СтрДлина(ИмяПоляДляСравнения) = 13 Тогда
		ИмяПоля = "Значение";
	ИначеЕсли Лев(ИсходноеОписаниеПоле.ИмяПоляХранения, 11) = "_TurnoverDt" Тогда
		ЧастиИмениМетаданных = РазложитьСтрокуВМассивПодстрок(ИсходноеОписаниеПоле.Метаданные, ".");
		ИмяПоля = ЧастиИмениМетаданных.Получить(ЧастиИмениМетаданных.Количество() - 1);		
		ИмяПоля = ИмяПоля + "ОборотДт";
	ИначеЕсли Лев(ИсходноеОписаниеПоле.ИмяПоляХранения, 11) = "_TurnoverCt" Тогда
		ЧастиИмениМетаданных = РазложитьСтрокуВМассивПодстрок(ИсходноеОписаниеПоле.Метаданные, ".");
		ИмяПоля = ЧастиИмениМетаданных.Получить(ЧастиИмениМетаданных.Количество() - 1);		
		ИмяПоля = ИмяПоля + "ОборотКт";
	ИначеЕсли Лев(ИсходноеОписаниеПоле.ИмяПоляХранения, 9) = "_Turnover" Тогда
		ЧастиИмениМетаданных = РазложитьСтрокуВМассивПодстрок(ИсходноеОписаниеПоле.Метаданные, ".");
		ИмяПоля = ЧастиИмениМетаданных.Получить(ЧастиИмениМетаданных.Количество() - 1);		
		ИмяПоля = ИмяПоля + "Оборот";
	ИначеЕсли ИмяПоляДляСравнения = "_REGID" Тогда
		ИмяПоля = "ИдентификаторРегистра";
	ИначеЕсли ИмяПоляДляСравнения = "_ACTUALPERIOD" Тогда
		ИмяПоля = "ХранениеАктуальныхИтогов";
	ИначеЕсли ИмяПоляДляСравнения = "_PERIODICITY" Тогда
		ИмяПоля = "ПериодичностьРегистра";
	ИначеЕсли ИмяПоляДляСравнения = "_REPETITIONFACTOR" Тогда
		ИмяПоля = "Кратность";
	ИначеЕсли ИмяПоляДляСравнения = "_USETOTALS" Тогда
		ИмяПоля = "ИспользоватьИтоги";
	ИначеЕсли ИмяПоляДляСравнения = "_MINPERIOD" Тогда
		ИмяПоля = "МинимальныйПериодСКоторогоНужноПересчитыватьИтоги";
	ИначеЕсли ИмяПоляДляСравнения = "_USESPLITTER" Тогда
		ИмяПоля = "ИспользоватьРазделениеИтогов";
	ИначеЕсли ИмяПоляДляСравнения = "_MINCALCULATEDPERIOD" Тогда
		ИмяПоля = "МинимальныйПериодПоКоторомуНужноНасчитыватьИтоги";
	ИначеЕсли ИмяПоляДляСравнения = "_MINCALCULATEDPERIOD" Тогда
		ИмяПоля = "МинимальныйПериодПоКоторомуНужноНасчитыватьИтоги";
	ИначеЕсли ИмяПоляДляСравнения = "_DIMHASH" Тогда
		ИмяПоля = "ХешИзмерений";
	ИначеЕсли ИмяПоляДляСравнения = "_DIMKEY" Тогда
		ИмяПоля = "КлючИзмерений";
	ИначеЕсли ИмяПоляДляСравнения = "_USE" Тогда
		ИмяПоля = "Использовать";
	ИначеЕсли ИмяПоляДляСравнения = "_DEFAULTPERIODIC" Тогда
		ИмяПоля = "ПериодичностьПоУмолчанию";
	ИначеЕсли Лев(ИмяПоляДляСравнения, 7) = "_DIMUSE" Тогда
		ИмяПоля = "ИспользоватьИзмерение";
	ИначеЕсли ИмяПоляДляСравнения = "_SIZE" Тогда
		ИмяПоля = "Размер";
	ИначеЕсли ИмяПоляДляСравнения = "_UPDATED" Тогда
		ИмяПоля = "Обновлен";
	ИначеЕсли ИмяПоляДляСравнения = "_ID" Тогда
		ИмяПоля = "Идентификатор";
	ИначеЕсли ИмяПоляДляСравнения = "_SLICEUSING" Тогда
		ИмяПоля = "ИспользоватьСрез";
	ИначеЕсли ИмяПоляДляСравнения = "_EDHASH" Тогда
		ИмяПоля = "Хеш";
	ИначеЕсли ИмяПоляДляСравнения = "_PDINITIALIZED" Тогда
		ИмяПоля = "ПредопределенноеЗначениеИнициализировано";
	ИначеЕсли ИмяПоляДляСравнения = "_TYPE" Тогда
		ИмяПоля = "Тип";
	ИначеЕсли ИмяПоляДляСравнения = "_FINISHTIME" Тогда
		ИмяПоля = "ВремяПоследнегоЗавершения";
	ИначеЕсли ИмяПоляДляСравнения = "_STARTTIME" Тогда
		ИмяПоля = "ВремяПоследнегоЗапуска";
	ИначеЕсли ИмяПоляДляСравнения = "_STATE" Тогда
		ИмяПоля = "ЗаданиеВыполняется";
	ИначеЕсли ИмяПоляДляСравнения = "_RESTARTATTEMPTNUMBER" Тогда
		ИмяПоля = "НомерПоследнейПопыткиПерезапуска";
	ИначеЕсли ИмяПоляДляСравнения = "_RESTARTPERIOD" Тогда
		ИмяПоля = "ПериодВремениМеждуПерезапускамиПриОшибке";
	ИначеЕсли ИмяПоляДляСравнения = "_RESTARTCOUNT" Тогда
		ИмяПоля = "КоличествоПерезапусковПриОшибке";
	ИначеЕсли ИмяПоляДляСравнения = "_ACTIVATIONCONDITION" Тогда
		ИмяПоля = "Расписание";
	ИначеЕсли ИмяПоляДляСравнения = "_USERNAME" Тогда
		ИмяПоля = "ИмяПользователя";
	ИначеЕсли ИмяПоляДляСравнения = "_PARAMETERS" Тогда
		ИмяПоля = "Параметры";
	ИначеЕсли ИмяПоляДляСравнения = "_PREDEFINED" Тогда
		ИмяПоля = "Предопределенное";
	ИначеЕсли ИмяПоляДляСравнения = "_METADATAID" Тогда
		ИмяПоля = "ИдентификаторОбъектаМетаданных";
	ИначеЕсли ИмяПоляДляСравнения = "_JOBKEY" Тогда
		ИмяПоля = "КлючРегламентногоЗадания";
	ИначеЕсли ИмяПоляДляСравнения = "_DESCRIPTION" Тогда
		ИмяПоля = "Наименование";
	ИначеЕсли ИмяПоляДляСравнения = "_DESCRIPTION" Тогда
		ИмяПоля = "Наименование";
	ИначеЕсли ИмяПоляДляСравнения = "_RECORDKEY" Тогда
		ИмяПоля = "КлючЗаписи";
	ИначеЕсли ИмяПоляДляСравнения = "_NODETREF"
		ИЛИ ИмяПоляДляСравнения = "_NODERREF"
		ИЛИ ИмяПоляДляСравнения = "_NODE_RRREF"
		ИЛИ ИмяПоляДляСравнения = "_NODE_RTREF"
		ИЛИ ИмяПоляДляСравнения = "_NODE_TYPE" Тогда
		ИмяПоля = "Узел";
	ИначеЕсли ИмяПоляДляСравнения = "_MESSAGENO" Тогда
		ИмяПоля = "НомерСообщения";
	ИначеЕсли ИмяПоляДляСравнения = "_CONSTID" Тогда
		ИмяПоля = "ИдентификаторКонстанты";
	ИначеЕсли ИмяПоляДляСравнения = "_USERID" Тогда
		ИмяПоля = "ИдентификаторПользователя";
	ИначеЕсли ИмяПоляДляСравнения = "_OBJECTKEY" Тогда
		ИмяПоля = "КлючОбъекта";
	ИначеЕсли ИмяПоляДляСравнения = "_SETTINGSKEY" Тогда
		ИмяПоля = "КлючНастроек";
	ИначеЕсли ИмяПоляДляСравнения = "_SETTINGSPRESENTATION" Тогда
		ИмяПоля = "ПредставлениеНастройки";
	ИначеЕсли ИмяПоляДляСравнения = "_SETTINGSDATA" Тогда
		ИмяПоля = "ДанныеНастройки";
	ИначеЕсли Лев(ИмяПоляДляСравнения, 18) = "_DATASEPARATIONUSE" Тогда
		ИмяПоля = "ИспользованиеРазделенияДанных";
	ИначеЕсли ИмяПоляДляСравнения = "_MDOBJID" Тогда
		ИмяПоля = "ИдентификаторОбъектаМетаданных";
	ИначеЕсли ИмяПоляДляСравнения = "_IDRREF" Тогда
		ИмяПоля = "ИдентификаторОбъекта";
	ИначеЕсли ИмяПоляДляСравнения = "_FILENAME" Тогда
		ИмяПоля = "ИмяФайла";
	ИначеЕсли ИмяПоляДляСравнения = "_CONFIGCHNGR_IDRREF" Тогда
		ИмяПоля = "ИдентификаторОбъектаИзмененияКонфигурации";
	ИначеЕсли ИмяПоляДляСравнения = "_CONFIGCHNGR_IDRREF" Тогда
		ИмяПоля = "ИдентификаторОбъектаИзмененияКонфигурации";
	ИначеЕсли ИмяПоляДляСравнения = "_DATA" Тогда
		ИмяПоля = "Данные";
	ИначеЕсли ИмяПоляДляСравнения = "_DATAID" Тогда
		ИмяПоля = "ИдентификаторДанных";
	ИначеЕсли ИмяПоляДляСравнения = "_DATE" Тогда
		ИмяПоля = "Дата";
	ИначеЕсли ИмяПоляДляСравнения = "_CONTENT" Тогда
		ИмяПоля = "Содержимое";
	ИначеЕсли ИмяПоляДляСравнения = "_COMMENT" Тогда
		ИмяПоля = "Комментарий";
	ИначеЕсли ИмяПоляДляСравнения = "_EXTNAME" Тогда
		ИмяПоля = "ИмяРасширения";
	ИначеЕсли ИмяПоляДляСравнения = "_EXTENSIONZIPPEDINFO" Тогда
		ИмяПоля = "СжатаяИнформацияРасширения";
	ИначеЕсли ИмяПоляДляСравнения = "_EXTENSIONUSEPURPOSE" Тогда
		ИмяПоля = "НазначениеИспользованияРасширения";
	ИначеЕсли ИмяПоляДляСравнения = "_EXTENSIONSCOPE" Тогда
		ИмяПоля = "ОбластьРасширения";
	ИначеЕсли ИмяПоляДляСравнения = "_EXTENSIONORDER" Тогда
		ИмяПоля = "ПорядокРасширения";
	ИначеЕсли ИмяПоляДляСравнения = "_EXTDATAID" Тогда
		ИмяПоля = "ИдентификаторДанныхРасширения";
	ИначеЕсли ИмяПоляДляСравнения = "_ENABLEUSE" Тогда
		ИмяПоля = "ВключитьИспользование";
	ИначеЕсли ИмяПоляДляСравнения = "_DIMUUID" Тогда
		ИмяПоля = "ИдентификаторИзмерения";
	ИначеЕсли ИмяПоляДляСравнения = "_DIMSMAP" Тогда
		ИмяПоля = "КартаИзмерения";
	ИначеЕсли ИмяПоляДляСравнения = "_DIMCODE" Тогда
		ИмяПоля = "КодИзмерения";
	ИначеЕсли ИмяПоляДляСравнения = "_ISACTUAL" Тогда
		ИмяПоля = "Актуальный";
	ИначеЕсли ИмяПоляДляСравнения = "_HISTORYDATAID" Тогда
		ИмяПоля = "ИдентификаторИсторииДанных";
	ИначеЕсли ИмяПоляДляСравнения = "_ISEXTENSIONS" Тогда
		ИмяПоля = "ЭтоРасширения";
	ИначеЕсли ИмяПоляДляСравнения = "_ISSETTINGS" Тогда
		ИмяПоля = "ЭтоНастройки";
	ИначеЕсли ИмяПоляДляСравнения = "_LEVEL" Тогда
		ИмяПоля = "Уровень";
	ИначеЕсли ИмяПоляДляСравнения = "_MASTERNODE" Тогда
		ИмяПоля = "ГлавныйУзел";
	ИначеЕсли ИмяПоляДляСравнения = "_MDID" Тогда
		ИмяПоля = "ИдентификаторМетаданных";
	ИначеЕсли ИмяПоляДляСравнения = "_METADATAOBJECTUUID" Тогда
		ИмяПоля = "ИдентификаторОбъектаМетаданных";
	ИначеЕсли ИмяПоляДляСравнения = "_METADATAVERSIONNUMBER" Тогда
		ИмяПоля = "НомерВерсииОбъектаМетаданных";
	ИначеЕсли ИмяПоляДляСравнения = "_METADATAVERSIONNUMBER" Тогда
		ИмяПоля = "НомерВерсииОбъектаМетаданных";
	ИначеЕсли ИмяПоляДляСравнения = "_URL" Тогда
		ИмяПоля = "АдресСсылки";
	ИначеЕсли ИмяПоляДляСравнения = "_URLHASH" Тогда
		ИмяПоля = "ХешАдресаСсылки";
	ИначеЕсли ИмяПоляДляСравнения = "_USERFULLNAME" Тогда
		ИмяПоля = "ПолноеИмяПользователя";
	ИначеЕсли ИмяПоляДляСравнения = "_VERSIONNUMBER" Тогда
		ИмяПоля = "НомерВерсии";
	ИначеЕсли ИмяПоляДляСравнения = "_ACTIONONACCEPT" Тогда
		ИмяПоля = "ДействиеПринято";
	ИначеЕсли ИмяПоляДляСравнения = "_AGGMODE" Тогда
		ИмяПоля = "РежимАгрегирования";
	ИначеЕсли ИмяПоляДляСравнения = "_BUFFERPERIODIC" Тогда
		ИмяПоля = "БуферПериодичности";
	ИначеЕсли ИмяПоляДляСравнения = "_CHANGETYPE" Тогда
		ИмяПоля = "ТипИзменения";
	ИначеЕсли ИмяПоляДляСравнения = "_DELTAPERIODIC" Тогда
		ИмяПоля = "ИзменениеПериодичности";
	ИначеЕсли ИмяПоляДляСравнения = "_DEFAULTPRDBEG" Тогда
		ИмяПоля = "ДатаНачалаАгрегатаПоУмолчанию";
	ИначеЕсли ИмяПоляДляСравнения = "_DEFAULTPRDEND" Тогда
		ИмяПоля = "ДатаОкончанияАгрегатаПоУмолчанию";
	ИначеЕсли ИмяПоляДляСравнения = "_ECSACTIVITY" Тогда
		ИмяПоля = "АктивностьИсторииРаботыПользователей";
	ИначеЕсли ИмяПоляДляСравнения = "_FILLENDDATE" Тогда
		ИмяПоля = "ЗаполнятьДатуОкончания";
	ИначеЕсли ИмяПоляДляСравнения = "_FILLSTARTDATE" Тогда
		ИмяПоля = "ЗаполнятьДатуНачала";
	ИначеЕсли ИмяПоляДляСравнения = "_OFFDATE" Тогда
		ИмяПоля = "ДатаОтключения";
	ИначеЕсли ИмяПоляДляСравнения = "_PDUPDMODE" Тогда
		ИмяПоля = "РежимОбновленияПредопределенныхДанных";
	ИначеЕсли ИмяПоляДляСравнения = "_POSITION" Тогда
		ИмяПоля = "Позиция";
	ИначеЕсли ИмяПоляДляСравнения = "_PRDBEG" Тогда
		ИмяПоля = "ДатаНачалаАгрегата";
	ИначеЕсли ИмяПоляДляСравнения = "_PRDEND" Тогда
		ИмяПоля = "ДатаОкончанияАгрегата";
	ИначеЕсли ИмяПоляДляСравнения = "_PROB" Тогда
		ИмяПоля = "СлужебноеПоле";
	ИначеЕсли ИмяПоляДляСравнения = "_RECORDKIND" Тогда
		ИмяПоля = "ВидЗаписи";
	ИначеЕсли ИмяПоляДляСравнения = "_RESTRUCTDATA" Тогда
		ИмяПоля = "ДанныеРеструктуризации";
	ИначеЕсли ИмяПоляДляСравнения = "_RESTRUCTDATAINT" Тогда
		ИмяПоля = "ДанныеРеструктуризацииЧисло";
	ИначеЕсли ИмяПоляДляСравнения = "_TRANSACTION" Тогда
		ИмяПоля = "Транзакция";
	ИначеЕсли ИмяПоляДляСравнения = "_UPDATETIME" Тогда
		ИмяПоля = "ВремяОбновления";
	ИначеЕсли ИмяПоляДляСравнения = "_USECNT" Тогда
		ИмяПоля = "Использование";
	ИначеЕсли ИмяПоляДляСравнения = "_USEDINDISTRIBUTEDINFOBASE" Тогда
		ИмяПоля = "ИспользованиеРаспределеннуюИнформационнуюБазу";
	КонецЕсли;
		
	Возврат ИмяПоля;
	
КонецФункции

Функция СформироватьПолноеПредставлениеМетаданных(Знач ЭлементБазы)
	
	ПолноеПредставлениеМетаданных = "";
	
	Если ЗначениеЗаполнено(ЭлементБазы.ИмяМетаданных)
		И ЗначениеЗаполнено(ЭлементБазы.НазначениеМетаданных) Тогда
		ПолноеПредставлениеМетаданных = ЭлементБазы.ИмяМетаданных + "("
		+ ЭлементБазы.НазначениеМетаданных
		+ ")";
	ИначеЕсли ЗначениеЗаполнено(ЭлементБазы.ИмяМетаданных) Тогда
		ПолноеПредставлениеМетаданных = ЭлементБазы.ИмяМетаданных;
	ИначеЕсли ЗначениеЗаполнено(ЭлементБазы.НазначениеМетаданных) Тогда
		ПолноеПредставлениеМетаданных = ЭлементБазы.НазначениеМетаданных;
	КонецЕсли;
	ПолноеПредставлениеМетаданных = ПолноеПредставлениеМетаданных + " Таблица: " + ЭлементБазы.ИмяТаблицыБазыДанных;
	ПолноеПредставлениеМетаданных = СокрЛП(ПолноеПредставлениеМетаданных);
	Возврат ПолноеПредставлениеМетаданных;

КонецФункции

Процедура ЗаполнитьНастройкиОбъектовБазыДанных(СтруктураБазыДанных1С, СтруктураБазыДанныхSQL)
	
	НастройкиОбработкиТаблиц.Очистить();
	
	Для Каждого ЭлементБазыДанных Из СтруктураБазыДанныхSQL Цикл
		
		ИмяМетаданных = Неопределено;
		НазначениеМетаданных = Неопределено;
		
		СтруктураПоискаТаблицы = Новый Структура("ИмяТаблицыХранения", ЭлементБазыДанных.ИмяТаблицы);
		РезультатПоискаТаблицы = СтруктураБазыДанных1С.НайтиСтроки(СтруктураПоискаТаблицы);	
		Если РезультатПоискаТаблицы.Количество() > 0 Тогда
			ДанныеТаблицы1С = РезультатПоискаТаблицы.Получить(0);
			ИмяМетаданных = ДанныеТаблицы1С.Метаданные;
			НазначениеМетаданных = ДанныеТаблицы1С.Назначение;
		КонецЕсли;
		
		ЗаписьНастройки = НастройкиОбработкиТаблиц.Добавить();
		
		// Основная информация об объекте
		ЗаписьНастройки.ИмяТаблицыБазыДанных = ВРег(ЭлементБазыДанных.ИмяТаблицы);
		ЗаписьНастройки.ИмяМетаданных = ИмяМетаданных;
		ЗаписьНастройки.НазначениеМетаданных = НазначениеМетаданных;
				
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоОбъектныйТип(ИмяМетаданных)
	
	Возврат Найти(ИмяМетаданных, "Справочник.") > 0
		ИЛИ Найти(ИмяМетаданных, "Документ.") > 0
		ИЛИ Найти(ИмяМетаданных, "ПланВидовХарактеристик.") > 0
		ИЛИ Найти(ИмяМетаданных, "ПланСчетов.") > 0
		ИЛИ Найти(ИмяМетаданных, "ПланВидовРасчета.") > 0
		ИЛИ Найти(ИмяМетаданных, "Задача.") > 0
		ИЛИ Найти(ИмяМетаданных, "БизнесПроцесс.") > 0;
	
КонецФункции

Функция КонвертироватьМакетВТаблицуЗначений(ИсходныйДокумент, КолонкаИндекса = 1, ПреобразоватьСтрокиВВерхнийРегистр = Ложь)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	НомерКолонки = 0;
	Пока Истина Цикл
		НомерКолонки = НомерКолонки + 1;
		ИмяКолонки = ИсходныйДокумент.Область(1, НомерКолонки).Текст;
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;        
		ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	СчетчикКолонок = НомерКолонки - 1;	
	НомерСтроки = 1; 
	ФлагПрерывания = Ложь;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		Для НомерКолонки = 1 ПО СчетчикКолонок Цикл
			ТекстКолонки = ИсходныйДокумент.Область(НомерСтроки, НомерКолонки).Текст;
			Если ПустаяСтрока(ТекстКолонки) Тогда
				Если НомерКолонки = КолонкаИндекса Тогда
					Флагпрерывания = Истина;
					ТаблицаДанных.Удалить(НоваяСтрока);
				КонецЕсли;
			Иначе
				НоваяСтрока[НомерКолонки - 1] = ТекстКолонки;
				Если ПреобразоватьСтрокиВВерхнийРегистр Тогда
					НоваяСтрока[НомерКолонки - 1] = ВРег(НоваяСтрока[НомерКолонки - 1]);
				КонецЕсли;
			КонецЕсли;
			
			Если Флагпрерывания Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Флагпрерывания Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПреобразоватьКБулево(Знач ИсходноеЗначение)
	
	Если ТипЗнч(ИсходноеЗначение) = Тип("Строка") Тогда
	
		ИсходноеЗначение = ВРег(ИсходноеЗначение);
		
		Если ИсходноеЗначение = "ИСТИНА" Тогда
			
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Булево") Тогда
		
		Возврат ИсходноеЗначение;
		
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Число") Тогда 
		
		Возврат (ИсходноеЗначение > 0);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура Инициализация()
	
	ИдентификаторОбработки = Новый УникальныйИдентификатор;
	ТаймаутПодключенияСекунд = 180;
	УдалятьУстаревшиеОбъекты = Истина;
	ТипСУБД = "SQLServer";
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

Функция НазначениеОбработки() 
	
	МассивНазначенийОбработки = Новый Массив;
	 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

Функция ТаблицаКомандОбработки() 
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево"));
	
	ДобавитьКоманду(тзКоманд, 
		НСтр("ru='МастерСозданияКопииИнформационнойБазыДляОтчетности'"), 
		НСтр("ru='Мастер создания копии информационной базы для отчетности'"), 
		Ложь, 
		"ОткрытиеФормы", 
		"", 
		Ложь);
	
	Возврат тзКоманд;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	строкаКоманды = ТаблицаКоманд.Добавить();
	строкаКоманды.Идентификатор = Идентификатор;
	строкаКоманды.Представление = Представление;
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	строкаКоманды.Использование = Использование;
	строкаКоманды.Модификатор = Модификатор;
	строкаКоманды.Скрыть = Скрыть;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботыADO

Функция КомандыСозданияПредставленийБазыДанныхSQL()
	
	ПредставленияБазыДанных = Новый ТаблицаЗначений;
	ПредставленияБазыДанных.Колонки.Добавить("ИмяТаблицы");
	ПредставленияБазыДанных.Колонки.Добавить("ИмяТаблицыОригинальное");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаУдалитьПредставление");
	ПредставленияБазыДанных.Колонки.Добавить("КомандаСоздатьПредставление");
	ПредставленияБазыДанных.Индексы.Добавить("ИмяТаблицы");
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИсходнаяБазаДанных, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);
		
	ЗапросКомандыСозданияПредставлений = ПолучитьМакет("ШаблонСкриптаСписокКомандДляСозданияПредставлений")
		.ПолучитьТекст();
	ЗапросКомандыСозданияПредставлений = СтрЗаменить(
		ЗапросКомандыСозданияПредставлений, 
		"{ИмяИсходнойБазы}", 
		ИсходнаяБазаДанных);
	
	ТекстОтбораПоТаблицам = "''";
	
	ЗапросКомандыСозданияПредставлений = СтрЗаменить(
		ЗапросКомандыСозданияПредставлений, 
		"{СписокТаблицДляПереносаКакЕсть}", 
		ТекстОтбораПоТаблицам);
	
	КомандаБД = Новый COMОбъект("ADODB.Command"); 
	КомандаБД.ActiveConnection = СоединениеБД;
	КомандаБД.CommandText = ЗапросКомандыСозданияПредставлений;
	КомандаБД.CommandTimeout = ТаймаутПодключенияСекунд;
	
	РезультатБД = КомандаБД.Execute();
	Пока НЕ РезультатБД.Eof() Цикл
		
		ИмяТаблицы = РезультатБД.Fields(0).Value;
		ИмяТаблицыОригинальное = РезультатБД.Fields(1).Value;
		КомандаУдалитьПредставление = РезультатБД.Fields(2).Value;
		КомандаСоздатьПредставление = РезультатБД.Fields(3).Value;		
		
		ЗаписьТаблица = ПредставленияБазыДанных.Добавить();
		ЗаписьТаблица.ИмяТаблицы = ИмяТаблицы;
		ЗаписьТаблица.ИмяТаблицыОригинальное = ИмяТаблицыОригинальное;
		ЗаписьТаблица.КомандаУдалитьПредставление = КомандаУдалитьПредставление;
		ЗаписьТаблица.КомандаСоздатьПредставление = КомандаСоздатьПредставление;		
		
		РезультатБД.MoveNext();
		
	КонецЦикла;
		
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат ПредставленияБазыДанных;
	
КонецФункции

Функция СтруктураХраненияИсходнойБазыДанныхSQL()
	
	ТаблицыБазыДанных = Новый ТаблицаЗначений;
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицы");
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицыВРЕГ");
	ТаблицыБазыДанных.Индексы.Добавить("ИмяТаблицыВРЕГ");
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИсходнаяБазаДанных, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);
		
	ЗапросСпискаТаблиц = ПолучитьМакет("ЗапросСпискаТаблиц").ПолучитьТекст();
	КомандаБД = Новый COMОбъект("ADODB.Command"); 
	КомандаБД.ActiveConnection = СоединениеБД;
	КомандаБД.CommandText = ЗапросСпискаТаблиц;
	КомандаБД.CommandTimeout = ТаймаутПодключенияСекунд;
	
	РезультатБД = КомандаБД.Execute();
	Пока НЕ РезультатБД.Eof() Цикл
		
		ИмяТаблицы = РезультатБД.Fields(0).Value;
		ИмяТаблицыВРЕГ = РезультатБД.Fields(1).Value;
		
		ЗаписьТаблица = ТаблицыБазыДанных.Добавить();
		ЗаписьТаблица.ИмяТаблицы = ИмяТаблицы;
		ЗаписьТаблица.ИмяТаблицыВРЕГ = ИмяТаблицыВРЕГ;
		
		РезультатБД.MoveNext();
		
	КонецЦикла;
		
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат ТаблицыБазыДанных;
	
КонецФункции

Функция СтруктураХраненияАдаптированнойБазыДанныхSQL()
	
	ТаблицыБазыДанных = Новый ТаблицаЗначений;
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицы");
	ТаблицыБазыДанных.Колонки.Добавить("ИмяТаблицыВРЕГ");
	ТаблицыБазыДанных.Индексы.Добавить("ИмяТаблицыВРЕГ");
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИмяБазыДляПредставлений, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);
		
	Если СоединениеБД = Неопределено Тогда
		Возврат ТаблицыБазыДанных;
	КонецЕсли;
		
	ЗапросСпискаТаблиц = ПолучитьМакет("ЗапросСпискаТаблиц").ПолучитьТекст();
	КомандаБД = Новый COMОбъект("ADODB.Command"); 
	КомандаБД.ActiveConnection = СоединениеБД;
	КомандаБД.CommandText = ЗапросСпискаТаблиц;
	КомандаБД.CommandTimeout = ТаймаутПодключенияСекунд;
	
	РезультатБД = КомандаБД.Execute();
	Пока НЕ РезультатБД.Eof() Цикл
		
		ИмяТаблицы = РезультатБД.Fields(0).Value;
		ИмяТаблицыВРЕГ = РезультатБД.Fields(1).Value;
		
		ЗаписьТаблица = ТаблицыБазыДанных.Добавить();
		ЗаписьТаблица.ИмяТаблицы = ИмяТаблицы;
		ЗаписьТаблица.ИмяТаблицыВРЕГ = ИмяТаблицыВРЕГ;
		
		РезультатБД.MoveNext();
		
	КонецЦикла;
		
	ЗакрытьСоединениеADO(СоединениеБД);
	
	Возврат ТаблицыБазыДанных;
	
КонецФункции

Функция ПроверитьПодключениеКИсходнойКопииБазыДанных() Экспорт
	
	Возврат ПроверитьПодключениеКБазеДанных(ИсходнаяБазаДанных);
	
КонецФункции

Функция ПроверитьПодключениеКАдаптированнойБазеДанных() Экспорт
	
	Возврат ПроверитьПодключениеКБазеДанных(ИмяБазыДляПредставлений);
	
КонецФункции

Функция ПроверитьПодключениеКБазеДанных(ИмяБазыДанных) Экспорт
	
	СоединениеБД = СоздатьСоединениеСБазой(
		ТипСУБД, 
		Сервер, 
		ИмяБазыДанных, 
		ИмяПользователя, 
		Пароль, 
		АутентификацияNTLM);	
		
	Если СоединениеБД = Неопределено Тогда		
		Возврат Ложь;		
	Иначе
		ЗакрытьСоединениеADO(СоединениеБД);
		Возврат Истина;		
	КонецЕсли;
	
КонецФункции

Функция СоздатьСоединениеСБазой(Знач ТипСУБД, Знач ИмяСервера, Знач ИмяБД, Знач Пользователь, Знач Пароль, Знач АутентификацияNTLM = Ложь)
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	
	Если ТипСУБД = "SQLServer" Тогда
		
		Если АутентификацияNTLM Тогда
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Integrated Security=SSPI;"
				+ "Persist Security Info=False;"
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		Иначе	
			
			СтрокаСоединения = "Provider=SQLOLEDB.1;Password=" + Пароль + ";"
				+ "Persist Security Info=True;User ID=" + Пользователь + ";" 
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
			
		КонецЕсли;
		
	ИначеЕсли ТипСУБД = "PostgreSQL" Тогда
		
		СтрокаСоединения = "Driver={PostgreSQL Unicode};Pwd=" + Пароль + ";"
			+ "Uid=" + Пользователь + ";"
			+ "Database=" + ИмяБД + ";"
			+ "Server=" + ИмяСервера;
		
	КонецЕсли;
	
	Попытка
		
	    Соединение.Open(СтрокаСоединения);
		
		Возврат Соединение;
		
	Исключение
		
		СообщениеОбОшибке = ТипСУБД 
			+ ": Ошибка установки соединения: " 
			+ Символы.ПС 
			+ ОписаниеОшибки();
		
		СообщитьПользователю(СообщениеОбОшибке);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ЗакрытьСоединениеADO(Соединение)
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение.Close();
	Исключение
		// Действий не требуется	
	КонецПопытки;
	
	Соединение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализация();

#КонецОбласти

#КонецЕсли