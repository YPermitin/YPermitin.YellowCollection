
#Область ОписаниеПеременных

&НаКлиенте
Перем ДатаФормированияОтчета;

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Отчет.ОтчетФормируетсяСКлиента = Истина;
	Отчет.ПровайдерыКриптографии.Очистить();
	Отчет.СертификатыКриптографии.Очистить();
	
	ДатаФормированияОтчета = ТекущаяДата();
	ДействиеНаКлиенте = Истина;
	
	ЗаполнитьДанныеКриптографии();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьДанныеКриптографии()
		
	РежимПолученияДанных = РежимПолученияДанныхОтчета();
	
	Если НЕ (РежимПолученияДанных = "КлиентИСервер"
		ИЛИ РежимПолученияДанных = "Клиент") Тогда
		
		СкомпоноватьРезультат();
		Возврат;
		
	КонецЕсли;
		
	#Область ПровайдерыКриптографии
	
	Компьютер = ".";	
	ИмяCOMОбъекта = "winmgmts:{impersonationLevel=impersonate}!\\" + Компьютер + "\root\default:StdRegProv";
	
	Попытка
		РегПровайдеры = ПолучитьCOMОбъект(ИмяCOMОбъекта);
	Исключение
		
		СообщитьПользователю(
			 НСтр("ru='Не удалось получить COM-объект для работы с реестром Windows.
			|Недостаточно прав или используется Linux :)'"));
		
		РегПровайдеры = Неопределено;
		
	КонецПопытки;
	
	Если НЕ РегПровайдеры = Неопределено Тогда
		
		ИменаУзлов = Неопределено;
		
		РазделПровайдеров = "SOFTWARE\Microsoft\Cryptography\Defaults\Provider";
		РегПровайдеры.EnumKey("2147483650", РазделПровайдеров, ИменаУзлов);
		Для Индекс = 0 По ИменаУзлов.GetLength()-1 Цикл
			
			ЗаписьПровайдер = Отчет.ПровайдерыКриптографии.Добавить();
			ЗаписьПровайдер.НаКлиенте = Истина;
			ЗаписьПровайдер.ID = Индекс;
			ЗаписьПровайдер.Наименование = ИменаУзлов.GetValue(Индекс);
			
			ЗначениеПараметра = Неопределено;
			РазделПровайдера = РазделПровайдеров + "\" + ЗаписьПровайдер.Наименование;
			РегПровайдеры.GetDWORDValue("2147483650", РазделПровайдера, "Type", ЗначениеПараметра);
			ЗаписьПровайдер.ТипМодуля = ЗначениеПараметра;
			
			Попытка
				МенеджерКриптографии = Новый МенеджерКриптографии(ЗаписьПровайдер.Наименование, "", ЗаписьПровайдер.ТипМодуля);	
				МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
			Исключение
				МенеджерКриптографии = Неопределено;	
			КонецПопытки;
			
			Если НЕ МенеджерКриптографии = Неопределено Тогда
				
				ЗаписьПровайдер.АлгоритмПодписи = МенеджерКриптографии.АлгоритмПодписи;	
				ЗаписьПровайдер.АлгоритмХеширования = МенеджерКриптографии.АлгоритмХеширования;
				ЗаписьПровайдер.АлгоритмШифрования = МенеджерКриптографии.АлгоритмШифрования;
				
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Сертификаты
		
	Для Каждого Провайдер Из Отчет.ПровайдерыКриптографии Цикл
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ЗаписьПровайдер.Наименование, "", ЗаписьПровайдер.ТипМодуля);	
			МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
		Исключение
			МенеджерКриптографии = Неопределено;	
		КонецПопытки;
		
		Если НЕ МенеджерКриптографии = Неопределено Тогда
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ЗаписьПровайдер.Наименование, "", ЗаписьПровайдер.ТипМодуля);
			ОписаниеОповещенияПолучениеХранилищаСертификатов = Новый ОписаниеОповещения("ЗаполнитьДанныеКриптографииПродолжение", ЭтаФорма);
			МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
				ОписаниеОповещенияПолучениеХранилищаСертификатов);
			
			// Для чтения сертификатов воспользуемся первым доступным менеджером криптографии
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКриптографииПродолжение(Хранилище, ДополнительныеПараметры) Экспорт
	
	Если Хранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПолученияВсех = Новый ОписаниеОповещения("ПолучитьВсеСертификатыПродолжение", ЭтаФорма);
	Хранилище.НачатьПолучениеВсех(ОписаниеОповещенияПолученияВсех);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсеСертификатыПродолжение(Сертификаты, ДополнительныеПараметры) Экспорт
	
	Если Сертификаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СертификатКриптографии Из Сертификаты Цикл
		
		ЗаписьСертификат = Отчет.СертификатыКриптографии.Добавить();
		ЗаписьСертификат.НаКлиенте = Истина;
		ЗаписьСертификат.Версия = СертификатКриптографии.Версия;
		ЗаписьСертификат.ДатаНачала = СертификатКриптографии.ДатаНачала;
		ЗаписьСертификат.ДатаОкончания = СертификатКриптографии.ДатаОкончания;
		Если ЗначениеЗаполнено(ЗаписьСертификат.ДатаОкончания)
			И ЗаписьСертификат.ДатаОкончания <= ДатаФормированияОтчета Тогда
			ЗаписьСертификат.Просрочен = Истина;
		Иначе
			ЗаписьСертификат.Просрочен = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьСертификат.ДатаОкончания)
			И НЕ ЗаписьСертификат.Просрочен Тогда
			ЗаписьСертификат.СрокДействияДней = Цел((ЗаписьСертификат.ДатаОкончания - ДатаФормированияОтчета) / 86400);
		Иначе
			ЗаписьСертификат.СрокДействияДней = 0;             
		КонецЕсли;
		
		СертификатКриптографии.Издатель.Свойство("CN", ЗаписьСертификат.Издатель_CN);
		СертификатКриптографии.Издатель.Свойство("O", ЗаписьСертификат.Издатель_O);
		СертификатКриптографии.Издатель.Свойство("OU", ЗаписьСертификат.Издатель_OU);
		СертификатКриптографии.Издатель.Свойство("C", ЗаписьСертификат.Издатель_C);
		СертификатКриптографии.Издатель.Свойство("ST", ЗаписьСертификат.Издатель_ST);
		СертификатКриптографии.Издатель.Свойство("L", ЗаписьСертификат.Издатель_L);
		СертификатКриптографии.Издатель.Свойство("E", ЗаписьСертификат.Издатель_E);
		СертификатКриптографии.Издатель.Свойство("SN", ЗаписьСертификат.Издатель_SN);
		СертификатКриптографии.Издатель.Свойство("GN", ЗаписьСертификат.Издатель_GN);
		СертификатКриптографии.Издатель.Свойство("T", ЗаписьСертификат.Издатель_T);
		СертификатКриптографии.Издатель.Свойство("Street", ЗаписьСертификат.Издатель_Street);
		
		ЗаписьСертификат.ИспользоватьДляПодписи = СертификатКриптографии.ИспользоватьДляПодписи;
		ЗаписьСертификат.ИспользоватьДляШифрования = СертификатКриптографии.ИспользоватьДляШифрования;
		ЗаписьСертификат.ОткрытыйКлючДвоичныеДанные = Строка(СертификатКриптографии.ОткрытыйКлюч);
		ЗаписьСертификат.ОткрытыйКлючBase64 = Base64Строка(СертификатКриптографии.ОткрытыйКлюч);
		ЗаписьСертификат.ОтпечатокДвоичныеДанные = Строка(СертификатКриптографии.Отпечаток);
		ЗаписьСертификат.ОтпечатокBase64 = Base64Строка(СертификатКриптографии.Отпечаток);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СертификатКриптографии.РасширенныеСвойства);
		ЗаписьСертификат.РасширенныеСвойства = ЗаписьJSON.Закрыть();
		
		ЗаписьСертификат.СерийныйНомерДвоичныеДанные = Строка(СертификатКриптографии.СерийныйНомер);
		ЗаписьСертификат.СерийныйНомерBase64 = Base64Строка(СертификатКриптографии.СерийныйНомер);
		
		СертификатКриптографии.Субъект.Свойство("CN", ЗаписьСертификат.Субъект_CN);
		СертификатКриптографии.Субъект.Свойство("O", ЗаписьСертификат.Субъект_O);
		СертификатКриптографии.Субъект.Свойство("OU", ЗаписьСертификат.Субъект_OU);
		СертификатКриптографии.Субъект.Свойство("C", ЗаписьСертификат.Субъект_C);
		СертификатКриптографии.Субъект.Свойство("ST", ЗаписьСертификат.Субъект_ST);
		СертификатКриптографии.Субъект.Свойство("L", ЗаписьСертификат.Субъект_L);
		СертификатКриптографии.Субъект.Свойство("E", ЗаписьСертификат.Субъект_E);
		СертификатКриптографии.Субъект.Свойство("SN", ЗаписьСертификат.Субъект_SN);
		СертификатКриптографии.Субъект.Свойство("GN", ЗаписьСертификат.Субъект_GN);
		СертификатКриптографии.Субъект.Свойство("T", ЗаписьСертификат.Субъект_T);			
		СертификатКриптографии.Субъект.Свойство("Street", ЗаписьСертификат.Субъект_Street);
		
	КонецЦикла;
	
	СкомпоноватьРезультат();
	
КонецПроцедуры

&НаСервере
Функция РежимПолученияДанныхОтчета()
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыДанных = Настройки.ПараметрыДанных;
	РежимПолученияДанных = ПараметрыДанных.Элементы.Найти("ПолучениеДанных").Значение;
	
	Возврат РежимПолученияДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;		
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти
