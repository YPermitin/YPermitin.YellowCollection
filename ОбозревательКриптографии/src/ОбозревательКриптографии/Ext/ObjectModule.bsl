
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных
	
Перем ДатаФормированияОтчета;
Перем РежимПолученияДанных;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Сведения о внешней обработке
// 
// Возвращаемое значение:
//   - Структура - Информация о внешнем отчете и обработке
//
Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", НСтр("ru='Обозреватель криптографии'"));
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0.0");
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	РегистрационныеДанные.Вставить("Информация", 
		НСтр("ru='Отчет ""Обозреватель криптографии"" предназначен для просмотра доступных провайдеров криптографии, а также сертификатов. 
		|Позволяет получить данные как на клиенте, так и на сервере. Работает только с Windows.'"));
		
	МассивНазначенийОбработки = НазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	ТаблицаКомандОбработки = ТаблицаКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ОтчетФормируетсяСКлиента Тогда
		ПровайдерыКриптографии.Очистить();
		СертификатыКриптографии.Очистить();
	КонецЕсли;
		
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыДанных = Настройки.ПараметрыДанных;
	РежимПолученияДанных = ПараметрыДанных.Элементы.Найти("ПолучениеДанных").Значение;
	
	ДатаФормированияОтчета = ТекущаяДатаСеанса();
	ЗаполнитьДанныеКриптографии();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
		
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	СтруктураИсточниковДанных = Новый Структура(
		"ПровайдерыКриптографии, СертификатыКриптографии", 
		ПровайдерыКриптографии.Выгрузить(),
		СертификатыКриптографии.Выгрузить());
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, СтруктураИсточниковДанных, ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
			
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеКриптографии()
	
	Если НЕ (РежимПолученияДанных = "КлиентИСервер"
		ИЛИ РежимПолученияДанных = "Сервер") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Область ПровайдерыКриптографии
	
	Компьютер = ".";	
	ИмяCOMОбъекта = "winmgmts:{impersonationLevel=impersonate}!\\" + Компьютер + "\root\default:StdRegProv";
	
	Попытка
		РегПровайдеры = ПолучитьCOMОбъект(ИмяCOMОбъекта);
	Исключение
		
		СообщитьПользователю(
			НСтр("ru='Не удалось получить COM-объект для работы с реестром Windows.
			|Недостаточно прав или используется Linux :)'"));
		
		РегПровайдеры = Неопределено;
		
	КонецПопытки;
	
	Если НЕ РегПровайдеры = Неопределено Тогда
		
		ИменаУзлов = Неопределено;
		
		РазделПровайдеров = "SOFTWARE\Microsoft\Cryptography\Defaults\Provider";
		РегПровайдеры.EnumKey("2147483650", РазделПровайдеров, ИменаУзлов);
		Для Индекс = 0 По ИменаУзлов.GetLength()-1 Цикл
			
			ЗаписьПровайдер = ПровайдерыКриптографии.Добавить();
			ЗаписьПровайдер.НаКлиенте = Ложь;
			ЗаписьПровайдер.ID = Индекс;
			ЗаписьПровайдер.Наименование = ИменаУзлов.GetValue(Индекс);
			
			ЗначениеПараметра = Неопределено;
			РазделПровайдера = РазделПровайдеров + "\" + ЗаписьПровайдер.Наименование;
			РегПровайдеры.GetDWORDValue("2147483650", РазделПровайдера, "Type", ЗначениеПараметра);
			ЗаписьПровайдер.ТипМодуля = ЗначениеПараметра;
			
			Попытка
				МенеджерКриптографии = Новый МенеджерКриптографии(ЗаписьПровайдер.Наименование, "", ЗаписьПровайдер.ТипМодуля);	
				МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
			Исключение
				МенеджерКриптографии = Неопределено;	
			КонецПопытки;
			
			Если НЕ МенеджерКриптографии = Неопределено Тогда
				
				ЗаписьПровайдер.АлгоритмПодписи = МенеджерКриптографии.АлгоритмПодписи;	
				ЗаписьПровайдер.АлгоритмХеширования = МенеджерКриптографии.АлгоритмХеширования;
				ЗаписьПровайдер.АлгоритмШифрования = МенеджерКриптографии.АлгоритмШифрования;
				
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Сертификаты
		
	Для Каждого Провайдер Из ПровайдерыКриптографии Цикл
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ЗаписьПровайдер.Наименование, "", ЗаписьПровайдер.ТипМодуля);	
			МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьПолнуюЦепочку;
		Исключение
			МенеджерКриптографии = Неопределено;	
		КонецПопытки;
		
		Если НЕ МенеджерКриптографии = Неопределено Тогда
			
			ТекущееХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
			ВсеСертификатыКриптографии = ТекущееХранилищеСертификатов.ПолучитьВсе();
			
			Для Каждого СертификатКриптографии Из ВсеСертификатыКриптографии Цикл
				
				ЗаписьСертификат = СертификатыКриптографии.Добавить();
				ЗаписьСертификат.НаКлиенте = Ложь;
				ЗаписьСертификат.Версия = СертификатКриптографии.Версия;
				ЗаписьСертификат.ДатаНачала = СертификатКриптографии.ДатаНачала;
				ЗаписьСертификат.ДатаОкончания = СертификатКриптографии.ДатаОкончания;
				Если ЗначениеЗаполнено(ЗаписьСертификат.ДатаОкончания)
					И ЗаписьСертификат.ДатаОкончания <= ДатаФормированияОтчета Тогда
					ЗаписьСертификат.Просрочен = Истина;
				Иначе
					ЗаписьСертификат.Просрочен = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗаписьСертификат.ДатаОкончания)
					И НЕ ЗаписьСертификат.Просрочен Тогда
					ЗаписьСертификат.СрокДействияДней = Цел((ЗаписьСертификат.ДатаОкончания - ДатаФормированияОтчета) / 86400);
				Иначе
					ЗаписьСертификат.СрокДействияДней = 0;             
				КонецЕсли;
				
				СертификатКриптографии.Издатель.Свойство("CN", ЗаписьСертификат.Издатель_CN);
				СертификатКриптографии.Издатель.Свойство("O", ЗаписьСертификат.Издатель_O);
				СертификатКриптографии.Издатель.Свойство("OU", ЗаписьСертификат.Издатель_OU);
				СертификатКриптографии.Издатель.Свойство("C", ЗаписьСертификат.Издатель_C);
				СертификатКриптографии.Издатель.Свойство("ST", ЗаписьСертификат.Издатель_ST);
				СертификатКриптографии.Издатель.Свойство("L", ЗаписьСертификат.Издатель_L);
				СертификатКриптографии.Издатель.Свойство("E", ЗаписьСертификат.Издатель_E);
				СертификатКриптографии.Издатель.Свойство("SN", ЗаписьСертификат.Издатель_SN);
				СертификатКриптографии.Издатель.Свойство("GN", ЗаписьСертификат.Издатель_GN);
				СертификатКриптографии.Издатель.Свойство("T", ЗаписьСертификат.Издатель_T);
				СертификатКриптографии.Издатель.Свойство("Street", ЗаписьСертификат.Издатель_Street);
				
				ЗаписьСертификат.ИспользоватьДляПодписи = СертификатКриптографии.ИспользоватьДляПодписи;
				ЗаписьСертификат.ИспользоватьДляШифрования = СертификатКриптографии.ИспользоватьДляШифрования;
				ЗаписьСертификат.ОткрытыйКлючДвоичныеДанные = Строка(СертификатКриптографии.ОткрытыйКлюч);
				ЗаписьСертификат.ОткрытыйКлючBase64 = Base64Строка(СертификатКриптографии.ОткрытыйКлюч);
				ЗаписьСертификат.ОтпечатокДвоичныеДанные = Строка(СертификатКриптографии.Отпечаток);
				ЗаписьСертификат.ОтпечатокBase64 = Base64Строка(СертификатКриптографии.Отпечаток);
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписатьJSON(ЗаписьJSON, СертификатКриптографии.РасширенныеСвойства);
				ЗаписьСертификат.РасширенныеСвойства = ЗаписьJSON.Закрыть();
								
				ЗаписьСертификат.СерийныйНомерДвоичныеДанные = Строка(СертификатКриптографии.СерийныйНомер);
				ЗаписьСертификат.СерийныйНомерBase64 = Base64Строка(СертификатКриптографии.СерийныйНомер);
				
				СертификатКриптографии.Субъект.Свойство("CN", ЗаписьСертификат.Субъект_CN);
				СертификатКриптографии.Субъект.Свойство("O", ЗаписьСертификат.Субъект_O);
				СертификатКриптографии.Субъект.Свойство("OU", ЗаписьСертификат.Субъект_OU);
				СертификатКриптографии.Субъект.Свойство("C", ЗаписьСертификат.Субъект_C);
				СертификатКриптографии.Субъект.Свойство("ST", ЗаписьСертификат.Субъект_ST);
				СертификатКриптографии.Субъект.Свойство("L", ЗаписьСертификат.Субъект_L);
				СертификатКриптографии.Субъект.Свойство("E", ЗаписьСертификат.Субъект_E);
				СертификатКриптографии.Субъект.Свойство("SN", ЗаписьСертификат.Субъект_SN);
				СертификатКриптографии.Субъект.Свойство("GN", ЗаписьСертификат.Субъект_GN);
				СертификатКриптографии.Субъект.Свойство("T", ЗаписьСертификат.Субъект_T);			
				СертификатКриптографии.Субъект.Свойство("Street", ЗаписьСертификат.Субъект_Street);
				
			КонецЦикла;
			
			// Для чтения сертификатов воспользуемся первым доступным менеджером криптографии
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;		
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция НазначениеОбработки() 
	
	МассивНазначенийОбработки = Новый Массив;
	 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

Функция ТаблицаКомандОбработки() 
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево"));
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка"));
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево"));
	
	ДобавитьКоманду(тзКоманд, НСтр("ru='ОбозревательКриптографии'"), НСтр("ru='Обозреватель криптографии'"), Ложь, "ОткрытиеФормы", "", Ложь);
	
	Возврат тзКоманд;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	строкаКоманды = ТаблицаКоманд.Добавить();
	строкаКоманды.Идентификатор = Идентификатор;
	строкаКоманды.Представление = Представление;
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	строкаКоманды.Использование = Использование;
	строкаКоманды.Модификатор = Модификатор;
	строкаКоманды.Скрыть = Скрыть;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли